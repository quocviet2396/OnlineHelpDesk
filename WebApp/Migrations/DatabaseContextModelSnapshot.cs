// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsID");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("userConnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbNotification");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Decription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSupporter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("TicketStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameSupporter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketDTO");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotiId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotiId")
                        .IsUnique()
                        .HasFilter("[NotiId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserConn");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailToConfirm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "2hXDzNyV",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$XwtbfDoe4tHGYgIs5FRHPOJ5lvVBuqczp.3JkBZKh0gMHyOf6TIPi",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "BIQLjC7P",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$.IN5OEK2A0uj3xbjsMiQOuewMds0dOEeoAAKiQCPu8i69FYQ2EXay",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "fAe05WiL",
                            Email = "user@gmail.com",
                            Password = "$2a$11$ubnNOLel94.39eNjI0ZvOe/8wN3ySKLVTpvd1TFrz8B.lLx3W/wqW",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "18211 Hilpert Meadows, Littleville, Japan",
                            City = "West Aldentown",
                            DateOfBirth = new DateTime(2023, 9, 17, 8, 45, 10, 46, DateTimeKind.Local).AddTicks(892),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Everett",
                            FullName = "Everett Rempel",
                            Gender = true,
                            LastName = "Rempel",
                            Phone = "1-386-320-5665 x9442",
                            Student_code = "StudentX2cE66ai"
                        },
                        new
                        {
                            Id = 3,
                            Address = "339 Samanta Run, Koeppport, Spain",
                            City = "Cristtown",
                            DateOfBirth = new DateTime(2023, 5, 7, 9, 13, 58, 140, DateTimeKind.Local).AddTicks(5940),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Berry",
                            FullName = "Berry Buckridge",
                            Gender = false,
                            LastName = "Buckridge",
                            Phone = "(676) 328-6177",
                            Student_code = "Student0ATNCYzy"
                        },
                        new
                        {
                            Id = 5,
                            Address = "1359 Russel Loop, Port Torrance, Belgium",
                            City = "Spencerberg",
                            DateOfBirth = new DateTime(2023, 8, 13, 15, 5, 27, 67, DateTimeKind.Local).AddTicks(4223),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Javier",
                            FullName = "Javier Ratke",
                            Gender = true,
                            LastName = "Ratke",
                            Phone = "435.945.0726",
                            Student_code = "StudentKbRF4jON"
                        },
                        new
                        {
                            Id = 7,
                            Address = "3877 Baumbach Rue, Schmidtton, Antarctica (the territory South of 60 deg S)",
                            City = "West Arnulfo",
                            DateOfBirth = new DateTime(2023, 5, 9, 8, 10, 24, 458, DateTimeKind.Local).AddTicks(2919),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Lina",
                            FullName = "Lina Rowe",
                            Gender = false,
                            LastName = "Rowe",
                            Phone = "(857) 944-4107 x85922",
                            Student_code = "StudentwN9Vie9J"
                        },
                        new
                        {
                            Id = 9,
                            Address = "23774 Eloise Brook, Mayertview, Argentina",
                            City = "Loweshire",
                            DateOfBirth = new DateTime(2022, 11, 17, 4, 59, 50, 787, DateTimeKind.Local).AddTicks(9505),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Austen",
                            FullName = "Austen Feil",
                            Gender = true,
                            LastName = "Feil",
                            Phone = "662.717.1844 x13493",
                            Student_code = "StudentHIZyiiBZ"
                        },
                        new
                        {
                            Id = 11,
                            Address = "741 King Road, Bartolettiside, Norfolk Island",
                            City = "Zulauftown",
                            DateOfBirth = new DateTime(2023, 3, 1, 4, 3, 5, 292, DateTimeKind.Local).AddTicks(2220),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Theo",
                            FullName = "Theo Rolfson",
                            Gender = true,
                            LastName = "Rolfson",
                            Phone = "1-894-218-3880 x328",
                            Student_code = "Student4XQemNLa"
                        },
                        new
                        {
                            Id = 13,
                            Address = "4483 Ford Extensions, West Carlifurt, Equatorial Guinea",
                            City = "Veldaborough",
                            DateOfBirth = new DateTime(2023, 4, 24, 7, 22, 0, 445, DateTimeKind.Local).AddTicks(5375),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Granville",
                            FullName = "Granville Mraz",
                            Gender = true,
                            LastName = "Mraz",
                            Phone = "871.970.4364 x8887",
                            Student_code = "StudentzLYLa4EC"
                        },
                        new
                        {
                            Id = 15,
                            Address = "255 Tessie Mews, South Alverta, United Arab Emirates",
                            City = "East Alphonso",
                            DateOfBirth = new DateTime(2023, 2, 20, 18, 2, 35, 141, DateTimeKind.Local).AddTicks(8752),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Lavada",
                            FullName = "Lavada Schiller",
                            Gender = false,
                            LastName = "Schiller",
                            Phone = "998.374.6552",
                            Student_code = "StudentY9MGPW1F"
                        },
                        new
                        {
                            Id = 17,
                            Address = "9303 Arden Heights, West Lola, Iceland",
                            City = "New Michaelville",
                            DateOfBirth = new DateTime(2023, 7, 20, 21, 53, 52, 858, DateTimeKind.Local).AddTicks(3851),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Jackeline",
                            FullName = "Jackeline Haley",
                            Gender = true,
                            LastName = "Haley",
                            Phone = "687-447-1417",
                            Student_code = "StudentCwSc7oug"
                        },
                        new
                        {
                            Id = 19,
                            Address = "1160 Rau Walks, Archibaldland, Azerbaijan",
                            City = "Sauerborough",
                            DateOfBirth = new DateTime(2022, 12, 20, 9, 14, 38, 783, DateTimeKind.Local).AddTicks(9109),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Helmer",
                            FullName = "Helmer Bogisich",
                            Gender = true,
                            LastName = "Bogisich",
                            Phone = "1-779-785-0089",
                            Student_code = "StudentUNjMSb60"
                        },
                        new
                        {
                            Id = 21,
                            Address = "5777 Legros Rapids, Jaydaside, Burundi",
                            City = "Port Johnnieview",
                            DateOfBirth = new DateTime(2023, 2, 12, 16, 40, 23, 978, DateTimeKind.Local).AddTicks(5071),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Jarod",
                            FullName = "Jarod Bruen",
                            Gender = false,
                            LastName = "Bruen",
                            Phone = "741.244.6988 x122",
                            Student_code = "Student87pVkQr9"
                        },
                        new
                        {
                            Id = 23,
                            Address = "8666 Boyer Gardens, South Nelleview, Tanzania",
                            City = "Kertzmannchester",
                            DateOfBirth = new DateTime(2023, 7, 9, 15, 29, 14, 543, DateTimeKind.Local).AddTicks(1551),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Anahi",
                            FullName = "Anahi Rohan",
                            Gender = true,
                            LastName = "Rohan",
                            Phone = "272-863-8633 x4463",
                            Student_code = "StudentGb4kOgMb"
                        },
                        new
                        {
                            Id = 25,
                            Address = "663 Addie Burg, Port Tyrastad, Cape Verde",
                            City = "Lake Garfieldborough",
                            DateOfBirth = new DateTime(2022, 10, 14, 0, 20, 59, 573, DateTimeKind.Local).AddTicks(3761),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Luna",
                            FullName = "Luna Beatty",
                            Gender = true,
                            LastName = "Beatty",
                            Phone = "1-352-249-1853",
                            Student_code = "Studentl9Nb7JoR"
                        },
                        new
                        {
                            Id = 27,
                            Address = "59042 Walter Hollow, Carolineshire, Uganda",
                            City = "East Keltonchester",
                            DateOfBirth = new DateTime(2023, 5, 5, 4, 56, 29, 578, DateTimeKind.Local).AddTicks(2725),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Kiley",
                            FullName = "Kiley Skiles",
                            Gender = false,
                            LastName = "Skiles",
                            Phone = "1-927-456-6808",
                            Student_code = "StudentfIp3g07f"
                        },
                        new
                        {
                            Id = 29,
                            Address = "55984 Jaylin Stream, Cameronland, Myanmar",
                            City = "Bennytown",
                            DateOfBirth = new DateTime(2023, 9, 9, 22, 47, 48, 583, DateTimeKind.Local).AddTicks(5699),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Ashley",
                            FullName = "Ashley Stokes",
                            Gender = false,
                            LastName = "Stokes",
                            Phone = "555-798-9526",
                            Student_code = "StudentW0PRQjez"
                        },
                        new
                        {
                            Id = 31,
                            Address = "260 Mossie Views, Gonzaloborough, Tajikistan",
                            City = "Zitaborough",
                            DateOfBirth = new DateTime(2023, 4, 12, 4, 41, 15, 234, DateTimeKind.Local).AddTicks(8222),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Etha",
                            FullName = "Etha Murray",
                            Gender = false,
                            LastName = "Murray",
                            Phone = "1-288-752-5673",
                            Student_code = "StudentbZE26DFn"
                        },
                        new
                        {
                            Id = 33,
                            Address = "2154 Rico Points, Donnellyberg, Ghana",
                            City = "South Daron",
                            DateOfBirth = new DateTime(2023, 3, 23, 10, 28, 55, 911, DateTimeKind.Local).AddTicks(8771),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Minerva",
                            FullName = "Minerva Mitchell",
                            Gender = true,
                            LastName = "Mitchell",
                            Phone = "(726) 973-1810",
                            Student_code = "StudentUqAEH0zs"
                        },
                        new
                        {
                            Id = 35,
                            Address = "5389 Schiller Orchard, Spinkamouth, Guinea-Bissau",
                            City = "Cicerohaven",
                            DateOfBirth = new DateTime(2023, 10, 1, 16, 33, 39, 778, DateTimeKind.Local).AddTicks(3465),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Corrine",
                            FullName = "Corrine Streich",
                            Gender = true,
                            LastName = "Streich",
                            Phone = "977-404-5506 x6292",
                            Student_code = "StudentQsYb525V"
                        },
                        new
                        {
                            Id = 37,
                            Address = "6271 Stoltenberg Walks, South Antone, Bouvet Island (Bouvetoya)",
                            City = "New Bria",
                            DateOfBirth = new DateTime(2023, 6, 17, 21, 59, 7, 754, DateTimeKind.Local).AddTicks(6791),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Jaime",
                            FullName = "Jaime Fisher",
                            Gender = false,
                            LastName = "Fisher",
                            Phone = "(878) 207-2641",
                            Student_code = "StudentTSta8h4H"
                        },
                        new
                        {
                            Id = 39,
                            Address = "489 Jerry Track, West Eldon, Kuwait",
                            City = "West Kennedi",
                            DateOfBirth = new DateTime(2022, 10, 27, 7, 25, 16, 477, DateTimeKind.Local).AddTicks(4490),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Domenick",
                            FullName = "Domenick Green",
                            Gender = true,
                            LastName = "Green",
                            Phone = "(830) 821-8504",
                            Student_code = "StudentIkMJfQMG"
                        },
                        new
                        {
                            Id = 41,
                            Address = "042 Lorna Alley, South Kamryntown, Zimbabwe",
                            City = "North Michel",
                            DateOfBirth = new DateTime(2023, 7, 14, 15, 41, 16, 474, DateTimeKind.Local).AddTicks(2480),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Hilton",
                            FullName = "Hilton Little",
                            Gender = true,
                            LastName = "Little",
                            Phone = "925-224-1286",
                            Student_code = "StudentCtrlny8B"
                        },
                        new
                        {
                            Id = 43,
                            Address = "136 Cedrick Hill, Pricebury, Gabon",
                            City = "Lake Hannah",
                            DateOfBirth = new DateTime(2022, 11, 8, 9, 38, 29, 718, DateTimeKind.Local).AddTicks(8999),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Rusty",
                            FullName = "Rusty Feeney",
                            Gender = true,
                            LastName = "Feeney",
                            Phone = "(502) 237-2503 x6055",
                            Student_code = "StudentMwJKFSBT"
                        },
                        new
                        {
                            Id = 45,
                            Address = "74714 Titus Trafficway, Lisetteville, Estonia",
                            City = "Volkmanshire",
                            DateOfBirth = new DateTime(2023, 6, 14, 14, 50, 24, 104, DateTimeKind.Local).AddTicks(7284),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Zander",
                            FullName = "Zander Stokes",
                            Gender = true,
                            LastName = "Stokes",
                            Phone = "997-317-2881 x5879",
                            Student_code = "StudentSjIUGrWY"
                        },
                        new
                        {
                            Id = 47,
                            Address = "854 Delpha Canyon, Lake Lottie, Reunion",
                            City = "Elissaland",
                            DateOfBirth = new DateTime(2023, 3, 3, 9, 16, 23, 767, DateTimeKind.Local).AddTicks(7194),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Carson",
                            FullName = "Carson Haag",
                            Gender = true,
                            LastName = "Haag",
                            Phone = "1-399-310-9376 x613",
                            Student_code = "StudentKbvrPF8l"
                        },
                        new
                        {
                            Id = 49,
                            Address = "9954 Rey Plaza, Tiabury, Bosnia and Herzegovina",
                            City = "South Cameron",
                            DateOfBirth = new DateTime(2023, 9, 11, 5, 15, 3, 394, DateTimeKind.Local).AddTicks(6279),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Rhiannon",
                            FullName = "Rhiannon Runolfsson",
                            Gender = true,
                            LastName = "Runolfsson",
                            Phone = "927-808-5903 x14452",
                            Student_code = "StudentHbDdbmPR"
                        },
                        new
                        {
                            Id = 51,
                            Address = "05520 Ova Port, Braunmouth, Poland",
                            City = "Guidoburgh",
                            DateOfBirth = new DateTime(2023, 7, 13, 22, 54, 3, 872, DateTimeKind.Local).AddTicks(4477),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Tanya",
                            FullName = "Tanya Larson",
                            Gender = true,
                            LastName = "Larson",
                            Phone = "(978) 292-4939 x5127",
                            Student_code = "StudentxCweH6ss"
                        },
                        new
                        {
                            Id = 53,
                            Address = "067 Ezequiel Pike, South Robertview, Colombia",
                            City = "East Fanny",
                            DateOfBirth = new DateTime(2023, 6, 28, 22, 35, 46, 218, DateTimeKind.Local).AddTicks(4427),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Wyman",
                            FullName = "Wyman Torphy",
                            Gender = true,
                            LastName = "Torphy",
                            Phone = "902-438-9295 x841",
                            Student_code = "Studentw4QoDw0c"
                        },
                        new
                        {
                            Id = 55,
                            Address = "866 Edwin Court, West Luciousfort, Madagascar",
                            City = "Armandport",
                            DateOfBirth = new DateTime(2022, 11, 13, 11, 41, 55, 752, DateTimeKind.Local).AddTicks(7131),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Katlyn",
                            FullName = "Katlyn Haag",
                            Gender = false,
                            LastName = "Haag",
                            Phone = "(543) 446-0884 x490",
                            Student_code = "StudentZ6EKNNSp"
                        },
                        new
                        {
                            Id = 57,
                            Address = "0874 Armstrong Points, Port Alessandrastad, Ghana",
                            City = "Collinsland",
                            DateOfBirth = new DateTime(2023, 6, 8, 20, 47, 33, 505, DateTimeKind.Local).AddTicks(3684),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Denis",
                            FullName = "Denis Gottlieb",
                            Gender = false,
                            LastName = "Gottlieb",
                            Phone = "560-556-2365",
                            Student_code = "StudentC1Yi10jK"
                        },
                        new
                        {
                            Id = 59,
                            Address = "7026 Nicolas Mountain, Port Meta, Sweden",
                            City = "East Jerod",
                            DateOfBirth = new DateTime(2023, 3, 25, 19, 6, 10, 707, DateTimeKind.Local).AddTicks(5528),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Marjorie",
                            FullName = "Marjorie Paucek",
                            Gender = false,
                            LastName = "Paucek",
                            Phone = "(224) 699-1214 x48825",
                            Student_code = "Studenti6bF97u4"
                        },
                        new
                        {
                            Id = 61,
                            Address = "7714 Hiram Ville, Missourishire, Namibia",
                            City = "Weberburgh",
                            DateOfBirth = new DateTime(2022, 11, 1, 1, 3, 58, 393, DateTimeKind.Local).AddTicks(1331),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Alicia",
                            FullName = "Alicia Auer",
                            Gender = false,
                            LastName = "Auer",
                            Phone = "802.204.3379",
                            Student_code = "StudentUJ5fvvDt"
                        },
                        new
                        {
                            Id = 63,
                            Address = "59347 Greyson Plaza, Herthafurt, Tokelau",
                            City = "North Karina",
                            DateOfBirth = new DateTime(2022, 12, 8, 14, 5, 42, 315, DateTimeKind.Local).AddTicks(9447),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "River",
                            FullName = "River Labadie",
                            Gender = true,
                            LastName = "Labadie",
                            Phone = "238-543-3134 x307",
                            Student_code = "Student8byvxPLU"
                        },
                        new
                        {
                            Id = 65,
                            Address = "114 Morton Grove, Dooleyhaven, Senegal",
                            City = "New Judy",
                            DateOfBirth = new DateTime(2023, 1, 13, 6, 29, 34, 476, DateTimeKind.Local).AddTicks(8251),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Dorcas",
                            FullName = "Dorcas Jerde",
                            Gender = true,
                            LastName = "Jerde",
                            Phone = "(353) 472-4643",
                            Student_code = "Studentt4wAds8i"
                        },
                        new
                        {
                            Id = 67,
                            Address = "3865 Cierra Harbors, Ivafurt, Uruguay",
                            City = "Port Shania",
                            DateOfBirth = new DateTime(2022, 10, 10, 22, 0, 38, 651, DateTimeKind.Local).AddTicks(2845),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Justyn",
                            FullName = "Justyn Feest",
                            Gender = true,
                            LastName = "Feest",
                            Phone = "(827) 911-3907",
                            Student_code = "StudentmPUzqqxj"
                        },
                        new
                        {
                            Id = 69,
                            Address = "441 Greenholt Courts, Elsachester, Lithuania",
                            City = "Port Erinbury",
                            DateOfBirth = new DateTime(2022, 10, 27, 13, 53, 14, 839, DateTimeKind.Local).AddTicks(882),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Carroll",
                            FullName = "Carroll Spinka",
                            Gender = true,
                            LastName = "Spinka",
                            Phone = "1-468-867-9069",
                            Student_code = "StudentuvxeVnKK"
                        },
                        new
                        {
                            Id = 71,
                            Address = "92273 Emmerich Oval, Johnstonberg, Grenada",
                            City = "West Ricardo",
                            DateOfBirth = new DateTime(2023, 2, 9, 18, 49, 51, 361, DateTimeKind.Local).AddTicks(4136),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Jacky",
                            FullName = "Jacky Predovic",
                            Gender = true,
                            LastName = "Predovic",
                            Phone = "(319) 227-8579 x70591",
                            Student_code = "StudentPlZNjRQc"
                        },
                        new
                        {
                            Id = 73,
                            Address = "9131 Bruen Bridge, New Travon, Latvia",
                            City = "East Ryanview",
                            DateOfBirth = new DateTime(2022, 12, 24, 9, 43, 25, 92, DateTimeKind.Local).AddTicks(1907),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Gladys",
                            FullName = "Gladys Jacobson",
                            Gender = false,
                            LastName = "Jacobson",
                            Phone = "1-268-936-7807 x0431",
                            Student_code = "Studentbnpj1jfM"
                        },
                        new
                        {
                            Id = 75,
                            Address = "73391 Abernathy Islands, Robertsside, Antarctica (the territory South of 60 deg S)",
                            City = "Braunmouth",
                            DateOfBirth = new DateTime(2023, 9, 3, 20, 44, 42, 77, DateTimeKind.Local).AddTicks(26),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Alice",
                            FullName = "Alice Johnson",
                            Gender = true,
                            LastName = "Johnson",
                            Phone = "(203) 895-0714 x2276",
                            Student_code = "StudentlQt22yOQ"
                        },
                        new
                        {
                            Id = 77,
                            Address = "9062 Schimmel Neck, Heidenreichfurt, Lesotho",
                            City = "East Dannyland",
                            DateOfBirth = new DateTime(2023, 3, 20, 20, 14, 26, 622, DateTimeKind.Local).AddTicks(9496),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Clemens",
                            FullName = "Clemens Welch",
                            Gender = true,
                            LastName = "Welch",
                            Phone = "630-508-8511 x56248",
                            Student_code = "Studentk2mFHzrK"
                        },
                        new
                        {
                            Id = 79,
                            Address = "98311 Lenore Divide, Mauriciostad, Slovenia",
                            City = "Langtown",
                            DateOfBirth = new DateTime(2023, 2, 4, 4, 8, 35, 222, DateTimeKind.Local).AddTicks(3489),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Timothy",
                            FullName = "Timothy Armstrong",
                            Gender = false,
                            LastName = "Armstrong",
                            Phone = "(716) 583-5297",
                            Student_code = "StudentuV6uNeaL"
                        },
                        new
                        {
                            Id = 81,
                            Address = "3982 Aditya Drive, Lake Jeffrey, Afghanistan",
                            City = "Port Ayla",
                            DateOfBirth = new DateTime(2023, 7, 8, 5, 12, 52, 235, DateTimeKind.Local).AddTicks(8994),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Vernie",
                            FullName = "Vernie Christiansen",
                            Gender = false,
                            LastName = "Christiansen",
                            Phone = "(464) 563-4076",
                            Student_code = "Student38eYL3En"
                        },
                        new
                        {
                            Id = 83,
                            Address = "7977 Reilly Burg, New Tomas, Slovenia",
                            City = "New Jeffreyfurt",
                            DateOfBirth = new DateTime(2023, 2, 2, 20, 14, 9, 231, DateTimeKind.Local).AddTicks(7964),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Caesar",
                            FullName = "Caesar Sawayn",
                            Gender = true,
                            LastName = "Sawayn",
                            Phone = "(885) 543-6971 x6618",
                            Student_code = "Studentd2X0Odwg"
                        },
                        new
                        {
                            Id = 85,
                            Address = "03642 Johnson Roads, Friesenchester, Finland",
                            City = "Stanleychester",
                            DateOfBirth = new DateTime(2023, 4, 30, 3, 26, 4, 743, DateTimeKind.Local).AddTicks(6376),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Verner",
                            FullName = "Verner Trantow",
                            Gender = false,
                            LastName = "Trantow",
                            Phone = "(697) 322-8915 x3231",
                            Student_code = "Student0yNg4RRd"
                        },
                        new
                        {
                            Id = 87,
                            Address = "206 Emard Ways, East Maribelberg, Burkina Faso",
                            City = "Lake Karinastad",
                            DateOfBirth = new DateTime(2023, 5, 23, 0, 39, 7, 358, DateTimeKind.Local).AddTicks(3102),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Carlo",
                            FullName = "Carlo Marquardt",
                            Gender = false,
                            LastName = "Marquardt",
                            Phone = "1-522-544-8287 x026",
                            Student_code = "Student7DZidKCh"
                        },
                        new
                        {
                            Id = 89,
                            Address = "6662 Macey Street, Shirleyberg, Slovakia (Slovak Republic)",
                            City = "Port Damianborough",
                            DateOfBirth = new DateTime(2023, 5, 5, 12, 40, 49, 468, DateTimeKind.Local).AddTicks(576),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Reyna",
                            FullName = "Reyna Waters",
                            Gender = true,
                            LastName = "Waters",
                            Phone = "(333) 236-9946",
                            Student_code = "Studentfmp1O3hM"
                        },
                        new
                        {
                            Id = 91,
                            Address = "09793 Jewel Avenue, Tianamouth, United Kingdom",
                            City = "East Jordane",
                            DateOfBirth = new DateTime(2023, 7, 12, 7, 50, 39, 270, DateTimeKind.Local).AddTicks(5699),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Theron",
                            FullName = "Theron Zboncak",
                            Gender = false,
                            LastName = "Zboncak",
                            Phone = "(960) 526-6163 x8197",
                            Student_code = "StudentfEyHubFO"
                        },
                        new
                        {
                            Id = 93,
                            Address = "2997 Ila Haven, Lynchhaven, Solomon Islands",
                            City = "Davefort",
                            DateOfBirth = new DateTime(2022, 10, 17, 12, 32, 55, 937, DateTimeKind.Local).AddTicks(888),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Lue",
                            FullName = "Lue Kovacek",
                            Gender = true,
                            LastName = "Kovacek",
                            Phone = "(938) 380-5578 x48901",
                            Student_code = "Student1OpkCkgY"
                        },
                        new
                        {
                            Id = 95,
                            Address = "6643 Arvid Avenue, South Christineshire, Mali",
                            City = "New Ron",
                            DateOfBirth = new DateTime(2022, 12, 17, 9, 5, 19, 544, DateTimeKind.Local).AddTicks(6614),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Eli",
                            FullName = "Eli Hirthe",
                            Gender = true,
                            LastName = "Hirthe",
                            Phone = "741-581-3891 x69047",
                            Student_code = "StudentNePrJrmY"
                        },
                        new
                        {
                            Id = 97,
                            Address = "60702 Jeremie Lights, South Enamouth, Palau",
                            City = "North Orvillefurt",
                            DateOfBirth = new DateTime(2023, 4, 18, 16, 18, 16, 208, DateTimeKind.Local).AddTicks(8715),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Edward",
                            FullName = "Edward Morar",
                            Gender = false,
                            LastName = "Morar",
                            Phone = "(360) 498-1491",
                            Student_code = "StudentET2JzsFj"
                        },
                        new
                        {
                            Id = 99,
                            Address = "96681 Solon Branch, North Everettmouth, Guadeloupe",
                            City = "Lake Kennethfort",
                            DateOfBirth = new DateTime(2022, 10, 7, 17, 21, 31, 821, DateTimeKind.Local).AddTicks(3530),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Rosetta",
                            FullName = "Rosetta Rice",
                            Gender = false,
                            LastName = "Rice",
                            Phone = "(515) 914-4007",
                            Student_code = "Student5DpQWBB6"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.HasOne("LibraryModels.Notifications", "Notifications")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "NotiId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Notifications");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Navigation("userConn");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userConn");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
