// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserConn");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "6l4PsLO9",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$mY1Y4zw7tzAwNL7r9I.VpeBZWS4HFbNiRSE/6ChixFS6.QRXHcSf2",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "XqpjXeS7",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$/adGVdej8MhiH8AinHAVaOEIM7Hp7yYPNlXb34.XbdYfWn6IuqRwy",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "NEc9cFYV",
                            Email = "user@gmail.com",
                            Password = "$2a$11$waI/NsxwY55oeqCKaqCAWOHKTh9ZyJB2hitCTtXlbbi8HjoIF5Z.2",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "02372 Yost Trace, Manteberg, Saint Helena",
                            City = "Port Chynamouth",
                            DateOfBirth = new DateTime(2023, 2, 2, 20, 3, 26, 222, DateTimeKind.Local).AddTicks(3703),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Electa",
                            FullName = "Electa O'Reilly",
                            Gender = false,
                            LastName = "O'Reilly",
                            Phone = "1-694-822-2022 x91779",
                            Student_code = "StudentmkkMS9Ii"
                        },
                        new
                        {
                            Id = 3,
                            Address = "0276 Howell Crossroad, Scotland, United Kingdom",
                            City = "Marlonberg",
                            DateOfBirth = new DateTime(2023, 9, 22, 2, 37, 30, 859, DateTimeKind.Local).AddTicks(5844),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Santos",
                            FullName = "Santos Hagenes",
                            Gender = false,
                            LastName = "Hagenes",
                            Phone = "(569) 240-7507 x1183",
                            Student_code = "Studentb4f9SBsn"
                        },
                        new
                        {
                            Id = 5,
                            Address = "273 Aaliyah Turnpike, Lake Sebastianhaven, Svalbard & Jan Mayen Islands",
                            City = "Schaeferstad",
                            DateOfBirth = new DateTime(2023, 9, 2, 8, 46, 19, 441, DateTimeKind.Local).AddTicks(5458),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Nestor",
                            FullName = "Nestor Huels",
                            Gender = false,
                            LastName = "Huels",
                            Phone = "599-841-2757 x44244",
                            Student_code = "Studentn9muw4S7"
                        },
                        new
                        {
                            Id = 7,
                            Address = "0320 Madie Prairie, Ninaburgh, Isle of Man",
                            City = "East Odessashire",
                            DateOfBirth = new DateTime(2022, 12, 4, 23, 40, 42, 88, DateTimeKind.Local).AddTicks(9724),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Ceasar",
                            FullName = "Ceasar Thiel",
                            Gender = false,
                            LastName = "Thiel",
                            Phone = "(335) 733-7735 x1141",
                            Student_code = "Studentn4GotfCW"
                        },
                        new
                        {
                            Id = 9,
                            Address = "975 Wilson Isle, Bartonburgh, Tuvalu",
                            City = "East Leilani",
                            DateOfBirth = new DateTime(2022, 10, 19, 4, 4, 8, 699, DateTimeKind.Local).AddTicks(8822),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Anjali",
                            FullName = "Anjali Marks",
                            Gender = false,
                            LastName = "Marks",
                            Phone = "(310) 612-1157 x50283",
                            Student_code = "Studentsbx9si7i"
                        },
                        new
                        {
                            Id = 11,
                            Address = "750 Dorothea Place, New Deion, Estonia",
                            City = "Lefflerhaven",
                            DateOfBirth = new DateTime(2022, 11, 11, 20, 46, 55, 641, DateTimeKind.Local).AddTicks(6550),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Clemens",
                            FullName = "Clemens Kozey",
                            Gender = false,
                            LastName = "Kozey",
                            Phone = "345.797.1232 x8640",
                            Student_code = "StudentBEK6sOia"
                        },
                        new
                        {
                            Id = 13,
                            Address = "502 Keeling Shores, Wittingville, Solomon Islands",
                            City = "Lehnerland",
                            DateOfBirth = new DateTime(2023, 9, 19, 11, 29, 3, 223, DateTimeKind.Local).AddTicks(1349),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Adah",
                            FullName = "Adah Kshlerin",
                            Gender = true,
                            LastName = "Kshlerin",
                            Phone = "(302) 513-9301 x18047",
                            Student_code = "StudentIIQt3jxh"
                        },
                        new
                        {
                            Id = 15,
                            Address = "0219 Lindsey Village, Coltonview, Bahrain",
                            City = "New Wilson",
                            DateOfBirth = new DateTime(2023, 7, 22, 20, 2, 1, 362, DateTimeKind.Local).AddTicks(4402),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Cristian",
                            FullName = "Cristian Price",
                            Gender = true,
                            LastName = "Price",
                            Phone = "(879) 608-0128",
                            Student_code = "StudentbNtyIWKn"
                        },
                        new
                        {
                            Id = 17,
                            Address = "39476 Everardo Drive, West Dominicfort, Cyprus",
                            City = "Strosinborough",
                            DateOfBirth = new DateTime(2023, 7, 11, 20, 5, 50, 709, DateTimeKind.Local).AddTicks(8307),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Russell",
                            FullName = "Russell Braun",
                            Gender = false,
                            LastName = "Braun",
                            Phone = "1-420-622-5172",
                            Student_code = "StudentfWveyI89"
                        },
                        new
                        {
                            Id = 19,
                            Address = "307 Wehner Views, Leanneshire, Costa Rica",
                            City = "Rhiannonmouth",
                            DateOfBirth = new DateTime(2023, 5, 17, 17, 48, 7, 39, DateTimeKind.Local).AddTicks(9871),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Kaelyn",
                            FullName = "Kaelyn Gleason",
                            Gender = false,
                            LastName = "Gleason",
                            Phone = "(373) 218-3236",
                            Student_code = "StudentGqugi9Td"
                        },
                        new
                        {
                            Id = 21,
                            Address = "8673 Halvorson Course, Padbergfort, Ecuador",
                            City = "Lednerburgh",
                            DateOfBirth = new DateTime(2023, 3, 28, 11, 29, 31, 453, DateTimeKind.Local).AddTicks(1243),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Earnestine",
                            FullName = "Earnestine Collins",
                            Gender = false,
                            LastName = "Collins",
                            Phone = "460.965.5419 x27756",
                            Student_code = "StudentBNjKKFqw"
                        },
                        new
                        {
                            Id = 23,
                            Address = "98614 Abshire Turnpike, Lake Moseland, United Arab Emirates",
                            City = "West Jaclynchester",
                            DateOfBirth = new DateTime(2022, 11, 22, 8, 45, 33, 184, DateTimeKind.Local).AddTicks(2026),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Jaiden",
                            FullName = "Jaiden Dach",
                            Gender = false,
                            LastName = "Dach",
                            Phone = "622-358-6510",
                            Student_code = "StudentRjPoacsW"
                        },
                        new
                        {
                            Id = 25,
                            Address = "68246 Boyle Station, Lake Denis, Republic of Korea",
                            City = "North Myra",
                            DateOfBirth = new DateTime(2023, 6, 1, 22, 52, 39, 806, DateTimeKind.Local).AddTicks(1747),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Jimmy",
                            FullName = "Jimmy Mertz",
                            Gender = false,
                            LastName = "Mertz",
                            Phone = "397-562-2345",
                            Student_code = "StudentdsOfU3oR"
                        },
                        new
                        {
                            Id = 27,
                            Address = "46165 Leuschke Oval, Whitefort, Mauritania",
                            City = "West Davonte",
                            DateOfBirth = new DateTime(2023, 6, 24, 13, 1, 48, 825, DateTimeKind.Local).AddTicks(4015),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Leonel",
                            FullName = "Leonel Cruickshank",
                            Gender = false,
                            LastName = "Cruickshank",
                            Phone = "372-208-2468",
                            Student_code = "StudentyMudMhVM"
                        },
                        new
                        {
                            Id = 29,
                            Address = "89124 Diego Road, Lake Donavon, Martinique",
                            City = "Port Craigland",
                            DateOfBirth = new DateTime(2022, 12, 30, 6, 24, 53, 118, DateTimeKind.Local).AddTicks(8182),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Al",
                            FullName = "Al Weimann",
                            Gender = false,
                            LastName = "Weimann",
                            Phone = "(818) 281-1228",
                            Student_code = "StudentUWO2LeUJ"
                        },
                        new
                        {
                            Id = 31,
                            Address = "0811 Spencer Hill, North Antwantown, Oman",
                            City = "Urbanmouth",
                            DateOfBirth = new DateTime(2023, 5, 23, 3, 47, 24, 599, DateTimeKind.Local).AddTicks(7438),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Judah",
                            FullName = "Judah Brown",
                            Gender = false,
                            LastName = "Brown",
                            Phone = "1-319-555-7882 x838",
                            Student_code = "StudentJu0rJbyu"
                        },
                        new
                        {
                            Id = 33,
                            Address = "10988 Catalina Turnpike, Sipesmouth, Micronesia",
                            City = "Grahamville",
                            DateOfBirth = new DateTime(2023, 6, 14, 5, 28, 13, 676, DateTimeKind.Local).AddTicks(1875),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Jaquelin",
                            FullName = "Jaquelin Schoen",
                            Gender = false,
                            LastName = "Schoen",
                            Phone = "793.288.4098",
                            Student_code = "StudentmtqiE298"
                        },
                        new
                        {
                            Id = 35,
                            Address = "06513 Shanna Green, West Destanyfurt, Cyprus",
                            City = "South Tonistad",
                            DateOfBirth = new DateTime(2023, 5, 18, 11, 59, 46, 659, DateTimeKind.Local).AddTicks(6816),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Bo",
                            FullName = "Bo Tremblay",
                            Gender = false,
                            LastName = "Tremblay",
                            Phone = "443.449.2300 x9355",
                            Student_code = "StudentnongdMTf"
                        },
                        new
                        {
                            Id = 37,
                            Address = "993 Aaron Mills, Dibbertview, New Zealand",
                            City = "Metzview",
                            DateOfBirth = new DateTime(2023, 8, 11, 12, 22, 25, 554, DateTimeKind.Local).AddTicks(6552),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Rose",
                            FullName = "Rose McCullough",
                            Gender = true,
                            LastName = "McCullough",
                            Phone = "(395) 565-3762",
                            Student_code = "StudentwxvFDXCJ"
                        },
                        new
                        {
                            Id = 39,
                            Address = "287 Ebony Square, New Lennie, Samoa",
                            City = "Torpbury",
                            DateOfBirth = new DateTime(2023, 6, 6, 13, 36, 24, 808, DateTimeKind.Local).AddTicks(7047),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Antonina",
                            FullName = "Antonina Mills",
                            Gender = true,
                            LastName = "Mills",
                            Phone = "1-634-652-8747",
                            Student_code = "StudentmTl3QvW1"
                        },
                        new
                        {
                            Id = 41,
                            Address = "7333 Sabina Union, East Elinor, Mozambique",
                            City = "Johnsonland",
                            DateOfBirth = new DateTime(2022, 11, 12, 7, 53, 23, 650, DateTimeKind.Local).AddTicks(2132),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Kendra",
                            FullName = "Kendra Botsford",
                            Gender = true,
                            LastName = "Botsford",
                            Phone = "1-401-774-3529",
                            Student_code = "Student40EwlI9K"
                        },
                        new
                        {
                            Id = 43,
                            Address = "0674 Kautzer Port, New Karine, Virgin Islands, U.S.",
                            City = "East Maud",
                            DateOfBirth = new DateTime(2023, 9, 14, 7, 12, 28, 602, DateTimeKind.Local).AddTicks(7376),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Wendell",
                            FullName = "Wendell Abshire",
                            Gender = true,
                            LastName = "Abshire",
                            Phone = "394-776-7867 x51067",
                            Student_code = "StudentcpkLg4rt"
                        },
                        new
                        {
                            Id = 45,
                            Address = "824 Jakob Keys, North Clair, Netherlands Antilles",
                            City = "Lake Douglas",
                            DateOfBirth = new DateTime(2023, 5, 17, 3, 52, 50, 797, DateTimeKind.Local).AddTicks(5827),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Kayla",
                            FullName = "Kayla Fritsch",
                            Gender = true,
                            LastName = "Fritsch",
                            Phone = "364-436-8668",
                            Student_code = "StudentIQKPjx36"
                        },
                        new
                        {
                            Id = 47,
                            Address = "345 Clair Parkway, Zakaryton, Mayotte",
                            City = "North Hermina",
                            DateOfBirth = new DateTime(2023, 6, 23, 9, 8, 55, 859, DateTimeKind.Local).AddTicks(7148),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Owen",
                            FullName = "Owen Legros",
                            Gender = false,
                            LastName = "Legros",
                            Phone = "328-918-6022 x024",
                            Student_code = "StudentqFomIqCs"
                        },
                        new
                        {
                            Id = 49,
                            Address = "938 Aubree Springs, North Rosemary, Armenia",
                            City = "Beierton",
                            DateOfBirth = new DateTime(2023, 9, 16, 4, 36, 30, 608, DateTimeKind.Local).AddTicks(7041),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Gerry",
                            FullName = "Gerry Bogan",
                            Gender = true,
                            LastName = "Bogan",
                            Phone = "573.448.0097 x737",
                            Student_code = "StudentMYIWTkAO"
                        },
                        new
                        {
                            Id = 51,
                            Address = "83943 Ritchie Well, Schummmouth, Chile",
                            City = "Weissnatville",
                            DateOfBirth = new DateTime(2023, 9, 21, 9, 56, 31, 181, DateTimeKind.Local).AddTicks(7682),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Benny",
                            FullName = "Benny Kulas",
                            Gender = true,
                            LastName = "Kulas",
                            Phone = "1-363-965-2644",
                            Student_code = "Studenta6bOFFVN"
                        },
                        new
                        {
                            Id = 53,
                            Address = "11607 Reichel Parkway, Port Damian, El Salvador",
                            City = "Hagenesmouth",
                            DateOfBirth = new DateTime(2023, 1, 25, 22, 51, 52, 736, DateTimeKind.Local).AddTicks(1915),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Audreanne",
                            FullName = "Audreanne Von",
                            Gender = true,
                            LastName = "Von",
                            Phone = "341.573.5309",
                            Student_code = "StudentMf4JHxPV"
                        },
                        new
                        {
                            Id = 55,
                            Address = "5980 Hoppe Flat, Morissetteland, Afghanistan",
                            City = "Lake Pasqualeside",
                            DateOfBirth = new DateTime(2022, 10, 29, 6, 34, 14, 122, DateTimeKind.Local).AddTicks(6178),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Kenna",
                            FullName = "Kenna Wolf",
                            Gender = true,
                            LastName = "Wolf",
                            Phone = "(710) 814-3666 x2075",
                            Student_code = "Student6HFmmFT5"
                        },
                        new
                        {
                            Id = 57,
                            Address = "87751 Maximus Curve, Fannyberg, Liechtenstein",
                            City = "Lake Scottyside",
                            DateOfBirth = new DateTime(2023, 6, 26, 17, 37, 37, 707, DateTimeKind.Local).AddTicks(5002),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Christa",
                            FullName = "Christa Satterfield",
                            Gender = false,
                            LastName = "Satterfield",
                            Phone = "350.447.3685 x1768",
                            Student_code = "StudentiOH5o7CY"
                        },
                        new
                        {
                            Id = 59,
                            Address = "89846 Elna Trace, North Justinaport, Mongolia",
                            City = "Humbertostad",
                            DateOfBirth = new DateTime(2022, 11, 13, 17, 7, 16, 384, DateTimeKind.Local).AddTicks(7279),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Jefferey",
                            FullName = "Jefferey Koch",
                            Gender = true,
                            LastName = "Koch",
                            Phone = "344-680-0098 x35694",
                            Student_code = "StudentUWxhaf9D"
                        },
                        new
                        {
                            Id = 61,
                            Address = "9937 Wuckert Pine, Dickinsonview, Czech Republic",
                            City = "New Zita",
                            DateOfBirth = new DateTime(2023, 6, 27, 18, 0, 29, 766, DateTimeKind.Local).AddTicks(812),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Jett",
                            FullName = "Jett Braun",
                            Gender = true,
                            LastName = "Braun",
                            Phone = "1-765-471-2156 x00754",
                            Student_code = "StudentGYJFUbiB"
                        },
                        new
                        {
                            Id = 63,
                            Address = "02795 Durgan Mountains, East Citlallihaven, Qatar",
                            City = "New Lesley",
                            DateOfBirth = new DateTime(2023, 2, 19, 9, 28, 17, 915, DateTimeKind.Local).AddTicks(8665),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Eva",
                            FullName = "Eva Carroll",
                            Gender = false,
                            LastName = "Carroll",
                            Phone = "1-407-964-9423 x9616",
                            Student_code = "StudentO7D1aDmh"
                        },
                        new
                        {
                            Id = 65,
                            Address = "4785 Marcellus Rapids, Leschland, Austria",
                            City = "Port Ninaside",
                            DateOfBirth = new DateTime(2022, 10, 16, 15, 0, 35, 627, DateTimeKind.Local).AddTicks(1432),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Hoyt",
                            FullName = "Hoyt Pfannerstill",
                            Gender = true,
                            LastName = "Pfannerstill",
                            Phone = "1-813-552-2157 x3186",
                            Student_code = "StudentowhNCfvo"
                        },
                        new
                        {
                            Id = 67,
                            Address = "18738 Connelly Plaza, Durganland, Bermuda",
                            City = "Uliseston",
                            DateOfBirth = new DateTime(2022, 10, 8, 7, 20, 19, 701, DateTimeKind.Local).AddTicks(4257),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Sigrid",
                            FullName = "Sigrid Quigley",
                            Gender = true,
                            LastName = "Quigley",
                            Phone = "972-844-7674 x65552",
                            Student_code = "Studentgams0sb3"
                        },
                        new
                        {
                            Id = 69,
                            Address = "96161 Collier Manor, Ethatown, Brunei Darussalam",
                            City = "Maximoside",
                            DateOfBirth = new DateTime(2023, 6, 25, 0, 39, 58, 769, DateTimeKind.Local).AddTicks(2039),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Gillian",
                            FullName = "Gillian Pfannerstill",
                            Gender = true,
                            LastName = "Pfannerstill",
                            Phone = "390-947-9046 x4962",
                            Student_code = "StudentXZVEGLgP"
                        },
                        new
                        {
                            Id = 71,
                            Address = "744 Kozey Row, Anabelmouth, Panama",
                            City = "Emilechester",
                            DateOfBirth = new DateTime(2022, 11, 10, 8, 33, 21, 562, DateTimeKind.Local).AddTicks(4461),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Mona",
                            FullName = "Mona Little",
                            Gender = false,
                            LastName = "Little",
                            Phone = "654-520-8418 x3297",
                            Student_code = "StudentZ2NeUP9h"
                        },
                        new
                        {
                            Id = 73,
                            Address = "599 Hallie Hill, Sawaynmouth, Sri Lanka",
                            City = "Lake Alan",
                            DateOfBirth = new DateTime(2023, 1, 20, 0, 15, 15, 412, DateTimeKind.Local).AddTicks(4761),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Amie",
                            FullName = "Amie Bode",
                            Gender = false,
                            LastName = "Bode",
                            Phone = "(544) 595-1867",
                            Student_code = "StudenthLNOpzzy"
                        },
                        new
                        {
                            Id = 75,
                            Address = "7350 Maximus Plaza, Asiastad, Guam",
                            City = "Marlenberg",
                            DateOfBirth = new DateTime(2022, 10, 10, 1, 34, 12, 800, DateTimeKind.Local).AddTicks(3804),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Darrel",
                            FullName = "Darrel Herzog",
                            Gender = false,
                            LastName = "Herzog",
                            Phone = "589-293-9522",
                            Student_code = "StudentIMF1EEXL"
                        },
                        new
                        {
                            Id = 77,
                            Address = "7979 Turcotte Vista, Beahanport, Finland",
                            City = "Port Garnettburgh",
                            DateOfBirth = new DateTime(2023, 8, 1, 17, 46, 31, 119, DateTimeKind.Local).AddTicks(292),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Carlos",
                            FullName = "Carlos Schulist",
                            Gender = false,
                            LastName = "Schulist",
                            Phone = "(453) 389-3380 x6389",
                            Student_code = "StudentC5N6D5AD"
                        },
                        new
                        {
                            Id = 79,
                            Address = "75896 Christophe Rapids, Hyattside, South Georgia and the South Sandwich Islands",
                            City = "Traceyburgh",
                            DateOfBirth = new DateTime(2023, 6, 20, 20, 31, 3, 664, DateTimeKind.Local).AddTicks(3473),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Kristofer",
                            FullName = "Kristofer Dickinson",
                            Gender = false,
                            LastName = "Dickinson",
                            Phone = "685.867.6750",
                            Student_code = "StudentODSgpaO7"
                        },
                        new
                        {
                            Id = 81,
                            Address = "6998 Jacobs Forges, North Ellie, Nepal",
                            City = "Whiteland",
                            DateOfBirth = new DateTime(2023, 9, 7, 14, 4, 3, 297, DateTimeKind.Local).AddTicks(3372),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Ahmad",
                            FullName = "Ahmad Rogahn",
                            Gender = true,
                            LastName = "Rogahn",
                            Phone = "(718) 717-1042",
                            Student_code = "StudentzfDAU0uQ"
                        },
                        new
                        {
                            Id = 83,
                            Address = "4938 Lubowitz Road, North Rahul, Lesotho",
                            City = "Port Ellisland",
                            DateOfBirth = new DateTime(2022, 12, 29, 22, 23, 9, 369, DateTimeKind.Local).AddTicks(9190),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Syble",
                            FullName = "Syble Johns",
                            Gender = false,
                            LastName = "Johns",
                            Phone = "1-728-437-0131",
                            Student_code = "StudentBxbtmWIM"
                        },
                        new
                        {
                            Id = 85,
                            Address = "38786 Schimmel Falls, O'Konfurt, Greece",
                            City = "Isaacshire",
                            DateOfBirth = new DateTime(2023, 7, 17, 21, 26, 55, 127, DateTimeKind.Local).AddTicks(7035),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Lilian",
                            FullName = "Lilian Franecki",
                            Gender = true,
                            LastName = "Franecki",
                            Phone = "289.641.9464 x389",
                            Student_code = "StudentdO9QcQ5D"
                        },
                        new
                        {
                            Id = 87,
                            Address = "5169 Michel Avenue, New Lutherchester, Taiwan",
                            City = "East Kelsi",
                            DateOfBirth = new DateTime(2022, 11, 3, 0, 37, 37, 189, DateTimeKind.Local).AddTicks(4977),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Rubie",
                            FullName = "Rubie McDermott",
                            Gender = false,
                            LastName = "McDermott",
                            Phone = "1-353-506-7122 x5915",
                            Student_code = "Student5BZYyv0M"
                        },
                        new
                        {
                            Id = 89,
                            Address = "8315 Domenick Throughway, New Devante, Malta",
                            City = "Binsbury",
                            DateOfBirth = new DateTime(2023, 7, 10, 8, 30, 58, 249, DateTimeKind.Local).AddTicks(7034),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Kayla",
                            FullName = "Kayla Towne",
                            Gender = false,
                            LastName = "Towne",
                            Phone = "960.382.0173 x8049",
                            Student_code = "StudentOIdbEYnr"
                        },
                        new
                        {
                            Id = 91,
                            Address = "750 Funk Streets, Erichchester, Madagascar",
                            City = "East Saul",
                            DateOfBirth = new DateTime(2023, 2, 1, 22, 19, 51, 258, DateTimeKind.Local).AddTicks(3049),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Jena",
                            FullName = "Jena Quigley",
                            Gender = true,
                            LastName = "Quigley",
                            Phone = "557.796.6865",
                            Student_code = "StudenteF5eru2p"
                        },
                        new
                        {
                            Id = 93,
                            Address = "967 Eldora Field, Lake Patsychester, Bolivia",
                            City = "North Kevinton",
                            DateOfBirth = new DateTime(2023, 6, 2, 8, 44, 17, 444, DateTimeKind.Local).AddTicks(2417),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Missouri",
                            FullName = "Missouri Willms",
                            Gender = false,
                            LastName = "Willms",
                            Phone = "378-947-5781",
                            Student_code = "StudentA8G4wBqb"
                        },
                        new
                        {
                            Id = 95,
                            Address = "5883 Roberta Via, Theronport, Saint Helena",
                            City = "South Alfonso",
                            DateOfBirth = new DateTime(2022, 12, 21, 10, 35, 54, 576, DateTimeKind.Local).AddTicks(2907),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Marianna",
                            FullName = "Marianna Cremin",
                            Gender = true,
                            LastName = "Cremin",
                            Phone = "768-322-2932 x583",
                            Student_code = "StudentLa6mkBCF"
                        },
                        new
                        {
                            Id = 97,
                            Address = "050 Altenwerth Stravenue, New Elijahtown, Solomon Islands",
                            City = "East Oleta",
                            DateOfBirth = new DateTime(2023, 8, 21, 1, 52, 21, 817, DateTimeKind.Local).AddTicks(3031),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Austen",
                            FullName = "Austen Mueller",
                            Gender = true,
                            LastName = "Mueller",
                            Phone = "(396) 642-5397 x163",
                            Student_code = "StudentesBxBDk6"
                        },
                        new
                        {
                            Id = 99,
                            Address = "79219 Adams Trail, South Emilie, Somalia",
                            City = "Medhursthaven",
                            DateOfBirth = new DateTime(2023, 7, 11, 6, 56, 28, 186, DateTimeKind.Local).AddTicks(2703),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Alene",
                            FullName = "Alene Rohan",
                            Gender = true,
                            LastName = "Rohan",
                            Phone = "(337) 771-8938 x1687",
                            Student_code = "Studentw5FuDSwI"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.HasOne("LibraryModels.Users", "Users")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userConn");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
