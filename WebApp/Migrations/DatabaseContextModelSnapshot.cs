// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("userConnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbNotification");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Decription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSupporter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("TicketStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameSupporter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketDTO");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotiId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotiId")
                        .IsUnique()
                        .HasFilter("[NotiId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserConn");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailToConfirm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1oGXfw1g",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$NqtwQPA2e4SmFxyyYgqef.TRNrmhnO98QsDs1z/ZEF64gFg0kEtfW",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "rS3TyrsS",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$i7wOz2jDqwWDlLf6H2JALeVX9IuOkJSzb4Xrl0moU8Gvu15CLkHKi",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "psYDeVbO",
                            Email = "user@gmail.com",
                            Password = "$2a$11$LHpYHxMrmrJrihDJrm6kkO4tLudEQmtKXCV9o.nMNPj9x8YKfCeN2",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "7307 Hollis Lodge, Norbertbury, Armenia",
                            City = "New Reannafurt",
                            DateOfBirth = new DateTime(2023, 9, 25, 5, 7, 7, 378, DateTimeKind.Local).AddTicks(6895),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Andreane",
                            FullName = "Andreane Kihn",
                            Gender = true,
                            LastName = "Kihn",
                            Phone = "561.311.5210 x5091",
                            Student_code = "StudentzWY11aa8"
                        },
                        new
                        {
                            Id = 3,
                            Address = "35768 Kunze Court, Port Royal, Sweden",
                            City = "Loganburgh",
                            DateOfBirth = new DateTime(2023, 7, 31, 22, 48, 56, 958, DateTimeKind.Local).AddTicks(7752),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Gordon",
                            FullName = "Gordon McClure",
                            Gender = true,
                            LastName = "McClure",
                            Phone = "526.411.3359 x34177",
                            Student_code = "StudentMzxfU00V"
                        },
                        new
                        {
                            Id = 5,
                            Address = "9255 Roy Mission, Citlalliport, Turkey",
                            City = "New Herthachester",
                            DateOfBirth = new DateTime(2022, 10, 3, 23, 1, 25, 466, DateTimeKind.Local).AddTicks(679),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Ressie",
                            FullName = "Ressie Auer",
                            Gender = true,
                            LastName = "Auer",
                            Phone = "716-464-0723",
                            Student_code = "StudentzjMFRyT2"
                        },
                        new
                        {
                            Id = 7,
                            Address = "06440 Herman Trafficway, East Carey, Mauritania",
                            City = "Larsonborough",
                            DateOfBirth = new DateTime(2022, 10, 14, 1, 7, 37, 831, DateTimeKind.Local).AddTicks(850),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Arvid",
                            FullName = "Arvid Kassulke",
                            Gender = false,
                            LastName = "Kassulke",
                            Phone = "768-948-9944 x9878",
                            Student_code = "StudentPYdHbZgW"
                        },
                        new
                        {
                            Id = 9,
                            Address = "6492 Hills Crescent, Port Dwighttown, Burundi",
                            City = "Gaylordmouth",
                            DateOfBirth = new DateTime(2023, 9, 15, 3, 27, 25, 961, DateTimeKind.Local).AddTicks(3389),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Joana",
                            FullName = "Joana Douglas",
                            Gender = false,
                            LastName = "Douglas",
                            Phone = "274.556.9551 x850",
                            Student_code = "StudentVCHdjkuB"
                        },
                        new
                        {
                            Id = 11,
                            Address = "96646 Strosin Circle, Angelotown, Djibouti",
                            City = "Port Victor",
                            DateOfBirth = new DateTime(2023, 5, 29, 13, 33, 54, 742, DateTimeKind.Local).AddTicks(850),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Magali",
                            FullName = "Magali Romaguera",
                            Gender = true,
                            LastName = "Romaguera",
                            Phone = "(952) 258-4915 x55200",
                            Student_code = "StudentqxYPFzYM"
                        },
                        new
                        {
                            Id = 13,
                            Address = "370 Brendon Ranch, Purdymouth, Yemen",
                            City = "Lake Daniella",
                            DateOfBirth = new DateTime(2022, 11, 23, 0, 16, 32, 578, DateTimeKind.Local).AddTicks(4170),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Danielle",
                            FullName = "Danielle Buckridge",
                            Gender = true,
                            LastName = "Buckridge",
                            Phone = "816-264-6342 x627",
                            Student_code = "StudentOFZJWXWv"
                        },
                        new
                        {
                            Id = 15,
                            Address = "5536 Moen Neck, North Colinberg, Democratic People's Republic of Korea",
                            City = "New Nellieport",
                            DateOfBirth = new DateTime(2022, 12, 17, 1, 54, 9, 562, DateTimeKind.Local).AddTicks(8123),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Rowland",
                            FullName = "Rowland Glover",
                            Gender = false,
                            LastName = "Glover",
                            Phone = "1-823-857-7162 x3342",
                            Student_code = "Student9DgEbT3A"
                        },
                        new
                        {
                            Id = 17,
                            Address = "02891 Christiansen Land, Tristonburgh, Grenada",
                            City = "Zemlakport",
                            DateOfBirth = new DateTime(2023, 5, 23, 0, 0, 53, 543, DateTimeKind.Local).AddTicks(4235),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Ubaldo",
                            FullName = "Ubaldo Watsica",
                            Gender = true,
                            LastName = "Watsica",
                            Phone = "840.514.7732 x91568",
                            Student_code = "StudentSg89U4XA"
                        },
                        new
                        {
                            Id = 19,
                            Address = "64237 Chet Spur, Armstrongbury, Finland",
                            City = "Pollichburgh",
                            DateOfBirth = new DateTime(2023, 1, 15, 0, 48, 36, 449, DateTimeKind.Local).AddTicks(2573),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Pearl",
                            FullName = "Pearl Schneider",
                            Gender = true,
                            LastName = "Schneider",
                            Phone = "(807) 865-6849 x715",
                            Student_code = "Student4ke1UzvG"
                        },
                        new
                        {
                            Id = 21,
                            Address = "74847 Lemke Fords, New Isabellechester, Malawi",
                            City = "Lake Karlitown",
                            DateOfBirth = new DateTime(2023, 8, 31, 8, 18, 56, 841, DateTimeKind.Local).AddTicks(5386),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Gabrielle",
                            FullName = "Gabrielle Glover",
                            Gender = true,
                            LastName = "Glover",
                            Phone = "671.380.2823",
                            Student_code = "StudentYQc7XSmU"
                        },
                        new
                        {
                            Id = 23,
                            Address = "681 Mills Ridge, Deronton, Bahamas",
                            City = "Port Marisol",
                            DateOfBirth = new DateTime(2023, 3, 21, 4, 5, 13, 95, DateTimeKind.Local).AddTicks(4367),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Marielle",
                            FullName = "Marielle Goldner",
                            Gender = false,
                            LastName = "Goldner",
                            Phone = "(856) 682-3421",
                            Student_code = "StudentvtwbwVNH"
                        },
                        new
                        {
                            Id = 25,
                            Address = "1661 Jermey Dale, Daneshire, Malta",
                            City = "Venaburgh",
                            DateOfBirth = new DateTime(2023, 9, 7, 15, 25, 36, 828, DateTimeKind.Local).AddTicks(9531),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Chanel",
                            FullName = "Chanel Mayer",
                            Gender = true,
                            LastName = "Mayer",
                            Phone = "535-496-3491",
                            Student_code = "Student8WvF7cbI"
                        },
                        new
                        {
                            Id = 27,
                            Address = "5447 Mann Falls, Dickensmouth, Turkey",
                            City = "Pacochatown",
                            DateOfBirth = new DateTime(2022, 10, 30, 22, 6, 42, 782, DateTimeKind.Local).AddTicks(5136),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Hettie",
                            FullName = "Hettie Hermiston",
                            Gender = true,
                            LastName = "Hermiston",
                            Phone = "827-425-5640",
                            Student_code = "StudentMI89PKv6"
                        },
                        new
                        {
                            Id = 29,
                            Address = "537 Keebler Unions, Paolofort, Armenia",
                            City = "Bartolettiland",
                            DateOfBirth = new DateTime(2023, 7, 25, 23, 43, 34, 201, DateTimeKind.Local).AddTicks(2050),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Dennis",
                            FullName = "Dennis Kihn",
                            Gender = true,
                            LastName = "Kihn",
                            Phone = "(726) 302-5890",
                            Student_code = "Student6xrq6pOC"
                        },
                        new
                        {
                            Id = 31,
                            Address = "98116 Lola Throughway, New Codyborough, Republic of Korea",
                            City = "Zionhaven",
                            DateOfBirth = new DateTime(2023, 2, 2, 20, 0, 20, 717, DateTimeKind.Local).AddTicks(349),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Naomie",
                            FullName = "Naomie Crist",
                            Gender = false,
                            LastName = "Crist",
                            Phone = "333-663-9783 x274",
                            Student_code = "StudentaL0KdlPy"
                        },
                        new
                        {
                            Id = 33,
                            Address = "07382 Alejandrin Forge, Florenceborough, New Zealand",
                            City = "East Janie",
                            DateOfBirth = new DateTime(2023, 4, 28, 18, 19, 7, 152, DateTimeKind.Local).AddTicks(5258),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Burley",
                            FullName = "Burley Bins",
                            Gender = false,
                            LastName = "Bins",
                            Phone = "(912) 748-1404 x2410",
                            Student_code = "StudentVhn7fpR7"
                        },
                        new
                        {
                            Id = 35,
                            Address = "246 Rosenbaum Forest, Calihaven, Moldova",
                            City = "North Suzanne",
                            DateOfBirth = new DateTime(2023, 8, 16, 11, 46, 9, 486, DateTimeKind.Local).AddTicks(1925),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Arjun",
                            FullName = "Arjun Casper",
                            Gender = false,
                            LastName = "Casper",
                            Phone = "(585) 594-0677 x59598",
                            Student_code = "StudentHpNBv08L"
                        },
                        new
                        {
                            Id = 37,
                            Address = "838 Hilll Plaza, West Jessicaside, Peru",
                            City = "Port Marian",
                            DateOfBirth = new DateTime(2023, 6, 4, 9, 15, 36, 935, DateTimeKind.Local).AddTicks(9886),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Raphael",
                            FullName = "Raphael West",
                            Gender = false,
                            LastName = "West",
                            Phone = "614.481.0964",
                            Student_code = "StudentrwFzvBgO"
                        },
                        new
                        {
                            Id = 39,
                            Address = "75005 Nader Bypass, Hammeschester, Cook Islands",
                            City = "North Camryn",
                            DateOfBirth = new DateTime(2023, 3, 26, 19, 23, 28, 76, DateTimeKind.Local).AddTicks(9701),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Eunice",
                            FullName = "Eunice Upton",
                            Gender = false,
                            LastName = "Upton",
                            Phone = "1-736-846-4237 x93061",
                            Student_code = "StudentuaXfVMQG"
                        },
                        new
                        {
                            Id = 41,
                            Address = "49782 Brain Keys, Schulistport, Argentina",
                            City = "West Jaylenport",
                            DateOfBirth = new DateTime(2023, 6, 12, 13, 22, 54, 517, DateTimeKind.Local).AddTicks(7856),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Agnes",
                            FullName = "Agnes Hegmann",
                            Gender = false,
                            LastName = "Hegmann",
                            Phone = "(708) 826-1993",
                            Student_code = "Studentf68RKayB"
                        },
                        new
                        {
                            Id = 43,
                            Address = "133 Billie Islands, Jeraldfort, Northern Mariana Islands",
                            City = "West Ericachester",
                            DateOfBirth = new DateTime(2023, 2, 2, 18, 50, 0, 469, DateTimeKind.Local).AddTicks(1315),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Domingo",
                            FullName = "Domingo Haley",
                            Gender = true,
                            LastName = "Haley",
                            Phone = "(546) 790-7873",
                            Student_code = "StudentY1Iqma3W"
                        },
                        new
                        {
                            Id = 45,
                            Address = "0613 Chance Island, Elfriedachester, Bahrain",
                            City = "Heathcotemouth",
                            DateOfBirth = new DateTime(2023, 7, 28, 7, 2, 46, 863, DateTimeKind.Local).AddTicks(6267),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Myrtle",
                            FullName = "Myrtle Tremblay",
                            Gender = true,
                            LastName = "Tremblay",
                            Phone = "1-381-604-3022 x445",
                            Student_code = "StudentxTi2XaRm"
                        },
                        new
                        {
                            Id = 47,
                            Address = "608 Reinger Glens, South Rashawnhaven, Bulgaria",
                            City = "Stephenchester",
                            DateOfBirth = new DateTime(2023, 4, 14, 8, 33, 31, 344, DateTimeKind.Local).AddTicks(7394),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Fannie",
                            FullName = "Fannie Mante",
                            Gender = true,
                            LastName = "Mante",
                            Phone = "(288) 406-1013 x1525",
                            Student_code = "StudentTKDZNhKI"
                        },
                        new
                        {
                            Id = 49,
                            Address = "74141 Kulas Shore, Strosintown, Mauritius",
                            City = "Roobstad",
                            DateOfBirth = new DateTime(2023, 3, 16, 14, 14, 11, 664, DateTimeKind.Local).AddTicks(9346),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Russ",
                            FullName = "Russ Erdman",
                            Gender = false,
                            LastName = "Erdman",
                            Phone = "649-346-7951 x284",
                            Student_code = "StudentRtCh3L7Z"
                        },
                        new
                        {
                            Id = 51,
                            Address = "1873 Howell Groves, Marquardtchester, Bouvet Island (Bouvetoya)",
                            City = "Cormierberg",
                            DateOfBirth = new DateTime(2023, 3, 26, 12, 47, 44, 527, DateTimeKind.Local).AddTicks(7545),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Providenci",
                            FullName = "Providenci Rath",
                            Gender = false,
                            LastName = "Rath",
                            Phone = "1-497-476-1794",
                            Student_code = "StudentIzuYk6Xj"
                        },
                        new
                        {
                            Id = 53,
                            Address = "69824 Cecile Keys, South Anissa, Montserrat",
                            City = "Fisherhaven",
                            DateOfBirth = new DateTime(2023, 4, 29, 4, 32, 48, 641, DateTimeKind.Local).AddTicks(1538),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Bertrand",
                            FullName = "Bertrand Shields",
                            Gender = true,
                            LastName = "Shields",
                            Phone = "622-558-0897",
                            Student_code = "Student4B2eESfu"
                        },
                        new
                        {
                            Id = 55,
                            Address = "3083 Langosh Prairie, Guymouth, Cameroon",
                            City = "West Guyport",
                            DateOfBirth = new DateTime(2023, 9, 29, 16, 42, 45, 135, DateTimeKind.Local).AddTicks(2621),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Dandre",
                            FullName = "Dandre Howe",
                            Gender = true,
                            LastName = "Howe",
                            Phone = "526.447.9578 x379",
                            Student_code = "StudentH06izTLU"
                        },
                        new
                        {
                            Id = 57,
                            Address = "2729 Stamm Roads, Jeffreyside, Sri Lanka",
                            City = "Port Berneicestad",
                            DateOfBirth = new DateTime(2023, 6, 12, 5, 25, 22, 561, DateTimeKind.Local).AddTicks(4375),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Percival",
                            FullName = "Percival Kutch",
                            Gender = false,
                            LastName = "Kutch",
                            Phone = "(333) 791-7398",
                            Student_code = "StudentiiVyKbeq"
                        },
                        new
                        {
                            Id = 59,
                            Address = "24038 Krajcik Vista, Uniqueshire, Micronesia",
                            City = "East Jillianborough",
                            DateOfBirth = new DateTime(2023, 6, 22, 10, 39, 0, 293, DateTimeKind.Local).AddTicks(7021),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Ernesto",
                            FullName = "Ernesto Mante",
                            Gender = true,
                            LastName = "Mante",
                            Phone = "994-791-4384 x37393",
                            Student_code = "StudentzORhoUUr"
                        },
                        new
                        {
                            Id = 61,
                            Address = "8251 Stiedemann Views, Port Marcosville, Tanzania",
                            City = "Matildebury",
                            DateOfBirth = new DateTime(2023, 2, 21, 9, 51, 35, 730, DateTimeKind.Local).AddTicks(1033),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Emerson",
                            FullName = "Emerson Koepp",
                            Gender = false,
                            LastName = "Koepp",
                            Phone = "723.948.0217",
                            Student_code = "Student3ME5Ow1k"
                        },
                        new
                        {
                            Id = 63,
                            Address = "387 Lukas Points, Port Lauryshire, Namibia",
                            City = "East Lesley",
                            DateOfBirth = new DateTime(2023, 8, 15, 6, 27, 57, 559, DateTimeKind.Local).AddTicks(375),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Janae",
                            FullName = "Janae Homenick",
                            Gender = true,
                            LastName = "Homenick",
                            Phone = "1-660-286-3148",
                            Student_code = "StudentseSqVZYz"
                        },
                        new
                        {
                            Id = 65,
                            Address = "268 Christop Parkway, Walterstad, Malaysia",
                            City = "North Eveline",
                            DateOfBirth = new DateTime(2023, 5, 26, 19, 59, 20, 663, DateTimeKind.Local).AddTicks(9798),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Izabella",
                            FullName = "Izabella MacGyver",
                            Gender = true,
                            LastName = "MacGyver",
                            Phone = "1-531-229-1035 x51093",
                            Student_code = "StudentNuJIorcj"
                        },
                        new
                        {
                            Id = 67,
                            Address = "6513 Shawn Viaduct, Brownview, Lesotho",
                            City = "North Sandrine",
                            DateOfBirth = new DateTime(2023, 7, 6, 0, 20, 34, 547, DateTimeKind.Local).AddTicks(6349),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Bettie",
                            FullName = "Bettie Fahey",
                            Gender = false,
                            LastName = "Fahey",
                            Phone = "(480) 267-4044",
                            Student_code = "StudentYgC7GDMR"
                        },
                        new
                        {
                            Id = 69,
                            Address = "8998 Keeling Circle, Ludwigshire, Mongolia",
                            City = "Sporerfurt",
                            DateOfBirth = new DateTime(2023, 3, 15, 12, 9, 48, 487, DateTimeKind.Local).AddTicks(9828),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Mitchell",
                            FullName = "Mitchell Gorczany",
                            Gender = false,
                            LastName = "Gorczany",
                            Phone = "(668) 757-3470 x714",
                            Student_code = "StudentR6lDtw13"
                        },
                        new
                        {
                            Id = 71,
                            Address = "952 Langosh Corner, Lake Joannieside, Bangladesh",
                            City = "South Dangelo",
                            DateOfBirth = new DateTime(2023, 8, 30, 17, 43, 45, 888, DateTimeKind.Local).AddTicks(7936),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Krystal",
                            FullName = "Krystal Hermiston",
                            Gender = true,
                            LastName = "Hermiston",
                            Phone = "838.978.7661 x10118",
                            Student_code = "StudentuLhqbJHz"
                        },
                        new
                        {
                            Id = 73,
                            Address = "3587 Fausto Square, Sharonfort, Paraguay",
                            City = "Camrenton",
                            DateOfBirth = new DateTime(2023, 3, 26, 9, 58, 56, 641, DateTimeKind.Local).AddTicks(9492),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Carolanne",
                            FullName = "Carolanne Douglas",
                            Gender = false,
                            LastName = "Douglas",
                            Phone = "725-229-5463 x2594",
                            Student_code = "Student3AjKwqUZ"
                        },
                        new
                        {
                            Id = 75,
                            Address = "61924 Conn Mill, Port Laury, Congo",
                            City = "Camilleview",
                            DateOfBirth = new DateTime(2023, 3, 29, 12, 46, 55, 576, DateTimeKind.Local).AddTicks(1696),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Cali",
                            FullName = "Cali Cassin",
                            Gender = true,
                            LastName = "Cassin",
                            Phone = "877-982-0928",
                            Student_code = "StudentFXqQNZ8o"
                        },
                        new
                        {
                            Id = 77,
                            Address = "646 Reva Crescent, Corbinchester, Lesotho",
                            City = "West Melisa",
                            DateOfBirth = new DateTime(2022, 10, 13, 19, 58, 7, 166, DateTimeKind.Local).AddTicks(266),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Jeffrey",
                            FullName = "Jeffrey Bruen",
                            Gender = true,
                            LastName = "Bruen",
                            Phone = "640-406-8093",
                            Student_code = "StudentpTY8V4ij"
                        },
                        new
                        {
                            Id = 79,
                            Address = "7148 Murphy Mountains, New Jace, Netherlands Antilles",
                            City = "South Mckayla",
                            DateOfBirth = new DateTime(2023, 4, 18, 0, 50, 27, 572, DateTimeKind.Local).AddTicks(4059),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Jillian",
                            FullName = "Jillian Gulgowski",
                            Gender = false,
                            LastName = "Gulgowski",
                            Phone = "(267) 615-0597",
                            Student_code = "Student0UKI8qRH"
                        },
                        new
                        {
                            Id = 81,
                            Address = "9368 Tina Parks, North Antonietta, Thailand",
                            City = "South Osbaldo",
                            DateOfBirth = new DateTime(2023, 2, 1, 19, 48, 56, 729, DateTimeKind.Local).AddTicks(1271),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Rosalinda",
                            FullName = "Rosalinda Cronin",
                            Gender = false,
                            LastName = "Cronin",
                            Phone = "870-924-5574 x315",
                            Student_code = "StudentdK9g7Cr5"
                        },
                        new
                        {
                            Id = 83,
                            Address = "43684 Ella Fords, Torpton, Faroe Islands",
                            City = "New Annette",
                            DateOfBirth = new DateTime(2023, 8, 30, 1, 13, 26, 876, DateTimeKind.Local).AddTicks(7952),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Santina",
                            FullName = "Santina Greenfelder",
                            Gender = false,
                            LastName = "Greenfelder",
                            Phone = "1-436-615-4300 x90543",
                            Student_code = "StudentM5krXl24"
                        },
                        new
                        {
                            Id = 85,
                            Address = "52747 Mueller Mount, Mayershire, Taiwan",
                            City = "Port Syble",
                            DateOfBirth = new DateTime(2023, 4, 17, 2, 48, 45, 956, DateTimeKind.Local).AddTicks(5038),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Aniyah",
                            FullName = "Aniyah Hilll",
                            Gender = false,
                            LastName = "Hilll",
                            Phone = "1-445-542-7426 x4762",
                            Student_code = "StudentGCsPsF3r"
                        },
                        new
                        {
                            Id = 87,
                            Address = "15974 Hillary Island, Bernierburgh, Indonesia",
                            City = "Lake Beverly",
                            DateOfBirth = new DateTime(2022, 11, 23, 10, 19, 32, 549, DateTimeKind.Local).AddTicks(1800),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Quinn",
                            FullName = "Quinn Weissnat",
                            Gender = true,
                            LastName = "Weissnat",
                            Phone = "1-319-683-9436",
                            Student_code = "Students9KEiK7R"
                        },
                        new
                        {
                            Id = 89,
                            Address = "6634 Hintz Trace, West Lacy, Antigua and Barbuda",
                            City = "Ernserville",
                            DateOfBirth = new DateTime(2023, 1, 10, 21, 26, 17, 335, DateTimeKind.Local).AddTicks(9578),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Araceli",
                            FullName = "Araceli Purdy",
                            Gender = false,
                            LastName = "Purdy",
                            Phone = "536-633-2862 x39790",
                            Student_code = "StudentI2SpM05p"
                        },
                        new
                        {
                            Id = 91,
                            Address = "28711 Shayne Place, East Heleneburgh, Guernsey",
                            City = "South Jovanton",
                            DateOfBirth = new DateTime(2023, 6, 10, 20, 47, 3, 680, DateTimeKind.Local).AddTicks(7295),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Peggie",
                            FullName = "Peggie Bailey",
                            Gender = false,
                            LastName = "Bailey",
                            Phone = "907.892.6766 x985",
                            Student_code = "StudentPJYHprBI"
                        },
                        new
                        {
                            Id = 93,
                            Address = "933 Cedrick Greens, North Maxine, Ecuador",
                            City = "Altenwerthburgh",
                            DateOfBirth = new DateTime(2023, 1, 1, 23, 37, 36, 91, DateTimeKind.Local).AddTicks(6270),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Jimmy",
                            FullName = "Jimmy Denesik",
                            Gender = false,
                            LastName = "Denesik",
                            Phone = "861-361-4758 x563",
                            Student_code = "StudentEC17j28x"
                        },
                        new
                        {
                            Id = 95,
                            Address = "01159 Jacey Heights, Lake Ryannside, Bosnia and Herzegovina",
                            City = "South Oran",
                            DateOfBirth = new DateTime(2023, 6, 2, 6, 7, 15, 908, DateTimeKind.Local).AddTicks(8779),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Hassan",
                            FullName = "Hassan Lang",
                            Gender = false,
                            LastName = "Lang",
                            Phone = "827.694.9328 x3453",
                            Student_code = "Studenth0BaSW4y"
                        },
                        new
                        {
                            Id = 97,
                            Address = "92025 Daugherty Springs, West Lola, Malaysia",
                            City = "North Nya",
                            DateOfBirth = new DateTime(2023, 9, 27, 22, 39, 17, 808, DateTimeKind.Local).AddTicks(8730),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Marcelina",
                            FullName = "Marcelina O'Conner",
                            Gender = false,
                            LastName = "O'Conner",
                            Phone = "353.957.9886 x6168",
                            Student_code = "StudentY6G3DsHK"
                        },
                        new
                        {
                            Id = 99,
                            Address = "90671 Casey Mountains, Maggiemouth, Netherlands Antilles",
                            City = "North Arvel",
                            DateOfBirth = new DateTime(2022, 12, 16, 11, 53, 23, 567, DateTimeKind.Local).AddTicks(4400),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Chloe",
                            FullName = "Chloe Kautzer",
                            Gender = true,
                            LastName = "Kautzer",
                            Phone = "1-588-434-8983 x448",
                            Student_code = "StudentbhnrYG3n"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.HasOne("LibraryModels.Notifications", "Notifications")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "NotiId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Notifications");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Navigation("userConn");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userConn");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
