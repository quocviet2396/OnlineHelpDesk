// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "KsE3CyxC",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$.OqZsC7yyyMcZ3vvx5SQjeXHKT3Lc5Q.As4wojoq7IHO.Wvuwxuqa",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "XfSkJIta",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$J6uGzDi9u6pkoDza4dNp/uKG.xm7Qf5fkRsx.BYY5pc0.i0ZUliDC",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "KBfw9669",
                            Email = "user@gmail.com",
                            Password = "$2a$11$xD5wrfjopoV8Lqk1iyCKReBU0QOptw42N6.qtq9ufnwRfWyrX4B6K",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "2964 Kuhlman Circle, Port Jovani, Slovakia (Slovak Republic)",
                            City = "West Asia",
                            DateOfBirth = new DateTime(2023, 6, 1, 2, 28, 23, 175, DateTimeKind.Local).AddTicks(2242),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Nyah",
                            FullName = "Nyah Sawayn",
                            Gender = false,
                            LastName = "Sawayn",
                            Phone = "1-656-638-4947 x175",
                            Student_code = "Studentr5Ujk16h"
                        },
                        new
                        {
                            Id = 3,
                            Address = "530 Schuster Key, West Kobymouth, Puerto Rico",
                            City = "Rickiemouth",
                            DateOfBirth = new DateTime(2023, 3, 27, 11, 45, 17, 546, DateTimeKind.Local).AddTicks(6501),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Antone",
                            FullName = "Antone Lind",
                            Gender = false,
                            LastName = "Lind",
                            Phone = "398.658.2278",
                            Student_code = "StudentQSj3gh71"
                        },
                        new
                        {
                            Id = 5,
                            Address = "7775 Dan Fort, Lake Darion, Grenada",
                            City = "Lake Turnermouth",
                            DateOfBirth = new DateTime(2022, 10, 18, 2, 53, 54, 322, DateTimeKind.Local).AddTicks(4047),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Alda",
                            FullName = "Alda Cruickshank",
                            Gender = false,
                            LastName = "Cruickshank",
                            Phone = "1-305-934-0770 x9322",
                            Student_code = "StudentdP9WbGtY"
                        },
                        new
                        {
                            Id = 7,
                            Address = "61193 Spencer Pass, North Hilma, Maldives",
                            City = "East Tamiatown",
                            DateOfBirth = new DateTime(2023, 6, 7, 17, 35, 20, 21, DateTimeKind.Local).AddTicks(3742),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Kenton",
                            FullName = "Kenton Nikolaus",
                            Gender = false,
                            LastName = "Nikolaus",
                            Phone = "1-643-458-7130",
                            Student_code = "Student023aeKqL"
                        },
                        new
                        {
                            Id = 9,
                            Address = "65580 Royce Rapid, Kochhaven, Liechtenstein",
                            City = "Conroymouth",
                            DateOfBirth = new DateTime(2023, 7, 13, 9, 31, 2, 600, DateTimeKind.Local).AddTicks(4785),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Rickie",
                            FullName = "Rickie Gorczany",
                            Gender = true,
                            LastName = "Gorczany",
                            Phone = "355.985.1646",
                            Student_code = "StudenttsddAifD"
                        },
                        new
                        {
                            Id = 11,
                            Address = "8458 Reichert Ford, Torphyport, South Africa",
                            City = "New Keely",
                            DateOfBirth = new DateTime(2023, 6, 7, 10, 58, 49, 871, DateTimeKind.Local).AddTicks(9516),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Madeline",
                            FullName = "Madeline Erdman",
                            Gender = true,
                            LastName = "Erdman",
                            Phone = "(473) 399-5907 x719",
                            Student_code = "Student0vhpnSVF"
                        },
                        new
                        {
                            Id = 13,
                            Address = "53612 Hackett Track, North Imogeneland, Virgin Islands, U.S.",
                            City = "Othatown",
                            DateOfBirth = new DateTime(2022, 10, 9, 1, 28, 5, 102, DateTimeKind.Local).AddTicks(8938),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Durward",
                            FullName = "Durward Wolff",
                            Gender = false,
                            LastName = "Wolff",
                            Phone = "1-552-832-7524",
                            Student_code = "StudentSc9W2Ts1"
                        },
                        new
                        {
                            Id = 15,
                            Address = "26718 Maia Spring, New Jackborough, Cayman Islands",
                            City = "Considinetown",
                            DateOfBirth = new DateTime(2023, 5, 14, 2, 19, 58, 537, DateTimeKind.Local).AddTicks(2625),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Eliseo",
                            FullName = "Eliseo Lemke",
                            Gender = false,
                            LastName = "Lemke",
                            Phone = "596.393.2644",
                            Student_code = "StudentuKZFP4uI"
                        },
                        new
                        {
                            Id = 17,
                            Address = "5191 Cassin Isle, North Joesphland, Netherlands Antilles",
                            City = "Gayville",
                            DateOfBirth = new DateTime(2022, 12, 10, 18, 56, 36, 206, DateTimeKind.Local).AddTicks(6152),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Leonard",
                            FullName = "Leonard Paucek",
                            Gender = false,
                            LastName = "Paucek",
                            Phone = "884-805-8101 x1017",
                            Student_code = "StudentHeN4x3sU"
                        },
                        new
                        {
                            Id = 19,
                            Address = "939 Schmidt Inlet, Ziemannstad, Sweden",
                            City = "Lake Theodoratown",
                            DateOfBirth = new DateTime(2023, 6, 20, 20, 17, 40, 306, DateTimeKind.Local).AddTicks(8650),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Demarco",
                            FullName = "Demarco Kreiger",
                            Gender = true,
                            LastName = "Kreiger",
                            Phone = "477.235.9254 x48892",
                            Student_code = "StudentnHE5GpsX"
                        },
                        new
                        {
                            Id = 21,
                            Address = "11595 Hand Bypass, New Bernadetteberg, Cote d'Ivoire",
                            City = "Mantemouth",
                            DateOfBirth = new DateTime(2023, 2, 1, 3, 27, 29, 8, DateTimeKind.Local).AddTicks(5354),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Savion",
                            FullName = "Savion Krajcik",
                            Gender = true,
                            LastName = "Krajcik",
                            Phone = "1-346-800-7350",
                            Student_code = "Studentxc8EpLvP"
                        },
                        new
                        {
                            Id = 23,
                            Address = "32338 Hyatt Extension, Lake Reed, Belize",
                            City = "Jessikamouth",
                            DateOfBirth = new DateTime(2023, 8, 31, 8, 52, 21, 902, DateTimeKind.Local).AddTicks(8123),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Daphne",
                            FullName = "Daphne Parisian",
                            Gender = true,
                            LastName = "Parisian",
                            Phone = "1-760-873-2920 x6249",
                            Student_code = "Student0nMPQsTm"
                        },
                        new
                        {
                            Id = 25,
                            Address = "769 Angus Highway, Constanceshire, Serbia",
                            City = "South Logan",
                            DateOfBirth = new DateTime(2023, 9, 23, 6, 54, 36, 317, DateTimeKind.Local).AddTicks(8551),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Bianka",
                            FullName = "Bianka Cassin",
                            Gender = true,
                            LastName = "Cassin",
                            Phone = "(679) 628-1723",
                            Student_code = "StudentEXaQotNq"
                        },
                        new
                        {
                            Id = 27,
                            Address = "143 Else Port, New Madonna, Taiwan",
                            City = "Jaquelineville",
                            DateOfBirth = new DateTime(2023, 1, 23, 17, 34, 36, 730, DateTimeKind.Local).AddTicks(1294),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Lilyan",
                            FullName = "Lilyan Legros",
                            Gender = true,
                            LastName = "Legros",
                            Phone = "1-703-520-6156 x1149",
                            Student_code = "StudentESUCivLS"
                        },
                        new
                        {
                            Id = 29,
                            Address = "71590 Kenny Skyway, Port Gerardberg, Mali",
                            City = "Halvorsonfurt",
                            DateOfBirth = new DateTime(2022, 10, 5, 11, 12, 16, 185, DateTimeKind.Local).AddTicks(7565),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Bret",
                            FullName = "Bret Zboncak",
                            Gender = true,
                            LastName = "Zboncak",
                            Phone = "(941) 283-8142 x00584",
                            Student_code = "StudentiBozq5sK"
                        },
                        new
                        {
                            Id = 31,
                            Address = "1533 Monahan Station, East Jerrodfort, Fiji",
                            City = "Hanebury",
                            DateOfBirth = new DateTime(2023, 3, 28, 17, 39, 48, 36, DateTimeKind.Local).AddTicks(6180),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Tyson",
                            FullName = "Tyson Smitham",
                            Gender = false,
                            LastName = "Smitham",
                            Phone = "(501) 468-5707 x9046",
                            Student_code = "StudentyyCpsUFU"
                        },
                        new
                        {
                            Id = 33,
                            Address = "68054 Ernser Stream, South Alexander, Djibouti",
                            City = "Roweberg",
                            DateOfBirth = new DateTime(2023, 9, 16, 3, 11, 33, 919, DateTimeKind.Local).AddTicks(8617),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Rosario",
                            FullName = "Rosario Reilly",
                            Gender = false,
                            LastName = "Reilly",
                            Phone = "918-985-5138 x8748",
                            Student_code = "Studentao6o0Zdw"
                        },
                        new
                        {
                            Id = 35,
                            Address = "26871 Barrows Stream, Adelinemouth, Australia",
                            City = "Renehaven",
                            DateOfBirth = new DateTime(2023, 7, 28, 13, 18, 55, 347, DateTimeKind.Local).AddTicks(3106),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Giovanni",
                            FullName = "Giovanni Kuhic",
                            Gender = true,
                            LastName = "Kuhic",
                            Phone = "(502) 660-4285",
                            Student_code = "StudentECzCvkFw"
                        },
                        new
                        {
                            Id = 37,
                            Address = "724 Casimer Bridge, Hershelton, Yemen",
                            City = "Harrisburgh",
                            DateOfBirth = new DateTime(2023, 7, 26, 12, 9, 51, 686, DateTimeKind.Local).AddTicks(8761),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Jazmin",
                            FullName = "Jazmin DuBuque",
                            Gender = true,
                            LastName = "DuBuque",
                            Phone = "366.435.7606",
                            Student_code = "Studentyet81UV3"
                        },
                        new
                        {
                            Id = 39,
                            Address = "6232 Hilma Street, East Rosemary, Heard Island and McDonald Islands",
                            City = "South Schuylerberg",
                            DateOfBirth = new DateTime(2023, 5, 13, 23, 46, 21, 717, DateTimeKind.Local).AddTicks(9376),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Halie",
                            FullName = "Halie Reichel",
                            Gender = true,
                            LastName = "Reichel",
                            Phone = "887-997-9953",
                            Student_code = "StudentWlE38AIB"
                        },
                        new
                        {
                            Id = 41,
                            Address = "67723 Ward Dam, New Caseymouth, Cote d'Ivoire",
                            City = "West Enricoland",
                            DateOfBirth = new DateTime(2023, 6, 20, 2, 5, 8, 122, DateTimeKind.Local).AddTicks(6196),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Loren",
                            FullName = "Loren Collier",
                            Gender = true,
                            LastName = "Collier",
                            Phone = "(774) 886-0737",
                            Student_code = "StudentV4PeZuYT"
                        },
                        new
                        {
                            Id = 43,
                            Address = "520 Schiller Shores, Port Marcos, Thailand",
                            City = "Lake Kamronborough",
                            DateOfBirth = new DateTime(2023, 4, 29, 23, 0, 42, 566, DateTimeKind.Local).AddTicks(1764),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Remington",
                            FullName = "Remington Vandervort",
                            Gender = false,
                            LastName = "Vandervort",
                            Phone = "(453) 854-5491 x056",
                            Student_code = "StudentDfyjeyb2"
                        },
                        new
                        {
                            Id = 45,
                            Address = "50086 Kyra Crossing, Port Aniyahbury, Norfolk Island",
                            City = "East Carolyn",
                            DateOfBirth = new DateTime(2023, 2, 16, 20, 5, 38, 296, DateTimeKind.Local).AddTicks(8142),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Erika",
                            FullName = "Erika Rohan",
                            Gender = true,
                            LastName = "Rohan",
                            Phone = "1-956-789-2459 x4217",
                            Student_code = "StudentjKgcfPq6"
                        },
                        new
                        {
                            Id = 47,
                            Address = "419 Conn Isle, O'Keefeland, Uzbekistan",
                            City = "South Daija",
                            DateOfBirth = new DateTime(2022, 12, 20, 12, 6, 20, 14, DateTimeKind.Local).AddTicks(6460),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Raphaelle",
                            FullName = "Raphaelle Strosin",
                            Gender = true,
                            LastName = "Strosin",
                            Phone = "324.330.0665",
                            Student_code = "Studentw2fRoK6H"
                        },
                        new
                        {
                            Id = 49,
                            Address = "459 Hammes Brook, Port Trentonburgh, Guinea-Bissau",
                            City = "Linneaville",
                            DateOfBirth = new DateTime(2023, 3, 6, 19, 21, 18, 432, DateTimeKind.Local).AddTicks(3193),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Jaqueline",
                            FullName = "Jaqueline Funk",
                            Gender = true,
                            LastName = "Funk",
                            Phone = "879.878.3778 x49525",
                            Student_code = "Studentyn2073ek"
                        },
                        new
                        {
                            Id = 51,
                            Address = "289 Kovacek Port, South Kenton, Zambia",
                            City = "Gilbertchester",
                            DateOfBirth = new DateTime(2023, 8, 9, 21, 6, 56, 334, DateTimeKind.Local).AddTicks(3338),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Mariela",
                            FullName = "Mariela Jenkins",
                            Gender = false,
                            LastName = "Jenkins",
                            Phone = "1-272-714-6909 x29349",
                            Student_code = "Studentf8mxPr94"
                        },
                        new
                        {
                            Id = 53,
                            Address = "2979 Gutmann Summit, East Annalise, Nepal",
                            City = "Chelseyside",
                            DateOfBirth = new DateTime(2022, 10, 3, 6, 36, 5, 322, DateTimeKind.Local).AddTicks(1585),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Wilton",
                            FullName = "Wilton Stanton",
                            Gender = true,
                            LastName = "Stanton",
                            Phone = "(924) 391-9182",
                            Student_code = "StudentZm4rzCEO"
                        },
                        new
                        {
                            Id = 55,
                            Address = "420 Grant Flat, Heidiborough, Latvia",
                            City = "Alvafort",
                            DateOfBirth = new DateTime(2023, 6, 14, 5, 22, 6, 494, DateTimeKind.Local).AddTicks(4041),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Cydney",
                            FullName = "Cydney Windler",
                            Gender = false,
                            LastName = "Windler",
                            Phone = "490.840.5498",
                            Student_code = "Student68tW87cA"
                        },
                        new
                        {
                            Id = 57,
                            Address = "8634 Torphy Causeway, Port Libbieview, Trinidad and Tobago",
                            City = "West Meaghan",
                            DateOfBirth = new DateTime(2023, 9, 8, 6, 26, 21, 325, DateTimeKind.Local).AddTicks(7477),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Arnaldo",
                            FullName = "Arnaldo Ziemann",
                            Gender = true,
                            LastName = "Ziemann",
                            Phone = "662-237-7350",
                            Student_code = "StudentkxR0ruEh"
                        },
                        new
                        {
                            Id = 59,
                            Address = "19346 Rempel Freeway, Ashleechester, Tajikistan",
                            City = "West Pamelaburgh",
                            DateOfBirth = new DateTime(2023, 8, 13, 4, 24, 51, 723, DateTimeKind.Local).AddTicks(1086),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Sigmund",
                            FullName = "Sigmund Strosin",
                            Gender = false,
                            LastName = "Strosin",
                            Phone = "1-373-847-9713",
                            Student_code = "Student10jb7Wq1"
                        },
                        new
                        {
                            Id = 61,
                            Address = "097 Emanuel Orchard, Champlinhaven, Cocos (Keeling) Islands",
                            City = "Reinholdland",
                            DateOfBirth = new DateTime(2022, 10, 4, 17, 10, 16, 819, DateTimeKind.Local).AddTicks(4864),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Norwood",
                            FullName = "Norwood Thiel",
                            Gender = true,
                            LastName = "Thiel",
                            Phone = "(723) 704-6914",
                            Student_code = "StudentOZJLAdo1"
                        },
                        new
                        {
                            Id = 63,
                            Address = "168 Howell Square, North Colemanview, Bangladesh",
                            City = "Stephaniemouth",
                            DateOfBirth = new DateTime(2023, 8, 2, 23, 57, 42, 716, DateTimeKind.Local).AddTicks(1732),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Kyla",
                            FullName = "Kyla Bosco",
                            Gender = true,
                            LastName = "Bosco",
                            Phone = "398.561.6625 x0474",
                            Student_code = "Student3cDxQhk7"
                        },
                        new
                        {
                            Id = 65,
                            Address = "510 Paucek Viaduct, Stanton, Singapore",
                            City = "Abdullahfurt",
                            DateOfBirth = new DateTime(2023, 6, 23, 19, 15, 52, 34, DateTimeKind.Local).AddTicks(3259),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Adrianna",
                            FullName = "Adrianna Ferry",
                            Gender = true,
                            LastName = "Ferry",
                            Phone = "688-301-1373",
                            Student_code = "Studenth5Mjp2Mb"
                        },
                        new
                        {
                            Id = 67,
                            Address = "496 Denesik Crossroad, Schneiderport, Saint Pierre and Miquelon",
                            City = "Cartershire",
                            DateOfBirth = new DateTime(2023, 4, 19, 1, 40, 39, 686, DateTimeKind.Local).AddTicks(639),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Hailee",
                            FullName = "Hailee Nader",
                            Gender = false,
                            LastName = "Nader",
                            Phone = "(500) 602-8737 x3388",
                            Student_code = "StudentfSXTxEbG"
                        },
                        new
                        {
                            Id = 69,
                            Address = "7856 Veronica Glens, Larkinhaven, Niue",
                            City = "Lake Lillaborough",
                            DateOfBirth = new DateTime(2023, 9, 8, 6, 36, 24, 288, DateTimeKind.Local).AddTicks(5249),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Marjolaine",
                            FullName = "Marjolaine Marks",
                            Gender = true,
                            LastName = "Marks",
                            Phone = "926-423-7085 x0607",
                            Student_code = "StudentxHY2QCMU"
                        },
                        new
                        {
                            Id = 71,
                            Address = "239 Garland Valleys, New Verona, India",
                            City = "Connellyfurt",
                            DateOfBirth = new DateTime(2023, 1, 15, 17, 19, 56, 245, DateTimeKind.Local).AddTicks(8413),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Lilliana",
                            FullName = "Lilliana Metz",
                            Gender = true,
                            LastName = "Metz",
                            Phone = "(679) 597-3617",
                            Student_code = "Studente7VPJk5F"
                        },
                        new
                        {
                            Id = 73,
                            Address = "54317 Jaeden Brooks, Faheyville, Greenland",
                            City = "Kuvalisstad",
                            DateOfBirth = new DateTime(2023, 3, 24, 0, 29, 33, 542, DateTimeKind.Local).AddTicks(2469),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Alvis",
                            FullName = "Alvis Hills",
                            Gender = true,
                            LastName = "Hills",
                            Phone = "(754) 887-4586 x733",
                            Student_code = "StudentbEJ8fgku"
                        },
                        new
                        {
                            Id = 75,
                            Address = "70886 Baylee Glens, North Delphiaville, Mali",
                            City = "Anastacioborough",
                            DateOfBirth = new DateTime(2022, 11, 3, 4, 48, 18, 568, DateTimeKind.Local).AddTicks(1610),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Clementina",
                            FullName = "Clementina Bashirian",
                            Gender = false,
                            LastName = "Bashirian",
                            Phone = "(407) 600-5893",
                            Student_code = "StudenttAGiRZnT"
                        },
                        new
                        {
                            Id = 77,
                            Address = "1164 Ewell Burgs, North Susantown, Venezuela",
                            City = "Liabury",
                            DateOfBirth = new DateTime(2022, 10, 19, 22, 20, 47, 598, DateTimeKind.Local).AddTicks(8018),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Rhoda",
                            FullName = "Rhoda Kirlin",
                            Gender = false,
                            LastName = "Kirlin",
                            Phone = "414-702-1024 x710",
                            Student_code = "Studentb9AqAezB"
                        },
                        new
                        {
                            Id = 79,
                            Address = "4878 Glennie Fort, South Sylvan, Luxembourg",
                            City = "Rutherfordfort",
                            DateOfBirth = new DateTime(2023, 5, 18, 2, 45, 16, 182, DateTimeKind.Local).AddTicks(7428),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Dangelo",
                            FullName = "Dangelo Shanahan",
                            Gender = false,
                            LastName = "Shanahan",
                            Phone = "(425) 766-9791 x78484",
                            Student_code = "StudentgP7Qfu2P"
                        },
                        new
                        {
                            Id = 81,
                            Address = "920 Santiago Corner, Rauville, Ethiopia",
                            City = "New Abel",
                            DateOfBirth = new DateTime(2023, 6, 9, 11, 59, 19, 286, DateTimeKind.Local).AddTicks(3758),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Suzanne",
                            FullName = "Suzanne Predovic",
                            Gender = true,
                            LastName = "Predovic",
                            Phone = "(317) 768-7764",
                            Student_code = "StudentXMAR8zBt"
                        },
                        new
                        {
                            Id = 83,
                            Address = "6279 Ray Mountains, New Tianna, Bermuda",
                            City = "South D'angelotown",
                            DateOfBirth = new DateTime(2023, 5, 7, 2, 10, 43, 116, DateTimeKind.Local).AddTicks(1382),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Kade",
                            FullName = "Kade Rosenbaum",
                            Gender = false,
                            LastName = "Rosenbaum",
                            Phone = "1-768-500-2780 x9941",
                            Student_code = "StudentA7ebAtjq"
                        },
                        new
                        {
                            Id = 85,
                            Address = "22595 Bode Course, Lake Jasen, Estonia",
                            City = "North Amaraburgh",
                            DateOfBirth = new DateTime(2022, 10, 10, 16, 53, 59, 139, DateTimeKind.Local).AddTicks(3144),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Eulalia",
                            FullName = "Eulalia Lueilwitz",
                            Gender = true,
                            LastName = "Lueilwitz",
                            Phone = "1-366-845-3573",
                            Student_code = "StudenthzkUWTZ5"
                        },
                        new
                        {
                            Id = 87,
                            Address = "2187 Micah Ramp, Kertzmannstad, Montenegro",
                            City = "West Audrey",
                            DateOfBirth = new DateTime(2023, 8, 22, 23, 50, 2, 530, DateTimeKind.Local).AddTicks(1960),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Jorge",
                            FullName = "Jorge Blanda",
                            Gender = true,
                            LastName = "Blanda",
                            Phone = "1-858-835-3349 x055",
                            Student_code = "Student4Gwsd6bY"
                        },
                        new
                        {
                            Id = 89,
                            Address = "890 Callie Corners, Kautzerstad, Paraguay",
                            City = "Thielland",
                            DateOfBirth = new DateTime(2023, 8, 13, 16, 27, 46, 955, DateTimeKind.Local).AddTicks(2417),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Daphney",
                            FullName = "Daphney Graham",
                            Gender = false,
                            LastName = "Graham",
                            Phone = "1-607-999-8293 x26111",
                            Student_code = "StudentHXzEWFqR"
                        },
                        new
                        {
                            Id = 91,
                            Address = "884 Glover Shores, South Hazel, Bahamas",
                            City = "Dennishaven",
                            DateOfBirth = new DateTime(2023, 2, 8, 16, 43, 3, 297, DateTimeKind.Local).AddTicks(9082),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Lucienne",
                            FullName = "Lucienne Kuhlman",
                            Gender = false,
                            LastName = "Kuhlman",
                            Phone = "1-944-678-2835 x7915",
                            Student_code = "StudentuaUDWwBV"
                        },
                        new
                        {
                            Id = 93,
                            Address = "230 Misty Creek, Russelside, Venezuela",
                            City = "West Christa",
                            DateOfBirth = new DateTime(2023, 4, 27, 15, 12, 46, 634, DateTimeKind.Local).AddTicks(7044),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Jordane",
                            FullName = "Jordane Paucek",
                            Gender = false,
                            LastName = "Paucek",
                            Phone = "740-623-4634 x57113",
                            Student_code = "StudentlenqI230"
                        },
                        new
                        {
                            Id = 95,
                            Address = "6418 Franecki Court, Rubenberg, Jersey",
                            City = "Woodrowhaven",
                            DateOfBirth = new DateTime(2023, 4, 28, 22, 1, 57, 492, DateTimeKind.Local).AddTicks(4387),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Jasmin",
                            FullName = "Jasmin Stamm",
                            Gender = false,
                            LastName = "Stamm",
                            Phone = "817-628-3308 x884",
                            Student_code = "Student8GVTQPtv"
                        },
                        new
                        {
                            Id = 97,
                            Address = "629 Cortez Grove, Jaskolskiport, United Arab Emirates",
                            City = "East Amanistad",
                            DateOfBirth = new DateTime(2023, 4, 11, 14, 54, 0, 770, DateTimeKind.Local).AddTicks(9166),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Kylie",
                            FullName = "Kylie Goyette",
                            Gender = true,
                            LastName = "Goyette",
                            Phone = "573.618.3654",
                            Student_code = "StudentovLvgyWL"
                        },
                        new
                        {
                            Id = 99,
                            Address = "07542 Bogan Rest, West Antonietta, Bangladesh",
                            City = "Jeramyview",
                            DateOfBirth = new DateTime(2023, 8, 14, 18, 22, 40, 759, DateTimeKind.Local).AddTicks(607),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Jamar",
                            FullName = "Jamar Schmitt",
                            Gender = false,
                            LastName = "Schmitt",
                            Phone = "1-376-411-3750 x7573",
                            Student_code = "Student6LexJCYb"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
