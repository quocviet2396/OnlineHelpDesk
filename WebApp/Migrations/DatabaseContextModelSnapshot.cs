// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int?>("NewsID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewId");

                    b.HasIndex("NewsID");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("userConnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbNotification");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotiId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotiId")
                        .IsUnique()
                        .HasFilter("[NotiId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserConn");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "hqhYYkZK",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$iSPo/sV6TuEBSC.VO8apBOYp.cxT7hIgHtXt4dYdSBYkHeN8IA5Pi",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "zV3YEkRr",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$SV97t9cQaOme0sYoOGO15eP35TRWPAcK28pgzW0xVDhQ0QpxdXk9.",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "peBz2vLf",
                            Email = "user@gmail.com",
                            Password = "$2a$11$YvbVMkiOyvJAb4YU/rvYeOAgyLngCeBBRKimj0y5P5cf0uGHvylg2",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "376 Solon Point, Hollyberg, Taiwan",
                            City = "Legrosfurt",
                            DateOfBirth = new DateTime(2023, 2, 7, 21, 9, 46, 224, DateTimeKind.Local).AddTicks(4598),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Modesta",
                            FullName = "Modesta Frami",
                            Gender = true,
                            LastName = "Frami",
                            Phone = "463-272-1101 x343",
                            Student_code = "Student8IIdwbhw"
                        },
                        new
                        {
                            Id = 3,
                            Address = "9792 Mohr Common, Emardtown, Netherlands Antilles",
                            City = "Mitchellport",
                            DateOfBirth = new DateTime(2023, 5, 29, 16, 39, 51, 983, DateTimeKind.Local).AddTicks(2899),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Annette",
                            FullName = "Annette Okuneva",
                            Gender = true,
                            LastName = "Okuneva",
                            Phone = "815-809-5836 x184",
                            Student_code = "Student8PoEUj1j"
                        },
                        new
                        {
                            Id = 5,
                            Address = "70210 Muller Stravenue, Aufderharburgh, Sweden",
                            City = "New Carmelborough",
                            DateOfBirth = new DateTime(2023, 3, 20, 12, 47, 15, 470, DateTimeKind.Local).AddTicks(2355),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Katharina",
                            FullName = "Katharina Cummings",
                            Gender = true,
                            LastName = "Cummings",
                            Phone = "1-439-680-6590 x2864",
                            Student_code = "Student9x3UpVxM"
                        },
                        new
                        {
                            Id = 7,
                            Address = "009 Kub Villages, New Heidi, Mexico",
                            City = "Port Margaret",
                            DateOfBirth = new DateTime(2023, 1, 9, 7, 25, 7, 346, DateTimeKind.Local).AddTicks(3217),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Noe",
                            FullName = "Noe Erdman",
                            Gender = false,
                            LastName = "Erdman",
                            Phone = "514.561.0536 x488",
                            Student_code = "StudenttksP30fd"
                        },
                        new
                        {
                            Id = 9,
                            Address = "3701 Greyson Motorway, Donnellyland, Sudan",
                            City = "Lake Ofelia",
                            DateOfBirth = new DateTime(2023, 4, 29, 15, 24, 53, 587, DateTimeKind.Local).AddTicks(8740),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Layla",
                            FullName = "Layla Schmidt",
                            Gender = false,
                            LastName = "Schmidt",
                            Phone = "426.517.6708",
                            Student_code = "StudentlT5Uavop"
                        },
                        new
                        {
                            Id = 11,
                            Address = "2632 Bruen Curve, Lake Shaylee, Monaco",
                            City = "South Einohaven",
                            DateOfBirth = new DateTime(2023, 4, 30, 20, 0, 35, 718, DateTimeKind.Local).AddTicks(9564),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Jaiden",
                            FullName = "Jaiden Waters",
                            Gender = true,
                            LastName = "Waters",
                            Phone = "328.523.4153",
                            Student_code = "StudentVB3nuloY"
                        },
                        new
                        {
                            Id = 13,
                            Address = "839 Kenyatta Cliff, North Shaneland, Israel",
                            City = "Rexstad",
                            DateOfBirth = new DateTime(2022, 11, 9, 13, 47, 25, 661, DateTimeKind.Local).AddTicks(5080),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Eulalia",
                            FullName = "Eulalia Tremblay",
                            Gender = false,
                            LastName = "Tremblay",
                            Phone = "1-496-602-8783 x1458",
                            Student_code = "StudentJkjSdPj6"
                        },
                        new
                        {
                            Id = 15,
                            Address = "492 Vivianne Locks, Virgiemouth, Christmas Island",
                            City = "New Vito",
                            DateOfBirth = new DateTime(2023, 6, 17, 3, 12, 11, 708, DateTimeKind.Local).AddTicks(3584),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Johnpaul",
                            FullName = "Johnpaul Mitchell",
                            Gender = false,
                            LastName = "Mitchell",
                            Phone = "989.272.0920",
                            Student_code = "StudentaNw0DZCB"
                        },
                        new
                        {
                            Id = 17,
                            Address = "13110 Mueller Valleys, Port Norwoodtown, Iceland",
                            City = "Port Mauriceton",
                            DateOfBirth = new DateTime(2023, 9, 12, 3, 33, 39, 231, DateTimeKind.Local).AddTicks(9789),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Mylene",
                            FullName = "Mylene Jones",
                            Gender = false,
                            LastName = "Jones",
                            Phone = "(715) 554-1201 x03524",
                            Student_code = "StudentSPDKQG1Q"
                        },
                        new
                        {
                            Id = 19,
                            Address = "6099 Hyatt Loop, East Bridieville, Romania",
                            City = "Aleenland",
                            DateOfBirth = new DateTime(2022, 10, 24, 0, 49, 35, 958, DateTimeKind.Local).AddTicks(7140),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Oscar",
                            FullName = "Oscar Hahn",
                            Gender = false,
                            LastName = "Hahn",
                            Phone = "548.277.9358 x36819",
                            Student_code = "StudentaJqce3VK"
                        },
                        new
                        {
                            Id = 21,
                            Address = "939 Torp Greens, East Ardellaside, United States of America",
                            City = "Maramouth",
                            DateOfBirth = new DateTime(2023, 9, 7, 17, 3, 14, 124, DateTimeKind.Local).AddTicks(8000),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Nyah",
                            FullName = "Nyah Torphy",
                            Gender = true,
                            LastName = "Torphy",
                            Phone = "(590) 592-4146 x2538",
                            Student_code = "StudentEXYPGkQu"
                        },
                        new
                        {
                            Id = 23,
                            Address = "838 Bahringer Route, West Dallasview, Malta",
                            City = "South Angela",
                            DateOfBirth = new DateTime(2023, 1, 6, 7, 49, 55, 924, DateTimeKind.Local).AddTicks(8897),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Armand",
                            FullName = "Armand Wunsch",
                            Gender = false,
                            LastName = "Wunsch",
                            Phone = "461-689-7638 x179",
                            Student_code = "StudentYmxges6W"
                        },
                        new
                        {
                            Id = 25,
                            Address = "3691 Nikolaus Fort, Hamillside, Isle of Man",
                            City = "Violaton",
                            DateOfBirth = new DateTime(2023, 7, 8, 17, 24, 58, 488, DateTimeKind.Local).AddTicks(2769),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Lois",
                            FullName = "Lois Kassulke",
                            Gender = true,
                            LastName = "Kassulke",
                            Phone = "586-709-7926 x752",
                            Student_code = "Student5QzbGgj5"
                        },
                        new
                        {
                            Id = 27,
                            Address = "701 Gorczany Freeway, Dimitriview, Burkina Faso",
                            City = "Aronfort",
                            DateOfBirth = new DateTime(2023, 3, 27, 19, 46, 41, 751, DateTimeKind.Local).AddTicks(8223),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Adele",
                            FullName = "Adele Emard",
                            Gender = false,
                            LastName = "Emard",
                            Phone = "295.950.8314",
                            Student_code = "StudentTvOmgPFS"
                        },
                        new
                        {
                            Id = 29,
                            Address = "07130 Jerde Motorway, East Lyda, Vanuatu",
                            City = "Lake Marta",
                            DateOfBirth = new DateTime(2023, 1, 17, 5, 34, 1, 87, DateTimeKind.Local).AddTicks(5841),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Margarette",
                            FullName = "Margarette Padberg",
                            Gender = true,
                            LastName = "Padberg",
                            Phone = "(537) 383-9892",
                            Student_code = "StudentfxKASh22"
                        },
                        new
                        {
                            Id = 31,
                            Address = "7444 Madison Meadow, Ottiliemouth, Saint Vincent and the Grenadines",
                            City = "Bergnaumburgh",
                            DateOfBirth = new DateTime(2023, 7, 14, 17, 0, 6, 122, DateTimeKind.Local).AddTicks(5251),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Imogene",
                            FullName = "Imogene Keeling",
                            Gender = true,
                            LastName = "Keeling",
                            Phone = "398.437.8677 x10653",
                            Student_code = "StudentTewVmytb"
                        },
                        new
                        {
                            Id = 33,
                            Address = "3682 Jennifer Key, North Arianeberg, Papua New Guinea",
                            City = "Port Angelo",
                            DateOfBirth = new DateTime(2023, 5, 20, 1, 9, 50, 39, DateTimeKind.Local).AddTicks(7886),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Kaylie",
                            FullName = "Kaylie Parker",
                            Gender = true,
                            LastName = "Parker",
                            Phone = "343.561.4655",
                            Student_code = "StudentvL43SDPM"
                        },
                        new
                        {
                            Id = 35,
                            Address = "021 Osinski Inlet, Mosciskiborough, El Salvador",
                            City = "Gislasonhaven",
                            DateOfBirth = new DateTime(2022, 12, 5, 8, 11, 13, 600, DateTimeKind.Local).AddTicks(4568),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Eric",
                            FullName = "Eric Kozey",
                            Gender = false,
                            LastName = "Kozey",
                            Phone = "1-646-460-4724",
                            Student_code = "StudentV05xAqfh"
                        },
                        new
                        {
                            Id = 37,
                            Address = "653 Stoltenberg Ridges, Karianemouth, Zambia",
                            City = "South Hobartburgh",
                            DateOfBirth = new DateTime(2022, 11, 15, 0, 14, 27, 557, DateTimeKind.Local).AddTicks(8365),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Aubrey",
                            FullName = "Aubrey Quitzon",
                            Gender = true,
                            LastName = "Quitzon",
                            Phone = "246-788-7221 x5337",
                            Student_code = "Student08tRAhEC"
                        },
                        new
                        {
                            Id = 39,
                            Address = "499 Delpha Hollow, New Ophelia, American Samoa",
                            City = "Generalton",
                            DateOfBirth = new DateTime(2023, 4, 27, 22, 22, 53, 10, DateTimeKind.Local).AddTicks(5609),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Estella",
                            FullName = "Estella Lehner",
                            Gender = true,
                            LastName = "Lehner",
                            Phone = "271-439-2405",
                            Student_code = "StudentsqPOyGfh"
                        },
                        new
                        {
                            Id = 41,
                            Address = "2628 Reymundo Extension, Beattyfurt, United States of America",
                            City = "Tillmanchester",
                            DateOfBirth = new DateTime(2023, 4, 27, 13, 4, 31, 451, DateTimeKind.Local).AddTicks(3260),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Tiara",
                            FullName = "Tiara Dickens",
                            Gender = true,
                            LastName = "Dickens",
                            Phone = "1-526-220-6786",
                            Student_code = "Studentsuluql1f"
                        },
                        new
                        {
                            Id = 43,
                            Address = "876 Tyree Motorway, Klingland, Kazakhstan",
                            City = "Joannyhaven",
                            DateOfBirth = new DateTime(2023, 4, 5, 18, 8, 24, 966, DateTimeKind.Local).AddTicks(8814),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Baron",
                            FullName = "Baron Bogisich",
                            Gender = false,
                            LastName = "Bogisich",
                            Phone = "741-801-4745 x6860",
                            Student_code = "Student2pbnQ4gD"
                        },
                        new
                        {
                            Id = 45,
                            Address = "9682 Hoyt Mount, East Glennieburgh, Mali",
                            City = "South Ulices",
                            DateOfBirth = new DateTime(2023, 3, 20, 17, 4, 4, 366, DateTimeKind.Local).AddTicks(2717),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Marianne",
                            FullName = "Marianne Collins",
                            Gender = false,
                            LastName = "Collins",
                            Phone = "211.923.4175",
                            Student_code = "StudentpARVIRtF"
                        },
                        new
                        {
                            Id = 47,
                            Address = "2209 Arturo Creek, Cassinville, Liberia",
                            City = "Tracebury",
                            DateOfBirth = new DateTime(2023, 1, 9, 7, 49, 36, 751, DateTimeKind.Local).AddTicks(6893),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Kareem",
                            FullName = "Kareem Collins",
                            Gender = false,
                            LastName = "Collins",
                            Phone = "1-500-473-6430",
                            Student_code = "StudentEql0tnww"
                        },
                        new
                        {
                            Id = 49,
                            Address = "6050 Will Streets, East Jaunitahaven, Heard Island and McDonald Islands",
                            City = "Quintenville",
                            DateOfBirth = new DateTime(2023, 6, 14, 7, 23, 39, 849, DateTimeKind.Local).AddTicks(5175),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Coy",
                            FullName = "Coy Miller",
                            Gender = true,
                            LastName = "Miller",
                            Phone = "253.609.9847",
                            Student_code = "StudentB6ihdq3v"
                        },
                        new
                        {
                            Id = 51,
                            Address = "0616 Ebony Harbors, South Amelia, Ghana",
                            City = "East Stefaniechester",
                            DateOfBirth = new DateTime(2022, 10, 25, 16, 59, 4, 88, DateTimeKind.Local).AddTicks(2104),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Shanelle",
                            FullName = "Shanelle Goldner",
                            Gender = false,
                            LastName = "Goldner",
                            Phone = "453-902-2938",
                            Student_code = "StudenttrCxexwF"
                        },
                        new
                        {
                            Id = 53,
                            Address = "6565 Rath Highway, North Eldred, Botswana",
                            City = "Xanderbury",
                            DateOfBirth = new DateTime(2023, 3, 16, 0, 24, 49, 443, DateTimeKind.Local).AddTicks(5380),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Savannah",
                            FullName = "Savannah Hilpert",
                            Gender = false,
                            LastName = "Hilpert",
                            Phone = "1-315-688-1924 x080",
                            Student_code = "Studentig0RuMV3"
                        },
                        new
                        {
                            Id = 55,
                            Address = "4869 Ziemann Gateway, North Emory, Guinea-Bissau",
                            City = "Moenstad",
                            DateOfBirth = new DateTime(2022, 10, 25, 23, 40, 1, 619, DateTimeKind.Local).AddTicks(8284),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Llewellyn",
                            FullName = "Llewellyn Schinner",
                            Gender = false,
                            LastName = "Schinner",
                            Phone = "413-491-0738 x868",
                            Student_code = "StudentV5MikbNw"
                        },
                        new
                        {
                            Id = 57,
                            Address = "596 Rosendo Forge, Cummerataland, Niue",
                            City = "Vitoview",
                            DateOfBirth = new DateTime(2023, 4, 4, 7, 24, 23, 34, DateTimeKind.Local).AddTicks(6285),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Kadin",
                            FullName = "Kadin Lemke",
                            Gender = false,
                            LastName = "Lemke",
                            Phone = "1-628-763-2670 x333",
                            Student_code = "StudentqkBHQISt"
                        },
                        new
                        {
                            Id = 59,
                            Address = "322 Johns Mews, Port Dejaburgh, Singapore",
                            City = "Donatoland",
                            DateOfBirth = new DateTime(2023, 4, 5, 9, 39, 55, 425, DateTimeKind.Local).AddTicks(4633),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Sonia",
                            FullName = "Sonia Dooley",
                            Gender = false,
                            LastName = "Dooley",
                            Phone = "1-252-687-1162",
                            Student_code = "Student4Wp2LbXw"
                        },
                        new
                        {
                            Id = 61,
                            Address = "609 Kuvalis Extension, West Mervin, Russian Federation",
                            City = "Leeport",
                            DateOfBirth = new DateTime(2023, 9, 4, 23, 9, 23, 688, DateTimeKind.Local).AddTicks(5576),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Elyse",
                            FullName = "Elyse Cassin",
                            Gender = true,
                            LastName = "Cassin",
                            Phone = "997-480-1477 x49020",
                            Student_code = "StudentAElUqmoA"
                        },
                        new
                        {
                            Id = 63,
                            Address = "792 Abshire Hills, New Prudenceberg, Cocos (Keeling) Islands",
                            City = "Katelynnhaven",
                            DateOfBirth = new DateTime(2023, 2, 26, 2, 1, 26, 256, DateTimeKind.Local).AddTicks(5860),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Leola",
                            FullName = "Leola Swift",
                            Gender = false,
                            LastName = "Swift",
                            Phone = "1-945-776-1468 x752",
                            Student_code = "StudentZi3XivVN"
                        },
                        new
                        {
                            Id = 65,
                            Address = "810 McClure Street, Ibrahimhaven, Lao People's Democratic Republic",
                            City = "Dickensstad",
                            DateOfBirth = new DateTime(2023, 2, 10, 13, 57, 28, 291, DateTimeKind.Local).AddTicks(502),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Bryana",
                            FullName = "Bryana Gutmann",
                            Gender = false,
                            LastName = "Gutmann",
                            Phone = "(427) 582-4478 x927",
                            Student_code = "StudentNSwxNAHY"
                        },
                        new
                        {
                            Id = 67,
                            Address = "6423 Reynolds Stream, MacGyverview, Vanuatu",
                            City = "Port Macyfurt",
                            DateOfBirth = new DateTime(2023, 5, 21, 19, 19, 58, 302, DateTimeKind.Local).AddTicks(752),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Grady",
                            FullName = "Grady Gleason",
                            Gender = true,
                            LastName = "Gleason",
                            Phone = "760-643-8578",
                            Student_code = "Studentg0ZTHVrp"
                        },
                        new
                        {
                            Id = 69,
                            Address = "0108 Rick Freeway, East Thurman, Tokelau",
                            City = "New Rowena",
                            DateOfBirth = new DateTime(2022, 10, 21, 1, 41, 30, 254, DateTimeKind.Local).AddTicks(8974),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Stanton",
                            FullName = "Stanton Renner",
                            Gender = false,
                            LastName = "Renner",
                            Phone = "283.283.9832 x41384",
                            Student_code = "Student7FkYj6S9"
                        },
                        new
                        {
                            Id = 71,
                            Address = "22393 Jenkins Shore, North Jaden, Gambia",
                            City = "North Scarlettton",
                            DateOfBirth = new DateTime(2023, 7, 21, 19, 14, 33, 762, DateTimeKind.Local).AddTicks(5593),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Buck",
                            FullName = "Buck Jacobs",
                            Gender = true,
                            LastName = "Jacobs",
                            Phone = "(676) 861-9047 x66572",
                            Student_code = "StudentJmXpDO1f"
                        },
                        new
                        {
                            Id = 73,
                            Address = "238 Luettgen Gateway, West Gabrielville, Thailand",
                            City = "Port Luis",
                            DateOfBirth = new DateTime(2022, 10, 14, 5, 56, 16, 943, DateTimeKind.Local).AddTicks(2601),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Mireille",
                            FullName = "Mireille Durgan",
                            Gender = true,
                            LastName = "Durgan",
                            Phone = "(464) 206-7695 x302",
                            Student_code = "StudentxFi31aDU"
                        },
                        new
                        {
                            Id = 75,
                            Address = "723 Aryanna Expressway, Hermannport, Antigua and Barbuda",
                            City = "Johnsonland",
                            DateOfBirth = new DateTime(2023, 2, 22, 10, 38, 25, 137, DateTimeKind.Local).AddTicks(1412),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Elody",
                            FullName = "Elody Kautzer",
                            Gender = true,
                            LastName = "Kautzer",
                            Phone = "1-545-651-7717 x278",
                            Student_code = "StudentvJze4L3V"
                        },
                        new
                        {
                            Id = 77,
                            Address = "890 Casper Estate, Salmatown, Tunisia",
                            City = "Port Emmaleeside",
                            DateOfBirth = new DateTime(2022, 12, 19, 22, 35, 45, 597, DateTimeKind.Local).AddTicks(5569),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Adonis",
                            FullName = "Adonis DuBuque",
                            Gender = false,
                            LastName = "DuBuque",
                            Phone = "383.700.8550 x27096",
                            Student_code = "Student86vAPC15"
                        },
                        new
                        {
                            Id = 79,
                            Address = "64154 Ziemann Place, North Alexys, Libyan Arab Jamahiriya",
                            City = "Gusikowskiberg",
                            DateOfBirth = new DateTime(2023, 6, 2, 8, 50, 18, 138, DateTimeKind.Local).AddTicks(6794),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Marjorie",
                            FullName = "Marjorie Skiles",
                            Gender = true,
                            LastName = "Skiles",
                            Phone = "771.225.4020",
                            Student_code = "StudentgnDuF57u"
                        },
                        new
                        {
                            Id = 81,
                            Address = "86929 Shayna Mall, Lake Alf, Macedonia",
                            City = "Lake Boydtown",
                            DateOfBirth = new DateTime(2022, 12, 27, 1, 32, 8, 171, DateTimeKind.Local).AddTicks(9854),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Mireya",
                            FullName = "Mireya Thiel",
                            Gender = false,
                            LastName = "Thiel",
                            Phone = "792.963.2899",
                            Student_code = "StudentyVJuIahd"
                        },
                        new
                        {
                            Id = 83,
                            Address = "267 Tillman Keys, Port Fritzmouth, Georgia",
                            City = "Port Cory",
                            DateOfBirth = new DateTime(2023, 10, 4, 1, 48, 20, 371, DateTimeKind.Local).AddTicks(1746),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Gregorio",
                            FullName = "Gregorio Terry",
                            Gender = false,
                            LastName = "Terry",
                            Phone = "1-462-906-1315 x33616",
                            Student_code = "StudentY7njEQzO"
                        },
                        new
                        {
                            Id = 85,
                            Address = "054 Lowe Shore, South Teresa, Thailand",
                            City = "West Lora",
                            DateOfBirth = new DateTime(2023, 2, 12, 10, 38, 48, 247, DateTimeKind.Local).AddTicks(745),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Kameron",
                            FullName = "Kameron Moen",
                            Gender = false,
                            LastName = "Moen",
                            Phone = "544-516-2602 x8292",
                            Student_code = "StudentbWsM4Au6"
                        },
                        new
                        {
                            Id = 87,
                            Address = "4365 Leannon Springs, East Yvette, Guernsey",
                            City = "East Macey",
                            DateOfBirth = new DateTime(2023, 8, 17, 1, 24, 15, 242, DateTimeKind.Local).AddTicks(3722),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Hassan",
                            FullName = "Hassan Stracke",
                            Gender = false,
                            LastName = "Stracke",
                            Phone = "477.802.9142 x21743",
                            Student_code = "Student1EeveqoW"
                        },
                        new
                        {
                            Id = 89,
                            Address = "139 Schamberger Turnpike, Lake Ansleyland, Tonga",
                            City = "Haroldland",
                            DateOfBirth = new DateTime(2022, 10, 30, 0, 43, 31, 17, DateTimeKind.Local).AddTicks(9863),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Everett",
                            FullName = "Everett Dicki",
                            Gender = false,
                            LastName = "Dicki",
                            Phone = "740.842.4217 x14212",
                            Student_code = "StudentLZ1N9mQc"
                        },
                        new
                        {
                            Id = 91,
                            Address = "688 Freda Turnpike, Bruenstad, Cuba",
                            City = "New Muriel",
                            DateOfBirth = new DateTime(2023, 6, 22, 11, 42, 33, 445, DateTimeKind.Local).AddTicks(9724),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Jaylon",
                            FullName = "Jaylon Borer",
                            Gender = false,
                            LastName = "Borer",
                            Phone = "(603) 523-0236 x74946",
                            Student_code = "StudentBaz2lQna"
                        },
                        new
                        {
                            Id = 93,
                            Address = "2900 Jones Street, Lake Dee, Uruguay",
                            City = "Abdultown",
                            DateOfBirth = new DateTime(2023, 3, 6, 6, 26, 47, 687, DateTimeKind.Local).AddTicks(1184),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Juvenal",
                            FullName = "Juvenal Koss",
                            Gender = true,
                            LastName = "Koss",
                            Phone = "1-750-787-7497 x3126",
                            Student_code = "StudentyatBQklu"
                        },
                        new
                        {
                            Id = 95,
                            Address = "809 Marlene Street, South Skylarborough, Tokelau",
                            City = "Lucieshire",
                            DateOfBirth = new DateTime(2022, 10, 31, 0, 35, 15, 62, DateTimeKind.Local).AddTicks(4513),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Brook",
                            FullName = "Brook Von",
                            Gender = false,
                            LastName = "Von",
                            Phone = "(209) 528-5786 x22126",
                            Student_code = "StudentzODP1ses"
                        },
                        new
                        {
                            Id = 97,
                            Address = "99944 Conn Island, Volkmanside, Holy See (Vatican City State)",
                            City = "Roxaneton",
                            DateOfBirth = new DateTime(2023, 4, 17, 15, 23, 0, 734, DateTimeKind.Local).AddTicks(494),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Jazmyn",
                            FullName = "Jazmyn Hegmann",
                            Gender = true,
                            LastName = "Hegmann",
                            Phone = "811-722-1399 x851",
                            Student_code = "StudentwrnQKe8c"
                        },
                        new
                        {
                            Id = 99,
                            Address = "01354 Bogan Street, Ryanport, Zambia",
                            City = "Port Carole",
                            DateOfBirth = new DateTime(2023, 9, 12, 4, 37, 5, 325, DateTimeKind.Local).AddTicks(5345),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Isaiah",
                            FullName = "Isaiah Cassin",
                            Gender = false,
                            LastName = "Cassin",
                            Phone = "(717) 770-9399",
                            Student_code = "StudentrTQ6wMXx"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comment", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany()
                        .HasForeignKey("NewId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.News", null)
                        .WithMany("Comments")
                        .HasForeignKey("NewsID");

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.HasOne("LibraryModels.Notifications", "Notifications")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "NotiId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Notifications");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Navigation("userConn");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userConn");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
