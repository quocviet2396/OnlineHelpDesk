// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230929160230_project")]
    partial class project
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Ee8NzHgp",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$UR.eYlk.SjFNA3v5Yre0EOjZl/re9hatl1MgsNIdPnzTlfbbA3nmK",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "msAhoshF",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$G/bvWREEVLjJr3ud0VfZ6uZ5Fad6SDXXOBr2ZucmHYl3cqP3wqkUm",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "fmiZVyls",
                            Email = "user@gmail.com",
                            Password = "$2a$11$qrQA3GZKTJ6ubJqN4/ocY.cyakMBUSU1otiY5R6.Otc23IAAwFr4W",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "611 Bayer Pike, Magnusshire, Bulgaria",
                            City = "Betsystad",
                            DateOfBirth = new DateTime(2022, 11, 26, 19, 59, 30, 223, DateTimeKind.Local).AddTicks(8144),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Delphia",
                            FullName = "Delphia Beier",
                            Gender = true,
                            LastName = "Beier",
                            Phone = "773-301-7584 x475",
                            Student_code = "StudentL5wY7TvH"
                        },
                        new
                        {
                            Id = 3,
                            Address = "289 King Flats, Mooreview, Jersey",
                            City = "New Noel",
                            DateOfBirth = new DateTime(2023, 9, 19, 20, 21, 59, 864, DateTimeKind.Local).AddTicks(8719),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Verda",
                            FullName = "Verda Considine",
                            Gender = true,
                            LastName = "Considine",
                            Phone = "792.591.7927 x969",
                            Student_code = "StudentIc33ysM7"
                        },
                        new
                        {
                            Id = 5,
                            Address = "1918 Taurean Path, Fayeberg, Solomon Islands",
                            City = "Napoleonfurt",
                            DateOfBirth = new DateTime(2023, 2, 24, 20, 39, 20, 493, DateTimeKind.Local).AddTicks(1583),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Providenci",
                            FullName = "Providenci Lindgren",
                            Gender = true,
                            LastName = "Lindgren",
                            Phone = "(250) 244-2168 x197",
                            Student_code = "Student2rq7zSSF"
                        },
                        new
                        {
                            Id = 7,
                            Address = "243 Calista Vista, Rowehaven, Isle of Man",
                            City = "Rogertown",
                            DateOfBirth = new DateTime(2022, 11, 21, 15, 53, 6, 508, DateTimeKind.Local).AddTicks(4716),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Rebeka",
                            FullName = "Rebeka Turner",
                            Gender = true,
                            LastName = "Turner",
                            Phone = "(458) 631-8202 x9164",
                            Student_code = "Student20biFZ3C"
                        },
                        new
                        {
                            Id = 9,
                            Address = "71332 Lonie Roads, Spinkabury, Virgin Islands, British",
                            City = "East Andrewchester",
                            DateOfBirth = new DateTime(2023, 9, 6, 14, 3, 0, 328, DateTimeKind.Local).AddTicks(8675),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Evie",
                            FullName = "Evie Emmerich",
                            Gender = false,
                            LastName = "Emmerich",
                            Phone = "1-730-296-5268 x497",
                            Student_code = "Studentxyqe9Il6"
                        },
                        new
                        {
                            Id = 11,
                            Address = "15847 Bertrand Village, Metzstad, Kyrgyz Republic",
                            City = "Port Davionfurt",
                            DateOfBirth = new DateTime(2022, 10, 16, 20, 35, 25, 981, DateTimeKind.Local).AddTicks(3342),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Seamus",
                            FullName = "Seamus Torp",
                            Gender = true,
                            LastName = "Torp",
                            Phone = "(707) 758-3418 x07142",
                            Student_code = "StudentlsqdKKFp"
                        },
                        new
                        {
                            Id = 13,
                            Address = "47624 Kylie Overpass, Johnsberg, Tanzania",
                            City = "West Letitia",
                            DateOfBirth = new DateTime(2023, 8, 19, 0, 7, 58, 92, DateTimeKind.Local).AddTicks(9941),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Sabina",
                            FullName = "Sabina Treutel",
                            Gender = false,
                            LastName = "Treutel",
                            Phone = "1-613-823-7010 x944",
                            Student_code = "StudentQ2pu5MDt"
                        },
                        new
                        {
                            Id = 15,
                            Address = "5308 Gottlieb Haven, New Nicholausfurt, Malta",
                            City = "Gunnarburgh",
                            DateOfBirth = new DateTime(2023, 3, 17, 3, 19, 32, 239, DateTimeKind.Local).AddTicks(4648),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Dawson",
                            FullName = "Dawson Haley",
                            Gender = true,
                            LastName = "Haley",
                            Phone = "465-367-8014",
                            Student_code = "StudentEGmI4RCi"
                        },
                        new
                        {
                            Id = 17,
                            Address = "17087 Kristy Vista, Keeblerton, Cote d'Ivoire",
                            City = "Keaganhaven",
                            DateOfBirth = new DateTime(2022, 11, 30, 14, 52, 51, 621, DateTimeKind.Local).AddTicks(8212),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Ferne",
                            FullName = "Ferne Murphy",
                            Gender = false,
                            LastName = "Murphy",
                            Phone = "460.262.6862 x8328",
                            Student_code = "StudentqM2yttJs"
                        },
                        new
                        {
                            Id = 19,
                            Address = "530 Jarod Mission, Kielhaven, Tanzania",
                            City = "Jarenbury",
                            DateOfBirth = new DateTime(2023, 9, 24, 1, 8, 28, 715, DateTimeKind.Local).AddTicks(4619),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Tania",
                            FullName = "Tania Russel",
                            Gender = true,
                            LastName = "Russel",
                            Phone = "1-441-689-4558 x58473",
                            Student_code = "Studento1lvvnFl"
                        },
                        new
                        {
                            Id = 21,
                            Address = "42640 Gerda Court, South Hilma, Virgin Islands, British",
                            City = "Port Eladioland",
                            DateOfBirth = new DateTime(2023, 9, 5, 4, 7, 58, 146, DateTimeKind.Local).AddTicks(8310),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Andre",
                            FullName = "Andre Kilback",
                            Gender = false,
                            LastName = "Kilback",
                            Phone = "(816) 574-7735 x8488",
                            Student_code = "Student6ZCDiouu"
                        },
                        new
                        {
                            Id = 23,
                            Address = "609 Kilback Highway, East Lisette, Lebanon",
                            City = "Breitenbergmouth",
                            DateOfBirth = new DateTime(2023, 1, 12, 22, 28, 54, 352, DateTimeKind.Local).AddTicks(4953),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Lorenz",
                            FullName = "Lorenz Beier",
                            Gender = true,
                            LastName = "Beier",
                            Phone = "(889) 919-0705 x07733",
                            Student_code = "StudentmmsCjiEH"
                        },
                        new
                        {
                            Id = 25,
                            Address = "8524 Ferry Drive, East Dereckborough, Saudi Arabia",
                            City = "East Rahsaan",
                            DateOfBirth = new DateTime(2023, 4, 6, 12, 10, 23, 915, DateTimeKind.Local).AddTicks(9777),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Susana",
                            FullName = "Susana Walsh",
                            Gender = true,
                            LastName = "Walsh",
                            Phone = "(642) 871-0748 x7569",
                            Student_code = "Student1ABe8cmL"
                        },
                        new
                        {
                            Id = 27,
                            Address = "55444 Elwin Motorway, Gleichnerside, Jersey",
                            City = "South Anselhaven",
                            DateOfBirth = new DateTime(2023, 9, 7, 6, 11, 10, 179, DateTimeKind.Local).AddTicks(9181),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Nolan",
                            FullName = "Nolan Kunde",
                            Gender = false,
                            LastName = "Kunde",
                            Phone = "(327) 406-6894 x993",
                            Student_code = "StudentW0Ur38lI"
                        },
                        new
                        {
                            Id = 29,
                            Address = "939 Douglas Junction, South Euna, Lao People's Democratic Republic",
                            City = "West Fatimaburgh",
                            DateOfBirth = new DateTime(2023, 2, 17, 6, 33, 15, 8, DateTimeKind.Local).AddTicks(5189),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Pinkie",
                            FullName = "Pinkie Zemlak",
                            Gender = false,
                            LastName = "Zemlak",
                            Phone = "796-761-7649",
                            Student_code = "StudentDOcKNE20"
                        },
                        new
                        {
                            Id = 31,
                            Address = "404 Kessler Spring, Paucekburgh, Albania",
                            City = "Biankaview",
                            DateOfBirth = new DateTime(2023, 7, 14, 5, 48, 33, 291, DateTimeKind.Local).AddTicks(6491),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Alice",
                            FullName = "Alice Ritchie",
                            Gender = true,
                            LastName = "Ritchie",
                            Phone = "987.530.4589 x474",
                            Student_code = "StudentdrHLyvbv"
                        },
                        new
                        {
                            Id = 33,
                            Address = "232 Terry Mission, Ludieland, Marshall Islands",
                            City = "West Freddiemouth",
                            DateOfBirth = new DateTime(2023, 2, 8, 1, 40, 8, 122, DateTimeKind.Local).AddTicks(1285),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Carolina",
                            FullName = "Carolina Botsford",
                            Gender = false,
                            LastName = "Botsford",
                            Phone = "1-591-726-1609 x73087",
                            Student_code = "StudentxKosgpUU"
                        },
                        new
                        {
                            Id = 35,
                            Address = "79046 McDermott Stravenue, West Dorris, Equatorial Guinea",
                            City = "Casimirbury",
                            DateOfBirth = new DateTime(2023, 2, 13, 1, 24, 20, 627, DateTimeKind.Local).AddTicks(3090),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Josephine",
                            FullName = "Josephine Wisozk",
                            Gender = true,
                            LastName = "Wisozk",
                            Phone = "(245) 277-9918",
                            Student_code = "Studentc1RSOzHB"
                        },
                        new
                        {
                            Id = 37,
                            Address = "3012 Imelda Forest, New Andersonstad, Djibouti",
                            City = "East Noemiport",
                            DateOfBirth = new DateTime(2023, 7, 23, 20, 24, 42, 544, DateTimeKind.Local).AddTicks(4660),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Casimer",
                            FullName = "Casimer Donnelly",
                            Gender = false,
                            LastName = "Donnelly",
                            Phone = "1-685-542-7252 x51972",
                            Student_code = "StudentXrwhv33O"
                        },
                        new
                        {
                            Id = 39,
                            Address = "64222 Lowe Mountains, Maximillianside, Azerbaijan",
                            City = "Sengermouth",
                            DateOfBirth = new DateTime(2023, 9, 2, 21, 0, 32, 220, DateTimeKind.Local).AddTicks(9039),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Viva",
                            FullName = "Viva Harvey",
                            Gender = true,
                            LastName = "Harvey",
                            Phone = "224.231.0088 x4793",
                            Student_code = "Studentglx9yORw"
                        },
                        new
                        {
                            Id = 41,
                            Address = "4785 Frederic Plaza, Marksbury, Tokelau",
                            City = "Hilllhaven",
                            DateOfBirth = new DateTime(2023, 8, 26, 22, 22, 32, 944, DateTimeKind.Local).AddTicks(3608),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Juwan",
                            FullName = "Juwan Rogahn",
                            Gender = false,
                            LastName = "Rogahn",
                            Phone = "874.426.5755 x26628",
                            Student_code = "Student4lW3kZ31"
                        },
                        new
                        {
                            Id = 43,
                            Address = "39067 Parker Station, Clovismouth, Cook Islands",
                            City = "Napoleonland",
                            DateOfBirth = new DateTime(2022, 12, 12, 16, 39, 1, 465, DateTimeKind.Local).AddTicks(5423),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Dora",
                            FullName = "Dora Lindgren",
                            Gender = false,
                            LastName = "Lindgren",
                            Phone = "1-997-671-3739",
                            Student_code = "StudentukgTDV5U"
                        },
                        new
                        {
                            Id = 45,
                            Address = "3593 Dawson Views, Port Myrl, South Africa",
                            City = "North Randallmouth",
                            DateOfBirth = new DateTime(2023, 4, 4, 15, 57, 53, 142, DateTimeKind.Local).AddTicks(4361),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Westley",
                            FullName = "Westley Schroeder",
                            Gender = false,
                            LastName = "Schroeder",
                            Phone = "(819) 415-9001",
                            Student_code = "StudentIlO5Cawo"
                        },
                        new
                        {
                            Id = 47,
                            Address = "1169 Wiegand Forges, East Shane, United States Minor Outlying Islands",
                            City = "Syblemouth",
                            DateOfBirth = new DateTime(2022, 11, 3, 17, 49, 47, 127, DateTimeKind.Local).AddTicks(4217),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Mariane",
                            FullName = "Mariane Blanda",
                            Gender = true,
                            LastName = "Blanda",
                            Phone = "465.720.2454",
                            Student_code = "StudenthUoecrfJ"
                        },
                        new
                        {
                            Id = 49,
                            Address = "6598 Schmeler Points, West Tedton, Tanzania",
                            City = "New Raulstad",
                            DateOfBirth = new DateTime(2023, 5, 10, 19, 23, 15, 9, DateTimeKind.Local).AddTicks(7442),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Ibrahim",
                            FullName = "Ibrahim Kiehn",
                            Gender = false,
                            LastName = "Kiehn",
                            Phone = "300.830.3979 x004",
                            Student_code = "StudentM4roq9ZV"
                        },
                        new
                        {
                            Id = 51,
                            Address = "49565 Jany Street, Herzogmouth, Brunei Darussalam",
                            City = "Blancheville",
                            DateOfBirth = new DateTime(2022, 10, 16, 4, 54, 20, 658, DateTimeKind.Local).AddTicks(9517),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Pedro",
                            FullName = "Pedro Abernathy",
                            Gender = true,
                            LastName = "Abernathy",
                            Phone = "1-919-837-3432 x07965",
                            Student_code = "StudentVvdDcPvl"
                        },
                        new
                        {
                            Id = 53,
                            Address = "041 Favian Run, North Darianport, Iceland",
                            City = "Lake Queenfurt",
                            DateOfBirth = new DateTime(2023, 5, 27, 12, 54, 6, 917, DateTimeKind.Local).AddTicks(6728),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Guido",
                            FullName = "Guido Satterfield",
                            Gender = true,
                            LastName = "Satterfield",
                            Phone = "871-815-7447",
                            Student_code = "Student9zvAGI5l"
                        },
                        new
                        {
                            Id = 55,
                            Address = "4351 Pacocha Plaza, Port Kaseyview, Brazil",
                            City = "North Kyla",
                            DateOfBirth = new DateTime(2023, 8, 7, 18, 18, 23, 477, DateTimeKind.Local).AddTicks(2175),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "May",
                            FullName = "May Heaney",
                            Gender = true,
                            LastName = "Heaney",
                            Phone = "401.605.7375",
                            Student_code = "StudentqJiCJdXf"
                        },
                        new
                        {
                            Id = 57,
                            Address = "25341 Dejah Loaf, South Reyborough, Ireland",
                            City = "East Geoland",
                            DateOfBirth = new DateTime(2023, 2, 11, 4, 38, 17, 924, DateTimeKind.Local).AddTicks(5406),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Saul",
                            FullName = "Saul Friesen",
                            Gender = true,
                            LastName = "Friesen",
                            Phone = "988-413-6060",
                            Student_code = "Studentx13fYNLK"
                        },
                        new
                        {
                            Id = 59,
                            Address = "45153 Cassin Pines, Port Wilfordborough, Spain",
                            City = "Cummerataside",
                            DateOfBirth = new DateTime(2023, 1, 29, 23, 30, 44, 929, DateTimeKind.Local).AddTicks(6081),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Faye",
                            FullName = "Faye Goldner",
                            Gender = false,
                            LastName = "Goldner",
                            Phone = "(241) 215-0266",
                            Student_code = "StudentB5iQEvTO"
                        },
                        new
                        {
                            Id = 61,
                            Address = "04413 Dewitt Summit, Keltonfort, Denmark",
                            City = "Soledadbury",
                            DateOfBirth = new DateTime(2022, 11, 4, 3, 49, 46, 435, DateTimeKind.Local).AddTicks(6679),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Theo",
                            FullName = "Theo Adams",
                            Gender = true,
                            LastName = "Adams",
                            Phone = "627.438.3996 x021",
                            Student_code = "StudentBJbp08Ne"
                        },
                        new
                        {
                            Id = 63,
                            Address = "60519 Morissette Bypass, North Maude, Guadeloupe",
                            City = "Clayport",
                            DateOfBirth = new DateTime(2023, 6, 15, 13, 18, 18, 79, DateTimeKind.Local).AddTicks(8245),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Filomena",
                            FullName = "Filomena Koch",
                            Gender = false,
                            LastName = "Koch",
                            Phone = "337.763.1445 x872",
                            Student_code = "StudentlJ7fQ3Nu"
                        },
                        new
                        {
                            Id = 65,
                            Address = "289 Osinski Islands, North Hildegard, Canada",
                            City = "Brodyberg",
                            DateOfBirth = new DateTime(2023, 7, 11, 21, 46, 42, 91, DateTimeKind.Local).AddTicks(133),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Germaine",
                            FullName = "Germaine Mills",
                            Gender = false,
                            LastName = "Mills",
                            Phone = "435.742.4403",
                            Student_code = "StudentwztVhwlF"
                        },
                        new
                        {
                            Id = 67,
                            Address = "7130 Rowan Springs, Orieland, Sao Tome and Principe",
                            City = "West Waylon",
                            DateOfBirth = new DateTime(2023, 2, 11, 6, 1, 30, 16, DateTimeKind.Local).AddTicks(7534),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Jonathan",
                            FullName = "Jonathan Maggio",
                            Gender = true,
                            LastName = "Maggio",
                            Phone = "1-319-341-9572 x147",
                            Student_code = "StudentrLiOGHAU"
                        },
                        new
                        {
                            Id = 69,
                            Address = "78238 Katelynn Plain, East Alanland, Cook Islands",
                            City = "West Derrickmouth",
                            DateOfBirth = new DateTime(2022, 10, 27, 3, 54, 48, 261, DateTimeKind.Local).AddTicks(3258),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Issac",
                            FullName = "Issac Dach",
                            Gender = false,
                            LastName = "Dach",
                            Phone = "(587) 553-2930 x7129",
                            Student_code = "StudentYXP5WCjD"
                        },
                        new
                        {
                            Id = 71,
                            Address = "098 Runolfsdottir Hills, Grimesburgh, Iran",
                            City = "Lake Eliezer",
                            DateOfBirth = new DateTime(2022, 10, 11, 17, 57, 14, 7, DateTimeKind.Local).AddTicks(260),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Kirsten",
                            FullName = "Kirsten Jast",
                            Gender = false,
                            LastName = "Jast",
                            Phone = "908.545.0593 x690",
                            Student_code = "Student24CwzyAR"
                        },
                        new
                        {
                            Id = 73,
                            Address = "9951 Wilhelm Ridges, Port Reuben, Moldova",
                            City = "Croninstad",
                            DateOfBirth = new DateTime(2023, 8, 2, 11, 22, 11, 410, DateTimeKind.Local).AddTicks(2844),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Camille",
                            FullName = "Camille Hilll",
                            Gender = false,
                            LastName = "Hilll",
                            Phone = "1-427-692-3556 x32810",
                            Student_code = "StudentpPyg68bI"
                        },
                        new
                        {
                            Id = 75,
                            Address = "3446 Jaquan Valley, Franzton, Central African Republic",
                            City = "Bergnaumview",
                            DateOfBirth = new DateTime(2023, 8, 18, 7, 10, 56, 669, DateTimeKind.Local).AddTicks(5575),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Freddie",
                            FullName = "Freddie Renner",
                            Gender = false,
                            LastName = "Renner",
                            Phone = "582.939.0470",
                            Student_code = "StudentE7RigY6B"
                        },
                        new
                        {
                            Id = 77,
                            Address = "712 Braun Ways, MacGyverside, French Polynesia",
                            City = "Langborough",
                            DateOfBirth = new DateTime(2023, 1, 26, 13, 16, 18, 674, DateTimeKind.Local).AddTicks(3264),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Kenyatta",
                            FullName = "Kenyatta Heidenreich",
                            Gender = false,
                            LastName = "Heidenreich",
                            Phone = "(246) 983-9674 x28282",
                            Student_code = "StudentQllw5k99"
                        },
                        new
                        {
                            Id = 79,
                            Address = "1346 Kub Club, Port Jaunita, Bulgaria",
                            City = "Mauricioside",
                            DateOfBirth = new DateTime(2023, 8, 20, 15, 27, 36, 988, DateTimeKind.Local).AddTicks(2960),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Keyshawn",
                            FullName = "Keyshawn Collier",
                            Gender = true,
                            LastName = "Collier",
                            Phone = "(590) 848-7715 x027",
                            Student_code = "Studentwl6Ei2iO"
                        },
                        new
                        {
                            Id = 81,
                            Address = "8368 Swift Mount, Moisesbury, Denmark",
                            City = "West Raleigh",
                            DateOfBirth = new DateTime(2023, 6, 11, 12, 25, 2, 258, DateTimeKind.Local).AddTicks(727),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Kira",
                            FullName = "Kira Paucek",
                            Gender = true,
                            LastName = "Paucek",
                            Phone = "554.253.5411",
                            Student_code = "StudentiOU4hHP3"
                        },
                        new
                        {
                            Id = 83,
                            Address = "0644 Ruth Square, O'Harahaven, Armenia",
                            City = "Myrnahaven",
                            DateOfBirth = new DateTime(2022, 11, 2, 15, 11, 21, 337, DateTimeKind.Local).AddTicks(1662),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Adriel",
                            FullName = "Adriel Kutch",
                            Gender = true,
                            LastName = "Kutch",
                            Phone = "395.449.2198 x305",
                            Student_code = "Student06u1IVJG"
                        },
                        new
                        {
                            Id = 85,
                            Address = "3640 Houston Lock, Eldredton, Antarctica (the territory South of 60 deg S)",
                            City = "Danielport",
                            DateOfBirth = new DateTime(2023, 3, 14, 8, 52, 30, 488, DateTimeKind.Local).AddTicks(6828),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Monique",
                            FullName = "Monique Lesch",
                            Gender = true,
                            LastName = "Lesch",
                            Phone = "277.743.6909",
                            Student_code = "Studentwo0bWEc3"
                        },
                        new
                        {
                            Id = 87,
                            Address = "921 Destany Port, Port Jabariberg, Norway",
                            City = "Vadaside",
                            DateOfBirth = new DateTime(2023, 4, 25, 4, 59, 52, 800, DateTimeKind.Local).AddTicks(7815),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Berenice",
                            FullName = "Berenice Jacobi",
                            Gender = true,
                            LastName = "Jacobi",
                            Phone = "986.979.3690 x42444",
                            Student_code = "Studentvo7kh7j3"
                        },
                        new
                        {
                            Id = 89,
                            Address = "8039 Mable Square, South Elenamouth, Romania",
                            City = "East Judson",
                            DateOfBirth = new DateTime(2023, 9, 10, 22, 35, 21, 213, DateTimeKind.Local).AddTicks(497),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Sofia",
                            FullName = "Sofia Feil",
                            Gender = true,
                            LastName = "Feil",
                            Phone = "(639) 857-4054 x6296",
                            Student_code = "Student7fg3l60u"
                        },
                        new
                        {
                            Id = 91,
                            Address = "90731 Schulist Corner, East Deshawnburgh, Hong Kong",
                            City = "Lake Reva",
                            DateOfBirth = new DateTime(2022, 12, 3, 21, 13, 5, 19, DateTimeKind.Local).AddTicks(5639),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Miles",
                            FullName = "Miles Wyman",
                            Gender = true,
                            LastName = "Wyman",
                            Phone = "1-870-365-7934",
                            Student_code = "StudentIOpzIneK"
                        },
                        new
                        {
                            Id = 93,
                            Address = "042 Pagac Flats, O'Keefeton, Argentina",
                            City = "Zellaland",
                            DateOfBirth = new DateTime(2023, 6, 29, 17, 29, 0, 693, DateTimeKind.Local).AddTicks(5892),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Eleonore",
                            FullName = "Eleonore Bechtelar",
                            Gender = false,
                            LastName = "Bechtelar",
                            Phone = "1-680-589-7577 x113",
                            Student_code = "StudentZhvdBaNH"
                        },
                        new
                        {
                            Id = 95,
                            Address = "26458 Tressie Heights, Uptonton, Saint Vincent and the Grenadines",
                            City = "North Ezrachester",
                            DateOfBirth = new DateTime(2023, 9, 7, 13, 15, 1, 587, DateTimeKind.Local).AddTicks(1048),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Darian",
                            FullName = "Darian McDermott",
                            Gender = false,
                            LastName = "McDermott",
                            Phone = "806-214-1808 x857",
                            Student_code = "Studentn7I60EUs"
                        },
                        new
                        {
                            Id = 97,
                            Address = "594 Chaya Pike, Dibbertmouth, Saint Helena",
                            City = "Lake Catharine",
                            DateOfBirth = new DateTime(2023, 9, 13, 6, 20, 0, 521, DateTimeKind.Local).AddTicks(9013),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Keely",
                            FullName = "Keely Haag",
                            Gender = false,
                            LastName = "Haag",
                            Phone = "915.819.1523",
                            Student_code = "Student7u5GR70i"
                        },
                        new
                        {
                            Id = 99,
                            Address = "928 Purdy Street, Keelingville, Namibia",
                            City = "Katelinberg",
                            DateOfBirth = new DateTime(2022, 12, 23, 8, 42, 1, 721, DateTimeKind.Local).AddTicks(8737),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Kirsten",
                            FullName = "Kirsten Pollich",
                            Gender = true,
                            LastName = "Pollich",
                            Phone = "214.348.1525 x6884",
                            Student_code = "Studentk5FpGdYQ"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
