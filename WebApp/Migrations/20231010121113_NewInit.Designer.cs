// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231010121113_NewInit")]
    partial class NewInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int?>("NewsID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewId");

                    b.HasIndex("NewsID");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupporterId");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms",
                            SupporterId = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs",
                            SupporterId = 3
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels",
                            SupporterId = 4
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to financial assistance",
                            Name = "Financial Assistance",
                            SupporterId = 5
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen",
                            SupporterId = 6
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium",
                            SupporterId = 7
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre",
                            SupporterId = 8
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library",
                            SupporterId = 9
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs",
                            SupporterId = 10
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.QnA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbQnA");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Areaded")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Decription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCreator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSupporter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Sreaded")
                        .HasColumnType("bit");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("TicketStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Ureaded")
                        .HasColumnType("bit");

                    b.Property<string>("UserNameCreator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameSupporter")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketDTO");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserConn");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailToConfirm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1PwPNgXJ",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$DPJEU57ng7sfBiBN/7/sGumA4Errp5wnXPxP0rBnIyUOSdMDL5DmW",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "iemEFrsl",
                            Email = "classrooms_supporter@gmail.com",
                            Password = "$2a$11$71xIc4g9bgAbxzqG4T9PBOkUjoHr89U9yYHPdXRuzxWQN11ucsewe",
                            Role = "Supporter",
                            Status = true,
                            UserName = "ClassRooms-Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "t8BFL0jY",
                            Email = "labs_supporter@gmail.com",
                            Password = "$2a$11$ryPjBZ5vJ24g38T6uGvoq.dOYCn4YJuIBHQ/H6MfTifQVQ9x6oRI6",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Labs-Supporter"
                        },
                        new
                        {
                            Id = 4,
                            Code = "TXUFdW2e",
                            Email = "hostels_supporter@gmail.com",
                            Password = "$2a$11$Mbp6gQaVODxhwSpY/02zneEZzWCQ0IjEI7.TC9TwPqb/8YDrm3iNW",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Hostels-Supporter"
                        },
                        new
                        {
                            Id = 5,
                            Code = "SaAEytvL",
                            Email = "financial_supporter@gmail.com",
                            Password = "$2a$11$9CSSZPsMvKo456Ee/POFXuBNyYgcf2fmHKQFxFAhBLCng3PS2Io3K",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Financial-Supporter"
                        },
                        new
                        {
                            Id = 6,
                            Code = "mHj2nje0",
                            Email = "canteen_supporter@gmail.com",
                            Password = "$2a$11$w3nt3eloQTDh7qnRf1HHA.RPzH6Xqv5V1YsBzS4bevdu.mbuvmaj2",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Canteen-Supporter"
                        },
                        new
                        {
                            Id = 7,
                            Code = "Lntt1Q9H",
                            Email = "gymnasium_supporter@gmail.com",
                            Password = "$2a$11$kWrhF0a6XxopC.PfXgqSauZTYze8WklVPFOjBhAePS6eHN2WY3uVy",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Gymnasium-Supporter"
                        },
                        new
                        {
                            Id = 8,
                            Code = "7AVTY4aq",
                            Email = "it_supporter@gmail.com",
                            Password = "$2a$11$iKt8CgmJcQzbm7yZT37dnuLrVr3CsiBCZRaaGGYnPiE4q8bZwOT02",
                            Role = "Supporter",
                            Status = true,
                            UserName = "IT-Supporter"
                        },
                        new
                        {
                            Id = 9,
                            Code = "L2k9W0o5",
                            Email = "library_supporter@gmail.com",
                            Password = "$2a$11$PlWjrYbCR5w0F7h/W86fxeSeR2Vkm2fPfnpmgX0HrzvxRUAU8pDHi",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Library-Supporter"
                        },
                        new
                        {
                            Id = 10,
                            Code = "OqhARCoZ",
                            Email = "clubs_supporter@gmail.com",
                            Password = "$2a$11$4hii6VfxZLdI1DcS8ptxDOaZk0fKQr/Ao1TXUY8Q6gvE3fiYaa0Bq",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Clubs-Supporter"
                        },
                        new
                        {
                            Id = 11,
                            Code = "j21Me5uS",
                            Email = "user@gmail.com",
                            Password = "$2a$11$QCpmpEefYOsC6ZFdQorxDeTL8WLAe.X5Wchys6frIM1Dbn8vuymYm",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1795 Johns Lane, Port Elodyfort, Honduras",
                            City = "Allanborough",
                            DateOfBirth = new DateTime(2023, 9, 19, 12, 19, 17, 651, DateTimeKind.Local).AddTicks(6644),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Ashtyn",
                            FullName = "Ashtyn Kub",
                            Gender = true,
                            LastName = "Kub",
                            Phone = "403.982.0565 x6726",
                            Student_code = "StudentiR4JXgAR"
                        },
                        new
                        {
                            Id = 3,
                            Address = "51082 Weimann Groves, Keatonburgh, Afghanistan",
                            City = "Roobhaven",
                            DateOfBirth = new DateTime(2023, 1, 30, 14, 5, 22, 347, DateTimeKind.Local).AddTicks(2923),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Christopher",
                            FullName = "Christopher Oberbrunner",
                            Gender = false,
                            LastName = "Oberbrunner",
                            Phone = "318.808.7112 x746",
                            Student_code = "Student2BV3YKpx"
                        },
                        new
                        {
                            Id = 5,
                            Address = "25117 Erdman Pine, Ziemannfurt, Mexico",
                            City = "Lake Hollishaven",
                            DateOfBirth = new DateTime(2023, 3, 31, 12, 27, 1, 981, DateTimeKind.Local).AddTicks(7080),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Chet",
                            FullName = "Chet Schiller",
                            Gender = false,
                            LastName = "Schiller",
                            Phone = "723-764-9168",
                            Student_code = "Studenth9CF1MTV"
                        },
                        new
                        {
                            Id = 7,
                            Address = "548 Haley Tunnel, Josephineport, Democratic People's Republic of Korea",
                            City = "Anaismouth",
                            DateOfBirth = new DateTime(2022, 11, 28, 11, 16, 43, 304, DateTimeKind.Local).AddTicks(6391),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Osvaldo",
                            FullName = "Osvaldo Lockman",
                            Gender = true,
                            LastName = "Lockman",
                            Phone = "801-927-7392 x29483",
                            Student_code = "Studentijm9AdMe"
                        },
                        new
                        {
                            Id = 9,
                            Address = "1702 Walter Brooks, East Mohamed, Togo",
                            City = "Konopelskihaven",
                            DateOfBirth = new DateTime(2023, 8, 24, 10, 32, 38, 362, DateTimeKind.Local).AddTicks(4350),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Meghan",
                            FullName = "Meghan Hamill",
                            Gender = false,
                            LastName = "Hamill",
                            Phone = "483.474.1329",
                            Student_code = "StudentOIYdfAkC"
                        },
                        new
                        {
                            Id = 11,
                            Address = "34934 Shaina Station, East Archibald, Antarctica (the territory South of 60 deg S)",
                            City = "West Caroline",
                            DateOfBirth = new DateTime(2023, 3, 7, 2, 31, 22, 792, DateTimeKind.Local).AddTicks(5585),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Muhammad",
                            FullName = "Muhammad Mante",
                            Gender = true,
                            LastName = "Mante",
                            Phone = "(868) 377-2637",
                            Student_code = "StudentfjGDNpzF"
                        },
                        new
                        {
                            Id = 13,
                            Address = "1479 Ward Ways, Estherton, New Zealand",
                            City = "Juanitastad",
                            DateOfBirth = new DateTime(2023, 1, 17, 11, 54, 6, 776, DateTimeKind.Local).AddTicks(3704),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Ebba",
                            FullName = "Ebba Hilpert",
                            Gender = true,
                            LastName = "Hilpert",
                            Phone = "949-226-3947 x04536",
                            Student_code = "Student5ZP9RLHc"
                        },
                        new
                        {
                            Id = 15,
                            Address = "81739 Tanner Light, East Linnea, Armenia",
                            City = "Paulinestad",
                            DateOfBirth = new DateTime(2023, 3, 2, 4, 8, 7, 344, DateTimeKind.Local).AddTicks(4537),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Alejandrin",
                            FullName = "Alejandrin Schamberger",
                            Gender = true,
                            LastName = "Schamberger",
                            Phone = "770-244-8102 x903",
                            Student_code = "StudentMghVemsT"
                        },
                        new
                        {
                            Id = 17,
                            Address = "588 Preston Overpass, New Zoietown, Solomon Islands",
                            City = "Auerside",
                            DateOfBirth = new DateTime(2023, 1, 23, 6, 51, 24, 697, DateTimeKind.Local).AddTicks(6053),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Leo",
                            FullName = "Leo Harvey",
                            Gender = false,
                            LastName = "Harvey",
                            Phone = "(662) 302-1863 x8584",
                            Student_code = "StudentNuce3qCq"
                        },
                        new
                        {
                            Id = 19,
                            Address = "668 Jocelyn Orchard, Port Cameron, Cameroon",
                            City = "Susannaport",
                            DateOfBirth = new DateTime(2023, 3, 20, 13, 24, 15, 248, DateTimeKind.Local).AddTicks(8046),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Gina",
                            FullName = "Gina Rosenbaum",
                            Gender = true,
                            LastName = "Rosenbaum",
                            Phone = "216-497-2347 x43540",
                            Student_code = "Student3zYwERKW"
                        },
                        new
                        {
                            Id = 21,
                            Address = "7705 MacGyver Fort, Lake Mustafa, Nauru",
                            City = "Carolyneville",
                            DateOfBirth = new DateTime(2023, 7, 1, 14, 40, 45, 103, DateTimeKind.Local).AddTicks(2563),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Shyann",
                            FullName = "Shyann Carter",
                            Gender = false,
                            LastName = "Carter",
                            Phone = "686.719.5783 x05265",
                            Student_code = "Student4ZmBwlau"
                        },
                        new
                        {
                            Id = 23,
                            Address = "844 Jettie Summit, Lake Jeffrey, Morocco",
                            City = "North Cindyfort",
                            DateOfBirth = new DateTime(2022, 11, 4, 3, 46, 52, 605, DateTimeKind.Local).AddTicks(4321),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Miracle",
                            FullName = "Miracle Goldner",
                            Gender = true,
                            LastName = "Goldner",
                            Phone = "400-384-6024 x9129",
                            Student_code = "StudentRewB0UMS"
                        },
                        new
                        {
                            Id = 25,
                            Address = "544 Harris Ridges, Jaysontown, Heard Island and McDonald Islands",
                            City = "South Eladioville",
                            DateOfBirth = new DateTime(2023, 9, 1, 7, 21, 22, 971, DateTimeKind.Local).AddTicks(9624),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Violette",
                            FullName = "Violette Towne",
                            Gender = true,
                            LastName = "Towne",
                            Phone = "470.276.1372",
                            Student_code = "StudentX9Zju6Oq"
                        },
                        new
                        {
                            Id = 27,
                            Address = "75419 Laury Spur, South Daletown, Guinea",
                            City = "New Addiemouth",
                            DateOfBirth = new DateTime(2023, 2, 14, 17, 45, 55, 377, DateTimeKind.Local).AddTicks(6689),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Keenan",
                            FullName = "Keenan Hintz",
                            Gender = false,
                            LastName = "Hintz",
                            Phone = "1-949-787-3637 x649",
                            Student_code = "StudentmZ3bcpdQ"
                        },
                        new
                        {
                            Id = 29,
                            Address = "5750 Bret Square, Port Louvenia, Vietnam",
                            City = "Krismouth",
                            DateOfBirth = new DateTime(2023, 4, 21, 8, 39, 58, 209, DateTimeKind.Local).AddTicks(1102),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Francisca",
                            FullName = "Francisca Stoltenberg",
                            Gender = true,
                            LastName = "Stoltenberg",
                            Phone = "532.649.8900",
                            Student_code = "StudentiIROrtCn"
                        },
                        new
                        {
                            Id = 31,
                            Address = "76705 Sporer Way, Hartmannshire, Bangladesh",
                            City = "Rogelioside",
                            DateOfBirth = new DateTime(2023, 10, 5, 19, 52, 37, 823, DateTimeKind.Local).AddTicks(5453),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Conner",
                            FullName = "Conner O'Kon",
                            Gender = true,
                            LastName = "O'Kon",
                            Phone = "1-814-496-3746 x806",
                            Student_code = "StudentP8oz5nlm"
                        },
                        new
                        {
                            Id = 33,
                            Address = "17529 Heller Burgs, East Nasirfort, Saint Vincent and the Grenadines",
                            City = "Stiedemannville",
                            DateOfBirth = new DateTime(2023, 1, 7, 16, 55, 20, 410, DateTimeKind.Local).AddTicks(9985),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Dorian",
                            FullName = "Dorian Koelpin",
                            Gender = false,
                            LastName = "Koelpin",
                            Phone = "(346) 544-8584 x145",
                            Student_code = "StudentfukySe4D"
                        },
                        new
                        {
                            Id = 35,
                            Address = "693 McCullough Stravenue, East Sydneyborough, Albania",
                            City = "Leschville",
                            DateOfBirth = new DateTime(2023, 8, 26, 10, 45, 37, 762, DateTimeKind.Local).AddTicks(357),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Marty",
                            FullName = "Marty Zieme",
                            Gender = true,
                            LastName = "Zieme",
                            Phone = "1-434-251-6656",
                            Student_code = "StudentcHX5cyab"
                        },
                        new
                        {
                            Id = 37,
                            Address = "1130 Hammes Square, Gusikowskibury, Belize",
                            City = "Port Addison",
                            DateOfBirth = new DateTime(2023, 10, 4, 16, 53, 30, 363, DateTimeKind.Local).AddTicks(3560),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Katarina",
                            FullName = "Katarina Carter",
                            Gender = false,
                            LastName = "Carter",
                            Phone = "252-500-5925 x968",
                            Student_code = "StudentfKhmuXXo"
                        },
                        new
                        {
                            Id = 39,
                            Address = "37974 Jaskolski Wells, South Feliciaside, Honduras",
                            City = "Gorczanyland",
                            DateOfBirth = new DateTime(2023, 6, 20, 1, 10, 57, 575, DateTimeKind.Local).AddTicks(1058),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Deron",
                            FullName = "Deron Ward",
                            Gender = false,
                            LastName = "Ward",
                            Phone = "835-622-5005",
                            Student_code = "StudentFG35TM9U"
                        },
                        new
                        {
                            Id = 41,
                            Address = "708 Crist Stravenue, New Carliview, Palau",
                            City = "Hackettmouth",
                            DateOfBirth = new DateTime(2023, 6, 11, 7, 5, 50, 352, DateTimeKind.Local).AddTicks(6143),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Teresa",
                            FullName = "Teresa Wyman",
                            Gender = true,
                            LastName = "Wyman",
                            Phone = "1-733-776-6083",
                            Student_code = "Student2DQZVakJ"
                        },
                        new
                        {
                            Id = 43,
                            Address = "292 Otho Burgs, North Brigitte, United Kingdom",
                            City = "Port Agustinamouth",
                            DateOfBirth = new DateTime(2022, 12, 2, 20, 3, 48, 64, DateTimeKind.Local).AddTicks(8136),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Geovanny",
                            FullName = "Geovanny Barton",
                            Gender = true,
                            LastName = "Barton",
                            Phone = "939-604-5527",
                            Student_code = "StudenttQ65rReU"
                        },
                        new
                        {
                            Id = 45,
                            Address = "856 Botsford Glen, Zellashire, El Salvador",
                            City = "New Miracletown",
                            DateOfBirth = new DateTime(2023, 5, 25, 7, 14, 17, 533, DateTimeKind.Local).AddTicks(3604),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Cristobal",
                            FullName = "Cristobal Kling",
                            Gender = true,
                            LastName = "Kling",
                            Phone = "615-551-4395",
                            Student_code = "StudentBghMnZzS"
                        },
                        new
                        {
                            Id = 47,
                            Address = "9788 Freda Skyway, South Lessiebury, Estonia",
                            City = "North Rosellamouth",
                            DateOfBirth = new DateTime(2023, 9, 30, 22, 34, 30, 952, DateTimeKind.Local).AddTicks(9522),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Carolyn",
                            FullName = "Carolyn DuBuque",
                            Gender = true,
                            LastName = "DuBuque",
                            Phone = "666-971-5393",
                            Student_code = "Student6pJoemva"
                        },
                        new
                        {
                            Id = 49,
                            Address = "599 Hardy Parkway, West Jannie, Sao Tome and Principe",
                            City = "West Mathias",
                            DateOfBirth = new DateTime(2023, 6, 19, 7, 24, 56, 29, DateTimeKind.Local).AddTicks(337),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Bridie",
                            FullName = "Bridie Koelpin",
                            Gender = true,
                            LastName = "Koelpin",
                            Phone = "(202) 315-4112 x163",
                            Student_code = "StudentewwmO7Ir"
                        },
                        new
                        {
                            Id = 51,
                            Address = "34132 Misty Walk, North Maximilianmouth, Mongolia",
                            City = "West Toney",
                            DateOfBirth = new DateTime(2022, 11, 14, 7, 43, 46, 592, DateTimeKind.Local).AddTicks(1210),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Pink",
                            FullName = "Pink Boehm",
                            Gender = false,
                            LastName = "Boehm",
                            Phone = "(708) 205-9149 x440",
                            Student_code = "StudentR56ZG8ag"
                        },
                        new
                        {
                            Id = 53,
                            Address = "003 Solon Creek, South Lon, Wallis and Futuna",
                            City = "Lake Jana",
                            DateOfBirth = new DateTime(2023, 2, 16, 21, 55, 12, 999, DateTimeKind.Local).AddTicks(6094),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Lesly",
                            FullName = "Lesly Kilback",
                            Gender = true,
                            LastName = "Kilback",
                            Phone = "305.748.7693 x57640",
                            Student_code = "Student8DjoraO1"
                        },
                        new
                        {
                            Id = 55,
                            Address = "3836 Hollis Stream, Brannonmouth, Cayman Islands",
                            City = "North Haskellburgh",
                            DateOfBirth = new DateTime(2023, 6, 30, 21, 13, 43, 370, DateTimeKind.Local).AddTicks(5074),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Zaria",
                            FullName = "Zaria Zemlak",
                            Gender = true,
                            LastName = "Zemlak",
                            Phone = "1-371-453-0300",
                            Student_code = "StudentAVa4tLTw"
                        },
                        new
                        {
                            Id = 57,
                            Address = "7658 Stoltenberg Street, Keshaunfort, France",
                            City = "South Filomena",
                            DateOfBirth = new DateTime(2023, 1, 6, 16, 33, 9, 28, DateTimeKind.Local).AddTicks(8042),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Rosie",
                            FullName = "Rosie Kunde",
                            Gender = true,
                            LastName = "Kunde",
                            Phone = "(510) 342-5315 x985",
                            Student_code = "StudentCmevxP5L"
                        },
                        new
                        {
                            Id = 59,
                            Address = "65054 Kiehn Ramp, Lake Ellis, Haiti",
                            City = "Kuhnborough",
                            DateOfBirth = new DateTime(2023, 8, 12, 15, 33, 25, 578, DateTimeKind.Local).AddTicks(2828),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Gerry",
                            FullName = "Gerry Nikolaus",
                            Gender = false,
                            LastName = "Nikolaus",
                            Phone = "453-451-6992 x62518",
                            Student_code = "StudentHDi6qgeA"
                        },
                        new
                        {
                            Id = 61,
                            Address = "59706 Connelly River, Caleighmouth, Somalia",
                            City = "New Vince",
                            DateOfBirth = new DateTime(2022, 11, 5, 13, 5, 59, 231, DateTimeKind.Local).AddTicks(8708),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Austen",
                            FullName = "Austen Reynolds",
                            Gender = true,
                            LastName = "Reynolds",
                            Phone = "(265) 328-4723",
                            Student_code = "StudentpzNMWSZ8"
                        },
                        new
                        {
                            Id = 63,
                            Address = "226 Raegan Knoll, West Jaron, Saudi Arabia",
                            City = "Cruickshankberg",
                            DateOfBirth = new DateTime(2023, 8, 26, 6, 59, 35, 711, DateTimeKind.Local).AddTicks(9204),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Nicholas",
                            FullName = "Nicholas Steuber",
                            Gender = true,
                            LastName = "Steuber",
                            Phone = "(968) 758-6869 x8015",
                            Student_code = "Studentad7XWhIT"
                        },
                        new
                        {
                            Id = 65,
                            Address = "4908 Ritchie Forge, Keeblerport, Albania",
                            City = "Liabury",
                            DateOfBirth = new DateTime(2023, 5, 10, 15, 48, 49, 378, DateTimeKind.Local).AddTicks(1132),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Toni",
                            FullName = "Toni O'Hara",
                            Gender = true,
                            LastName = "O'Hara",
                            Phone = "256.635.0522",
                            Student_code = "StudentuWF1E7tg"
                        },
                        new
                        {
                            Id = 67,
                            Address = "6948 McKenzie Land, Lillieborough, Reunion",
                            City = "Sporerfort",
                            DateOfBirth = new DateTime(2023, 2, 15, 8, 10, 39, 240, DateTimeKind.Local).AddTicks(4250),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Daisha",
                            FullName = "Daisha Murray",
                            Gender = true,
                            LastName = "Murray",
                            Phone = "266-275-8040 x397",
                            Student_code = "StudentLBG2dbxw"
                        },
                        new
                        {
                            Id = 69,
                            Address = "73267 Arnold Shoals, Granthaven, Colombia",
                            City = "Framitown",
                            DateOfBirth = new DateTime(2023, 8, 6, 7, 36, 17, 163, DateTimeKind.Local).AddTicks(6517),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Dillan",
                            FullName = "Dillan Cormier",
                            Gender = true,
                            LastName = "Cormier",
                            Phone = "1-979-582-9772 x22732",
                            Student_code = "StudentVUFQ2ohu"
                        },
                        new
                        {
                            Id = 71,
                            Address = "92000 Whitney Isle, North Rashadmouth, Honduras",
                            City = "Judeshire",
                            DateOfBirth = new DateTime(2023, 4, 4, 1, 45, 59, 53, DateTimeKind.Local).AddTicks(6137),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Deangelo",
                            FullName = "Deangelo Swaniawski",
                            Gender = true,
                            LastName = "Swaniawski",
                            Phone = "909.710.6724",
                            Student_code = "Student6rBaDgpn"
                        },
                        new
                        {
                            Id = 73,
                            Address = "96639 Koepp Islands, Lindton, Suriname",
                            City = "North Estella",
                            DateOfBirth = new DateTime(2023, 8, 21, 3, 41, 39, 100, DateTimeKind.Local).AddTicks(2554),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Danielle",
                            FullName = "Danielle Buckridge",
                            Gender = false,
                            LastName = "Buckridge",
                            Phone = "403-925-3328 x932",
                            Student_code = "StudentnFQ5msak"
                        },
                        new
                        {
                            Id = 75,
                            Address = "75333 Morton Estate, Greenholtbury, Jordan",
                            City = "West Camronbury",
                            DateOfBirth = new DateTime(2023, 7, 10, 8, 55, 55, 388, DateTimeKind.Local).AddTicks(1335),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Justine",
                            FullName = "Justine Schaden",
                            Gender = false,
                            LastName = "Schaden",
                            Phone = "(304) 582-6353 x42879",
                            Student_code = "StudentfXbSyafX"
                        },
                        new
                        {
                            Id = 77,
                            Address = "036 Katheryn Pike, Laishaland, Liechtenstein",
                            City = "Schusterhaven",
                            DateOfBirth = new DateTime(2023, 7, 25, 9, 22, 12, 105, DateTimeKind.Local).AddTicks(5444),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Emma",
                            FullName = "Emma Bergnaum",
                            Gender = false,
                            LastName = "Bergnaum",
                            Phone = "(250) 669-0357 x383",
                            Student_code = "StudentiKV259Xf"
                        },
                        new
                        {
                            Id = 79,
                            Address = "455 Nico Squares, New Ronny, Yemen",
                            City = "East Diana",
                            DateOfBirth = new DateTime(2022, 11, 7, 0, 8, 50, 930, DateTimeKind.Local).AddTicks(9978),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Estell",
                            FullName = "Estell Upton",
                            Gender = false,
                            LastName = "Upton",
                            Phone = "804.421.1610",
                            Student_code = "StudentZQu6EpDy"
                        },
                        new
                        {
                            Id = 81,
                            Address = "0828 Farrell Knoll, East Watsonville, Cocos (Keeling) Islands",
                            City = "West Andy",
                            DateOfBirth = new DateTime(2023, 2, 16, 20, 42, 48, 570, DateTimeKind.Local).AddTicks(2217),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Lula",
                            FullName = "Lula Sawayn",
                            Gender = true,
                            LastName = "Sawayn",
                            Phone = "738-707-5200",
                            Student_code = "StudentnzhZUcXC"
                        },
                        new
                        {
                            Id = 83,
                            Address = "330 Richie Coves, Lake Connerborough, Botswana",
                            City = "Janessaview",
                            DateOfBirth = new DateTime(2023, 7, 8, 12, 30, 53, 639, DateTimeKind.Local).AddTicks(6185),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Marco",
                            FullName = "Marco Dietrich",
                            Gender = true,
                            LastName = "Dietrich",
                            Phone = "755-804-7649",
                            Student_code = "StudenteO5B2hbm"
                        },
                        new
                        {
                            Id = 85,
                            Address = "7489 Irwin Port, Lake Lawrence, Saint Kitts and Nevis",
                            City = "North Salma",
                            DateOfBirth = new DateTime(2022, 10, 16, 12, 29, 59, 794, DateTimeKind.Local).AddTicks(693),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Ozella",
                            FullName = "Ozella Shields",
                            Gender = true,
                            LastName = "Shields",
                            Phone = "1-286-696-9718 x0686",
                            Student_code = "StudentQRfW7jVt"
                        },
                        new
                        {
                            Id = 87,
                            Address = "636 Keira Shores, Port Lethaville, Bolivia",
                            City = "Milantown",
                            DateOfBirth = new DateTime(2023, 2, 19, 5, 39, 15, 938, DateTimeKind.Local).AddTicks(3810),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Herman",
                            FullName = "Herman Mayer",
                            Gender = true,
                            LastName = "Mayer",
                            Phone = "(365) 525-3018",
                            Student_code = "StudentrCx57KQ1"
                        },
                        new
                        {
                            Id = 89,
                            Address = "1215 Alessia Drive, East Mellie, Tokelau",
                            City = "Rosettahaven",
                            DateOfBirth = new DateTime(2023, 3, 27, 23, 8, 0, 432, DateTimeKind.Local).AddTicks(5120),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Neha",
                            FullName = "Neha Prohaska",
                            Gender = false,
                            LastName = "Prohaska",
                            Phone = "294.623.0352 x8923",
                            Student_code = "StudentqoYBET0R"
                        },
                        new
                        {
                            Id = 91,
                            Address = "31533 Cleve Glens, East Garnett, Cambodia",
                            City = "East Camrynmouth",
                            DateOfBirth = new DateTime(2023, 9, 6, 3, 10, 18, 225, DateTimeKind.Local).AddTicks(1874),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Emilie",
                            FullName = "Emilie Toy",
                            Gender = false,
                            LastName = "Toy",
                            Phone = "750-621-6023 x452",
                            Student_code = "StudentyquITpnK"
                        },
                        new
                        {
                            Id = 93,
                            Address = "807 Mose Run, Lake Brianafurt, Israel",
                            City = "Edenhaven",
                            DateOfBirth = new DateTime(2023, 3, 27, 10, 28, 40, 674, DateTimeKind.Local).AddTicks(5092),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Marielle",
                            FullName = "Marielle Murazik",
                            Gender = false,
                            LastName = "Murazik",
                            Phone = "(912) 219-4917",
                            Student_code = "StudentVf7CbbiD"
                        },
                        new
                        {
                            Id = 95,
                            Address = "42196 Maci Keys, Schimmelview, Brazil",
                            City = "Kaiamouth",
                            DateOfBirth = new DateTime(2023, 2, 3, 8, 30, 49, 173, DateTimeKind.Local).AddTicks(2912),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Scotty",
                            FullName = "Scotty Feeney",
                            Gender = false,
                            LastName = "Feeney",
                            Phone = "(640) 841-4207 x50707",
                            Student_code = "StudentiS4N5QX2"
                        },
                        new
                        {
                            Id = 97,
                            Address = "7315 Koss Green, Turnerton, Cuba",
                            City = "North Jaiden",
                            DateOfBirth = new DateTime(2022, 12, 1, 14, 37, 55, 511, DateTimeKind.Local).AddTicks(4116),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Jordi",
                            FullName = "Jordi Okuneva",
                            Gender = false,
                            LastName = "Okuneva",
                            Phone = "(832) 807-0023",
                            Student_code = "Studentcg1VPhwS"
                        },
                        new
                        {
                            Id = 99,
                            Address = "4160 Beer Parks, Satterfieldville, Cayman Islands",
                            City = "Lake Fidel",
                            DateOfBirth = new DateTime(2022, 12, 29, 14, 42, 55, 744, DateTimeKind.Local).AddTicks(880),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Alfonso",
                            FullName = "Alfonso Moen",
                            Gender = true,
                            LastName = "Moen",
                            Phone = "(566) 481-4086 x6501",
                            Student_code = "StudentOusXASdj"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comment", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany()
                        .HasForeignKey("NewId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.News", null)
                        .WithMany("Comments")
                        .HasForeignKey("NewsID");

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Supporter");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.HasOne("LibraryModels.Users", "Users")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userConn");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
