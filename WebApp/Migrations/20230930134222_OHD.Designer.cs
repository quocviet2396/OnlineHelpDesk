// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230930134222_OHD")]
    partial class OHD
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "s3mlbpSQ",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$IhXCNdK4451wEoPEy4Byt.a6hfK6kChMYifwX.qA/Gs.sZZXPLgMe",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "cVAxLY3n",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$3McJKSnp/oTpQjp2V5E6n.cDTKxbKCBULOeM2A9pa8BIllhjmPFnW",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "DWMPBbMb",
                            Email = "user@gmail.com",
                            Password = "$2a$11$tBb/S.8hfd5z4wndT4UDv.sPO/xaO/CXcBzpCv74GDDZf0XV4Tzsq",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "90911 Emard Camp, Levifort, Armenia",
                            City = "East Steve",
                            DateOfBirth = new DateTime(2023, 7, 27, 2, 52, 45, 814, DateTimeKind.Local).AddTicks(3365),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Glenda",
                            FullName = "Glenda Rau",
                            Gender = true,
                            LastName = "Rau",
                            Phone = "719.790.0634 x203",
                            Student_code = "Student8JEhqu1V"
                        },
                        new
                        {
                            Id = 3,
                            Address = "37706 Angie Creek, Lake Emanuelview, Finland",
                            City = "Dorafurt",
                            DateOfBirth = new DateTime(2023, 5, 19, 22, 11, 19, 116, DateTimeKind.Local).AddTicks(9237),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Reid",
                            FullName = "Reid Borer",
                            Gender = true,
                            LastName = "Borer",
                            Phone = "583.845.3774 x222",
                            Student_code = "Studentl794cr9n"
                        },
                        new
                        {
                            Id = 5,
                            Address = "91674 Karli Loaf, East Deangeloborough, Bangladesh",
                            City = "Port Pamelaberg",
                            DateOfBirth = new DateTime(2023, 2, 7, 1, 59, 59, 882, DateTimeKind.Local).AddTicks(3652),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Damian",
                            FullName = "Damian Lowe",
                            Gender = false,
                            LastName = "Lowe",
                            Phone = "456.292.3153",
                            Student_code = "Studentv61g4lCW"
                        },
                        new
                        {
                            Id = 7,
                            Address = "94373 Pearline Pine, North Garryborough, Austria",
                            City = "North Gracestad",
                            DateOfBirth = new DateTime(2023, 8, 7, 6, 46, 47, 389, DateTimeKind.Local).AddTicks(3556),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Dariana",
                            FullName = "Dariana Hayes",
                            Gender = true,
                            LastName = "Hayes",
                            Phone = "830-754-0048",
                            Student_code = "StudentMdRuXePn"
                        },
                        new
                        {
                            Id = 9,
                            Address = "463 Beer Union, Sydnifurt, Benin",
                            City = "Schowalterview",
                            DateOfBirth = new DateTime(2023, 4, 20, 2, 30, 22, 24, DateTimeKind.Local).AddTicks(786),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Maudie",
                            FullName = "Maudie Nikolaus",
                            Gender = true,
                            LastName = "Nikolaus",
                            Phone = "1-467-827-5811",
                            Student_code = "StudentHOFb7HSq"
                        },
                        new
                        {
                            Id = 11,
                            Address = "85224 Mayer Meadows, Lebsackborough, Saint Pierre and Miquelon",
                            City = "East Sallyberg",
                            DateOfBirth = new DateTime(2022, 10, 9, 5, 10, 47, 922, DateTimeKind.Local).AddTicks(5886),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Evangeline",
                            FullName = "Evangeline Cormier",
                            Gender = false,
                            LastName = "Cormier",
                            Phone = "1-741-443-0315 x970",
                            Student_code = "Student29OVk4Dl"
                        },
                        new
                        {
                            Id = 13,
                            Address = "19263 Marshall Land, East Freeda, Australia",
                            City = "Arnoldton",
                            DateOfBirth = new DateTime(2022, 10, 12, 10, 18, 33, 386, DateTimeKind.Local).AddTicks(1515),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Olaf",
                            FullName = "Olaf Ferry",
                            Gender = false,
                            LastName = "Ferry",
                            Phone = "398-426-9380 x1407",
                            Student_code = "StudentgGLwizpo"
                        },
                        new
                        {
                            Id = 15,
                            Address = "7339 Antoinette Ridge, Jacinthemouth, Saint Helena",
                            City = "North Johnathan",
                            DateOfBirth = new DateTime(2023, 4, 11, 9, 55, 8, 913, DateTimeKind.Local).AddTicks(5152),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Arvel",
                            FullName = "Arvel Runolfsdottir",
                            Gender = true,
                            LastName = "Runolfsdottir",
                            Phone = "(468) 232-2658",
                            Student_code = "Studenti42XECCw"
                        },
                        new
                        {
                            Id = 17,
                            Address = "294 Kub Causeway, Kemmertown, Estonia",
                            City = "Morarchester",
                            DateOfBirth = new DateTime(2022, 10, 29, 4, 14, 42, 644, DateTimeKind.Local).AddTicks(6306),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Arlo",
                            FullName = "Arlo Reilly",
                            Gender = true,
                            LastName = "Reilly",
                            Phone = "(246) 601-8820 x19640",
                            Student_code = "StudentSiy4yMNc"
                        },
                        new
                        {
                            Id = 19,
                            Address = "6721 Alexander Underpass, Jessiemouth, United States of America",
                            City = "Lake Carmela",
                            DateOfBirth = new DateTime(2023, 2, 18, 23, 48, 19, 412, DateTimeKind.Local).AddTicks(2752),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Mathilde",
                            FullName = "Mathilde Willms",
                            Gender = true,
                            LastName = "Willms",
                            Phone = "847-769-1164 x969",
                            Student_code = "Studentkk6EwIzr"
                        },
                        new
                        {
                            Id = 21,
                            Address = "96196 Laila Corners, West Allen, South Georgia and the South Sandwich Islands",
                            City = "Keelingchester",
                            DateOfBirth = new DateTime(2023, 3, 7, 19, 33, 26, 533, DateTimeKind.Local).AddTicks(1320),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Mariela",
                            FullName = "Mariela Frami",
                            Gender = true,
                            LastName = "Frami",
                            Phone = "734-634-6900 x767",
                            Student_code = "Student6LuZEUNx"
                        },
                        new
                        {
                            Id = 23,
                            Address = "380 Robert Burgs, Myrtisbury, Denmark",
                            City = "South Kenya",
                            DateOfBirth = new DateTime(2023, 4, 4, 11, 12, 42, 271, DateTimeKind.Local).AddTicks(8910),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Mossie",
                            FullName = "Mossie VonRueden",
                            Gender = false,
                            LastName = "VonRueden",
                            Phone = "(926) 897-4867 x5464",
                            Student_code = "StudenteZEL32dX"
                        },
                        new
                        {
                            Id = 25,
                            Address = "70704 Bayer Inlet, Lake Gabrielleview, Ethiopia",
                            City = "Cristville",
                            DateOfBirth = new DateTime(2023, 7, 8, 1, 45, 47, 260, DateTimeKind.Local).AddTicks(286),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Billy",
                            FullName = "Billy Beatty",
                            Gender = false,
                            LastName = "Beatty",
                            Phone = "1-671-203-5867 x0281",
                            Student_code = "StudentruZ4NVI6"
                        },
                        new
                        {
                            Id = 27,
                            Address = "852 Bernard Squares, Electafurt, Lithuania",
                            City = "Zboncakport",
                            DateOfBirth = new DateTime(2022, 10, 27, 23, 24, 0, 553, DateTimeKind.Local).AddTicks(4114),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Christina",
                            FullName = "Christina Hauck",
                            Gender = true,
                            LastName = "Hauck",
                            Phone = "880-899-2033",
                            Student_code = "StudentS2bPjGne"
                        },
                        new
                        {
                            Id = 29,
                            Address = "96362 Thompson Hills, East Danaland, Niue",
                            City = "New Rosalynview",
                            DateOfBirth = new DateTime(2023, 1, 1, 14, 24, 6, 57, DateTimeKind.Local).AddTicks(3150),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Waldo",
                            FullName = "Waldo Sporer",
                            Gender = false,
                            LastName = "Sporer",
                            Phone = "(875) 229-4565 x95019",
                            Student_code = "StudenttdfXgEi1"
                        },
                        new
                        {
                            Id = 31,
                            Address = "483 Cyrus Terrace, Mitchellview, Oman",
                            City = "Lake Sheldon",
                            DateOfBirth = new DateTime(2023, 7, 7, 16, 22, 24, 191, DateTimeKind.Local).AddTicks(5728),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Dillon",
                            FullName = "Dillon Rempel",
                            Gender = false,
                            LastName = "Rempel",
                            Phone = "(994) 616-4449",
                            Student_code = "StudentFtTZCdO9"
                        },
                        new
                        {
                            Id = 33,
                            Address = "028 Bernice Harbor, Port Barbara, Panama",
                            City = "North Alyciaport",
                            DateOfBirth = new DateTime(2023, 7, 19, 18, 28, 59, 152, DateTimeKind.Local).AddTicks(6370),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Gwen",
                            FullName = "Gwen Emmerich",
                            Gender = true,
                            LastName = "Emmerich",
                            Phone = "(303) 534-5493 x1358",
                            Student_code = "StudentGxTbOnim"
                        },
                        new
                        {
                            Id = 35,
                            Address = "339 Dortha Green, Rupertview, Brunei Darussalam",
                            City = "New Ruthe",
                            DateOfBirth = new DateTime(2023, 3, 30, 22, 42, 0, 225, DateTimeKind.Local).AddTicks(2923),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Jena",
                            FullName = "Jena Christiansen",
                            Gender = true,
                            LastName = "Christiansen",
                            Phone = "449.923.5476",
                            Student_code = "Student3WhGr26K"
                        },
                        new
                        {
                            Id = 37,
                            Address = "28867 Wilburn Road, North Joseph, Mauritania",
                            City = "South Hortensechester",
                            DateOfBirth = new DateTime(2023, 7, 22, 18, 49, 19, 289, DateTimeKind.Local).AddTicks(923),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Katelynn",
                            FullName = "Katelynn Wehner",
                            Gender = false,
                            LastName = "Wehner",
                            Phone = "964-575-0063 x62577",
                            Student_code = "Student55qGUrp2"
                        },
                        new
                        {
                            Id = 39,
                            Address = "79016 McLaughlin Station, Friedaton, Christmas Island",
                            City = "Martyport",
                            DateOfBirth = new DateTime(2023, 9, 27, 12, 26, 46, 74, DateTimeKind.Local).AddTicks(8976),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Shaniya",
                            FullName = "Shaniya Wilkinson",
                            Gender = true,
                            LastName = "Wilkinson",
                            Phone = "(521) 988-5196 x3297",
                            Student_code = "StudentaqAuAJdK"
                        },
                        new
                        {
                            Id = 41,
                            Address = "52174 Glover Estate, Port Karley, France",
                            City = "Reyesland",
                            DateOfBirth = new DateTime(2022, 11, 22, 16, 31, 46, 334, DateTimeKind.Local).AddTicks(6882),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Cleta",
                            FullName = "Cleta Barrows",
                            Gender = false,
                            LastName = "Barrows",
                            Phone = "786.731.9784",
                            Student_code = "StudentbzpO6v1t"
                        },
                        new
                        {
                            Id = 43,
                            Address = "928 Edmund Tunnel, Connview, Haiti",
                            City = "East Enolashire",
                            DateOfBirth = new DateTime(2022, 11, 25, 18, 35, 38, 209, DateTimeKind.Local).AddTicks(6910),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Beverly",
                            FullName = "Beverly Dickens",
                            Gender = true,
                            LastName = "Dickens",
                            Phone = "250-260-5357 x3344",
                            Student_code = "Student0B4fC3pe"
                        },
                        new
                        {
                            Id = 45,
                            Address = "187 Donnelly Shore, Port Trudiehaven, Poland",
                            City = "Boylefort",
                            DateOfBirth = new DateTime(2023, 1, 10, 4, 50, 23, 245, DateTimeKind.Local).AddTicks(7695),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Lorna",
                            FullName = "Lorna Denesik",
                            Gender = false,
                            LastName = "Denesik",
                            Phone = "1-861-949-2267 x4180",
                            Student_code = "Studentroce8zbj"
                        },
                        new
                        {
                            Id = 47,
                            Address = "1696 Spencer Hills, East Arafurt, Western Sahara",
                            City = "Aurorechester",
                            DateOfBirth = new DateTime(2023, 4, 7, 20, 44, 58, 40, DateTimeKind.Local).AddTicks(7612),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Devin",
                            FullName = "Devin Koepp",
                            Gender = false,
                            LastName = "Koepp",
                            Phone = "747-817-8638 x96527",
                            Student_code = "StudentTTbiVKeD"
                        },
                        new
                        {
                            Id = 49,
                            Address = "6303 Hodkiewicz Lakes, New Darrinville, Suriname",
                            City = "Lake Emieburgh",
                            DateOfBirth = new DateTime(2023, 1, 17, 20, 35, 40, 509, DateTimeKind.Local).AddTicks(2284),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "River",
                            FullName = "River Hirthe",
                            Gender = true,
                            LastName = "Hirthe",
                            Phone = "(723) 683-2500 x320",
                            Student_code = "StudentnSn8Mk6V"
                        },
                        new
                        {
                            Id = 51,
                            Address = "481 Abshire Pines, Handport, Jersey",
                            City = "West Dennisburgh",
                            DateOfBirth = new DateTime(2023, 4, 29, 4, 50, 35, 182, DateTimeKind.Local).AddTicks(6910),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Billy",
                            FullName = "Billy Brekke",
                            Gender = false,
                            LastName = "Brekke",
                            Phone = "(862) 515-5711 x3465",
                            Student_code = "Students0Q9b0Mc"
                        },
                        new
                        {
                            Id = 53,
                            Address = "1707 Jedidiah Land, Port Heaven, Lithuania",
                            City = "East Samson",
                            DateOfBirth = new DateTime(2023, 1, 25, 18, 29, 3, 413, DateTimeKind.Local).AddTicks(9259),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Corine",
                            FullName = "Corine Ortiz",
                            Gender = true,
                            LastName = "Ortiz",
                            Phone = "(453) 611-7563",
                            Student_code = "StudentpRtyRzWL"
                        },
                        new
                        {
                            Id = 55,
                            Address = "95143 Wilkinson Locks, Emmerichport, Monaco",
                            City = "Lake Antwonville",
                            DateOfBirth = new DateTime(2023, 8, 3, 16, 56, 52, 555, DateTimeKind.Local).AddTicks(8584),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Antwan",
                            FullName = "Antwan Ratke",
                            Gender = true,
                            LastName = "Ratke",
                            Phone = "830.201.0854 x2747",
                            Student_code = "Studentsdzk4mPo"
                        },
                        new
                        {
                            Id = 57,
                            Address = "7293 McGlynn Junctions, Trompfurt, French Guiana",
                            City = "Port Tre",
                            DateOfBirth = new DateTime(2023, 6, 26, 4, 4, 37, 775, DateTimeKind.Local).AddTicks(1155),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Zander",
                            FullName = "Zander Mante",
                            Gender = true,
                            LastName = "Mante",
                            Phone = "343.852.0404",
                            Student_code = "StudentLUAPbior"
                        },
                        new
                        {
                            Id = 59,
                            Address = "250 Immanuel Forks, Champlinmouth, Albania",
                            City = "New Fredrick",
                            DateOfBirth = new DateTime(2023, 4, 12, 13, 40, 17, 460, DateTimeKind.Local).AddTicks(232),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Lester",
                            FullName = "Lester Marquardt",
                            Gender = true,
                            LastName = "Marquardt",
                            Phone = "1-809-849-2778 x939",
                            Student_code = "Studentbis8W4kj"
                        },
                        new
                        {
                            Id = 61,
                            Address = "708 Marcellus Place, East Arielle, Uzbekistan",
                            City = "Hettingerchester",
                            DateOfBirth = new DateTime(2023, 8, 9, 7, 50, 11, 388, DateTimeKind.Local).AddTicks(8750),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Jude",
                            FullName = "Jude Rath",
                            Gender = true,
                            LastName = "Rath",
                            Phone = "1-868-437-1065 x393",
                            Student_code = "StudentkpwHKoNc"
                        },
                        new
                        {
                            Id = 63,
                            Address = "229 Jaime Junction, Clementinastad, Albania",
                            City = "Katelyntown",
                            DateOfBirth = new DateTime(2023, 9, 6, 21, 30, 54, 180, DateTimeKind.Local).AddTicks(4416),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Edwina",
                            FullName = "Edwina Champlin",
                            Gender = false,
                            LastName = "Champlin",
                            Phone = "(631) 271-0808 x420",
                            Student_code = "StudentepW9pUvi"
                        },
                        new
                        {
                            Id = 65,
                            Address = "0075 Roberta Trail, Hansenchester, Burkina Faso",
                            City = "Port Elizaland",
                            DateOfBirth = new DateTime(2023, 8, 12, 22, 3, 17, 188, DateTimeKind.Local).AddTicks(4624),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Alba",
                            FullName = "Alba Ferry",
                            Gender = true,
                            LastName = "Ferry",
                            Phone = "596-876-5947",
                            Student_code = "StudentuLucAW9F"
                        },
                        new
                        {
                            Id = 67,
                            Address = "1310 Newell Greens, East Micheal, Saint Lucia",
                            City = "Cristside",
                            DateOfBirth = new DateTime(2022, 11, 26, 9, 29, 55, 110, DateTimeKind.Local).AddTicks(4062),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Paige",
                            FullName = "Paige Barton",
                            Gender = false,
                            LastName = "Barton",
                            Phone = "1-612-941-4839",
                            Student_code = "StudentYCvUZ1wJ"
                        },
                        new
                        {
                            Id = 69,
                            Address = "8906 Afton Mountains, West Jarrod, Lesotho",
                            City = "North Lulu",
                            DateOfBirth = new DateTime(2022, 10, 19, 20, 13, 24, 796, DateTimeKind.Local).AddTicks(4192),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Jazmyne",
                            FullName = "Jazmyne Champlin",
                            Gender = false,
                            LastName = "Champlin",
                            Phone = "643.311.2070 x552",
                            Student_code = "StudentPp3IkxWm"
                        },
                        new
                        {
                            Id = 71,
                            Address = "58807 Schiller Highway, North Jesusberg, China",
                            City = "Lake Chaddmouth",
                            DateOfBirth = new DateTime(2022, 12, 2, 6, 58, 50, 71, DateTimeKind.Local).AddTicks(2366),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Dock",
                            FullName = "Dock O'Hara",
                            Gender = true,
                            LastName = "O'Hara",
                            Phone = "420-400-7441 x9324",
                            Student_code = "Studenth9JFc6pP"
                        },
                        new
                        {
                            Id = 73,
                            Address = "62493 Schoen Trail, South Jesusshire, Hungary",
                            City = "North Camille",
                            DateOfBirth = new DateTime(2023, 1, 10, 5, 42, 56, 867, DateTimeKind.Local).AddTicks(3425),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Ike",
                            FullName = "Ike Kuvalis",
                            Gender = false,
                            LastName = "Kuvalis",
                            Phone = "811-656-5488 x01831",
                            Student_code = "StudentNQokBwx3"
                        },
                        new
                        {
                            Id = 75,
                            Address = "52910 Runolfsson Hills, Port Rebeca, Bangladesh",
                            City = "Isacchester",
                            DateOfBirth = new DateTime(2023, 9, 6, 20, 17, 19, 431, DateTimeKind.Local).AddTicks(3928),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Zachary",
                            FullName = "Zachary Vandervort",
                            Gender = true,
                            LastName = "Vandervort",
                            Phone = "(342) 787-1051 x8554",
                            Student_code = "StudentBRktSsyl"
                        },
                        new
                        {
                            Id = 77,
                            Address = "68729 Hardy Alley, South Moshe, Saint Lucia",
                            City = "East Antonietta",
                            DateOfBirth = new DateTime(2023, 8, 18, 18, 58, 50, 728, DateTimeKind.Local).AddTicks(5184),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Trent",
                            FullName = "Trent Renner",
                            Gender = false,
                            LastName = "Renner",
                            Phone = "1-980-851-8812 x0239",
                            Student_code = "StudentgYRwzR4P"
                        },
                        new
                        {
                            Id = 79,
                            Address = "61500 Bergstrom Locks, South Dorothyland, Saint Pierre and Miquelon",
                            City = "Howellshire",
                            DateOfBirth = new DateTime(2022, 10, 1, 9, 14, 21, 407, DateTimeKind.Local).AddTicks(652),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Clare",
                            FullName = "Clare Toy",
                            Gender = true,
                            LastName = "Toy",
                            Phone = "(773) 585-4418",
                            Student_code = "StudentBOfHG9vN"
                        },
                        new
                        {
                            Id = 81,
                            Address = "820 Crooks Crossing, Kingside, Belize",
                            City = "Bryonfort",
                            DateOfBirth = new DateTime(2023, 9, 3, 4, 9, 58, 760, DateTimeKind.Local).AddTicks(9082),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Dorcas",
                            FullName = "Dorcas Champlin",
                            Gender = false,
                            LastName = "Champlin",
                            Phone = "556.356.3198 x22585",
                            Student_code = "Studentc0qvjJP5"
                        },
                        new
                        {
                            Id = 83,
                            Address = "073 Curtis Dale, Wilfridmouth, United Kingdom",
                            City = "South Keeganville",
                            DateOfBirth = new DateTime(2023, 8, 22, 20, 58, 16, 717, DateTimeKind.Local).AddTicks(5282),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Ora",
                            FullName = "Ora Batz",
                            Gender = false,
                            LastName = "Batz",
                            Phone = "875-871-5421 x280",
                            Student_code = "StudentIx0VHGCy"
                        },
                        new
                        {
                            Id = 85,
                            Address = "4826 Trantow Canyon, Lake Theoshire, Azerbaijan",
                            City = "Port Joana",
                            DateOfBirth = new DateTime(2023, 7, 15, 19, 50, 11, 147, DateTimeKind.Local).AddTicks(2240),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Lorenzo",
                            FullName = "Lorenzo Fritsch",
                            Gender = true,
                            LastName = "Fritsch",
                            Phone = "(921) 758-4016",
                            Student_code = "StudentkdfELjwL"
                        },
                        new
                        {
                            Id = 87,
                            Address = "8323 Adonis Track, Kilbackburgh, Mayotte",
                            City = "New Pietro",
                            DateOfBirth = new DateTime(2023, 1, 27, 11, 28, 43, 78, DateTimeKind.Local).AddTicks(622),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Anastacio",
                            FullName = "Anastacio Will",
                            Gender = false,
                            LastName = "Will",
                            Phone = "1-551-574-7471",
                            Student_code = "StudentSl0VB69M"
                        },
                        new
                        {
                            Id = 89,
                            Address = "4512 Bayer Walk, North Lennytown, Finland",
                            City = "Ernestinebury",
                            DateOfBirth = new DateTime(2023, 2, 8, 16, 14, 6, 368, DateTimeKind.Local).AddTicks(2627),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Marcella",
                            FullName = "Marcella McClure",
                            Gender = false,
                            LastName = "McClure",
                            Phone = "1-569-615-2693 x643",
                            Student_code = "StudentGdkiC7ng"
                        },
                        new
                        {
                            Id = 91,
                            Address = "22925 Kling Fork, New Samir, Estonia",
                            City = "Ellsworthstad",
                            DateOfBirth = new DateTime(2023, 7, 18, 1, 37, 14, 460, DateTimeKind.Local).AddTicks(3627),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Frederik",
                            FullName = "Frederik Casper",
                            Gender = true,
                            LastName = "Casper",
                            Phone = "(943) 693-1042 x343",
                            Student_code = "StudentnPoALDx2"
                        },
                        new
                        {
                            Id = 93,
                            Address = "3764 Ardith Burgs, Port Katlynn, Sri Lanka",
                            City = "Cassinton",
                            DateOfBirth = new DateTime(2023, 6, 9, 1, 13, 16, 633, DateTimeKind.Local).AddTicks(8396),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Lenore",
                            FullName = "Lenore Renner",
                            Gender = false,
                            LastName = "Renner",
                            Phone = "882.664.9077 x631",
                            Student_code = "StudentPOWC1NHv"
                        },
                        new
                        {
                            Id = 95,
                            Address = "1054 Bailey River, East Antonina, Peru",
                            City = "New Saulstad",
                            DateOfBirth = new DateTime(2022, 10, 20, 13, 24, 22, 29, DateTimeKind.Local).AddTicks(8511),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Julien",
                            FullName = "Julien Kerluke",
                            Gender = false,
                            LastName = "Kerluke",
                            Phone = "(286) 810-2317",
                            Student_code = "StudentYULiOKkd"
                        },
                        new
                        {
                            Id = 97,
                            Address = "507 Walter Ferry, Corymouth, Montenegro",
                            City = "Dickensport",
                            DateOfBirth = new DateTime(2022, 12, 20, 1, 37, 34, 38, DateTimeKind.Local).AddTicks(7545),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Alexandra",
                            FullName = "Alexandra Thiel",
                            Gender = true,
                            LastName = "Thiel",
                            Phone = "490.232.1492 x2216",
                            Student_code = "StudentLbMAmkp8"
                        },
                        new
                        {
                            Id = 99,
                            Address = "853 Estrella Terrace, Lake Derrick, Nicaragua",
                            City = "New Elias",
                            DateOfBirth = new DateTime(2023, 7, 8, 20, 51, 31, 481, DateTimeKind.Local).AddTicks(6415),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Linda",
                            FullName = "Linda Kirlin",
                            Gender = false,
                            LastName = "Kirlin",
                            Phone = "405.785.5679 x4188",
                            Student_code = "Student6uO80nvL"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
