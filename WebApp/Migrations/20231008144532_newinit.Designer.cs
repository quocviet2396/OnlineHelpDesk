// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231008144532_newinit")]
    partial class newinit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsID");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupporterId");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("userConnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbNotification");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.QnA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbQnA");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Decription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSupporter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("TicketStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameSupporter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketDTO");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotiId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotiId")
                        .IsUnique()
                        .HasFilter("[NotiId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserConn");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailToConfirm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "OrOn9vIJ",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$rxfuJMFdE6xqHIYj/UG1uu702XGPV8vnqIlI2eoDRsaGK/ZcCJnpK",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "FFfcdlzt",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$pKR2f34WfgBIGCFEMJUZuuXp9HWzNQlS2SS6cSoEKWCYTwQIxhfhS",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "OkULN53T",
                            Email = "user@gmail.com",
                            Password = "$2a$11$vxJprsbJt7/gOEFzaMoLaeXTRSPcCZRqAUgMFFj4G9o3oI1KG8rny",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "63879 Pouros Mountain, Krajcikberg, Montenegro",
                            City = "Darianafort",
                            DateOfBirth = new DateTime(2022, 11, 6, 13, 40, 29, 32, DateTimeKind.Local).AddTicks(6861),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Braden",
                            FullName = "Braden McCullough",
                            Gender = true,
                            LastName = "McCullough",
                            Phone = "1-228-580-4623 x79166",
                            Student_code = "StudentETM4KHOY"
                        },
                        new
                        {
                            Id = 3,
                            Address = "93956 Milan Views, Port Sydneyfurt, Anguilla",
                            City = "Lake Quentinmouth",
                            DateOfBirth = new DateTime(2022, 12, 13, 13, 46, 0, 242, DateTimeKind.Local).AddTicks(9930),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Lucius",
                            FullName = "Lucius Torp",
                            Gender = true,
                            LastName = "Torp",
                            Phone = "(772) 681-5585 x4870",
                            Student_code = "Student2Bzm3DRq"
                        },
                        new
                        {
                            Id = 5,
                            Address = "398 Mary Square, South Autumnton, Iraq",
                            City = "Jailynmouth",
                            DateOfBirth = new DateTime(2023, 6, 18, 7, 37, 4, 254, DateTimeKind.Local).AddTicks(3051),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Kamryn",
                            FullName = "Kamryn Kassulke",
                            Gender = true,
                            LastName = "Kassulke",
                            Phone = "(373) 433-1421",
                            Student_code = "Student7b66PBbB"
                        },
                        new
                        {
                            Id = 7,
                            Address = "57782 Dagmar Spring, Port Ottilie, Yemen",
                            City = "East Dustyburgh",
                            DateOfBirth = new DateTime(2023, 7, 26, 7, 54, 24, 222, DateTimeKind.Local).AddTicks(4116),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Emmanuelle",
                            FullName = "Emmanuelle West",
                            Gender = true,
                            LastName = "West",
                            Phone = "666.368.1322 x01309",
                            Student_code = "StudentKqx7a9en"
                        },
                        new
                        {
                            Id = 9,
                            Address = "0971 Abshire Rest, Port Alessandraberg, Saint Martin",
                            City = "Port Gertrude",
                            DateOfBirth = new DateTime(2023, 9, 3, 7, 23, 14, 880, DateTimeKind.Local).AddTicks(4295),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Tressie",
                            FullName = "Tressie McDermott",
                            Gender = false,
                            LastName = "McDermott",
                            Phone = "(727) 848-7550",
                            Student_code = "StudentljSgwRkL"
                        },
                        new
                        {
                            Id = 11,
                            Address = "6449 Cremin Path, North Maeganbury, Bahamas",
                            City = "Carletonville",
                            DateOfBirth = new DateTime(2023, 2, 18, 3, 55, 41, 879, DateTimeKind.Local).AddTicks(3643),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Olin",
                            FullName = "Olin Halvorson",
                            Gender = false,
                            LastName = "Halvorson",
                            Phone = "836-484-9986",
                            Student_code = "StudenttxJuVxZb"
                        },
                        new
                        {
                            Id = 13,
                            Address = "81521 Lakin Ramp, West Mose, Georgia",
                            City = "Robertshire",
                            DateOfBirth = new DateTime(2023, 5, 6, 17, 39, 32, 181, DateTimeKind.Local).AddTicks(5063),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Mable",
                            FullName = "Mable Schultz",
                            Gender = true,
                            LastName = "Schultz",
                            Phone = "510.531.6613 x5975",
                            Student_code = "StudentbaSOykLv"
                        },
                        new
                        {
                            Id = 15,
                            Address = "0350 Agustina Extensions, Funkshire, Guernsey",
                            City = "West Forestport",
                            DateOfBirth = new DateTime(2023, 6, 5, 20, 36, 44, 993, DateTimeKind.Local).AddTicks(1606),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Vicenta",
                            FullName = "Vicenta Kris",
                            Gender = true,
                            LastName = "Kris",
                            Phone = "(680) 935-3679 x14989",
                            Student_code = "StudentLmi9iqPt"
                        },
                        new
                        {
                            Id = 17,
                            Address = "726 Carissa Garden, Favianport, Saint Vincent and the Grenadines",
                            City = "Berryland",
                            DateOfBirth = new DateTime(2022, 10, 10, 0, 35, 53, 216, DateTimeKind.Local).AddTicks(3485),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Rogelio",
                            FullName = "Rogelio Dickinson",
                            Gender = true,
                            LastName = "Dickinson",
                            Phone = "1-229-798-3235 x971",
                            Student_code = "Student8Q17JEcO"
                        },
                        new
                        {
                            Id = 19,
                            Address = "978 Jerde Curve, South Saigeport, Mozambique",
                            City = "East Sashatown",
                            DateOfBirth = new DateTime(2023, 10, 8, 0, 35, 48, 135, DateTimeKind.Local).AddTicks(1494),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Talia",
                            FullName = "Talia Will",
                            Gender = false,
                            LastName = "Will",
                            Phone = "1-683-207-9585",
                            Student_code = "StudentJ7ukzZXJ"
                        },
                        new
                        {
                            Id = 21,
                            Address = "2421 DuBuque Coves, Port Jaymeland, Tanzania",
                            City = "Normaport",
                            DateOfBirth = new DateTime(2022, 11, 16, 19, 0, 14, 410, DateTimeKind.Local).AddTicks(7276),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Josianne",
                            FullName = "Josianne Weimann",
                            Gender = false,
                            LastName = "Weimann",
                            Phone = "950.761.7246 x8853",
                            Student_code = "StudentgBQhZgOK"
                        },
                        new
                        {
                            Id = 23,
                            Address = "43323 Brandon Parkway, Trevorview, Macao",
                            City = "East Armand",
                            DateOfBirth = new DateTime(2023, 5, 4, 22, 47, 5, 809, DateTimeKind.Local).AddTicks(4800),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Ruthie",
                            FullName = "Ruthie Cummerata",
                            Gender = true,
                            LastName = "Cummerata",
                            Phone = "800-294-8238 x170",
                            Student_code = "StudentyZMRogUr"
                        },
                        new
                        {
                            Id = 25,
                            Address = "5280 Cortney Land, East Josh, Slovakia (Slovak Republic)",
                            City = "Heaneychester",
                            DateOfBirth = new DateTime(2023, 3, 12, 2, 8, 23, 202, DateTimeKind.Local).AddTicks(4213),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Marilou",
                            FullName = "Marilou Davis",
                            Gender = true,
                            LastName = "Davis",
                            Phone = "(430) 817-9686",
                            Student_code = "StudentJQQUILvL"
                        },
                        new
                        {
                            Id = 27,
                            Address = "077 Stephen Ranch, East Matteotown, Macao",
                            City = "Port Bethfort",
                            DateOfBirth = new DateTime(2023, 9, 17, 20, 44, 32, 356, DateTimeKind.Local).AddTicks(6097),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Abbie",
                            FullName = "Abbie Kuhn",
                            Gender = false,
                            LastName = "Kuhn",
                            Phone = "(485) 494-7777 x81461",
                            Student_code = "StudentSuhMWyIw"
                        },
                        new
                        {
                            Id = 29,
                            Address = "546 Nicolas Inlet, West Hillardview, Holy See (Vatican City State)",
                            City = "North Ryley",
                            DateOfBirth = new DateTime(2023, 5, 4, 17, 58, 56, 351, DateTimeKind.Local).AddTicks(9273),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Brannon",
                            FullName = "Brannon Sawayn",
                            Gender = true,
                            LastName = "Sawayn",
                            Phone = "1-343-700-1036",
                            Student_code = "StudentfxrnGNMw"
                        },
                        new
                        {
                            Id = 31,
                            Address = "64338 Sanford Roads, Harveyport, Hungary",
                            City = "East Georgette",
                            DateOfBirth = new DateTime(2022, 12, 22, 14, 40, 0, 806, DateTimeKind.Local).AddTicks(7026),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Toby",
                            FullName = "Toby Kling",
                            Gender = true,
                            LastName = "Kling",
                            Phone = "578-250-9457",
                            Student_code = "StudenthkIiUmFt"
                        },
                        new
                        {
                            Id = 33,
                            Address = "367 Walker Meadow, Funkview, Norfolk Island",
                            City = "Sanfordborough",
                            DateOfBirth = new DateTime(2023, 1, 10, 7, 22, 8, 120, DateTimeKind.Local).AddTicks(7917),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Zakary",
                            FullName = "Zakary Erdman",
                            Gender = false,
                            LastName = "Erdman",
                            Phone = "507.677.2950 x1480",
                            Student_code = "StudentTn7WGqii"
                        },
                        new
                        {
                            Id = 35,
                            Address = "157 Yost Road, Reillystad, Zimbabwe",
                            City = "South Careytown",
                            DateOfBirth = new DateTime(2023, 10, 7, 15, 38, 23, 307, DateTimeKind.Local).AddTicks(8985),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Kolby",
                            FullName = "Kolby Gleichner",
                            Gender = false,
                            LastName = "Gleichner",
                            Phone = "1-922-317-3153",
                            Student_code = "StudentBl3nJdiM"
                        },
                        new
                        {
                            Id = 37,
                            Address = "93972 Erdman Springs, Boydbury, Togo",
                            City = "Lake Murl",
                            DateOfBirth = new DateTime(2023, 1, 19, 19, 42, 24, 290, DateTimeKind.Local).AddTicks(5393),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Sally",
                            FullName = "Sally Pouros",
                            Gender = true,
                            LastName = "Pouros",
                            Phone = "962-808-5792 x26465",
                            Student_code = "Studentwd0bwyAz"
                        },
                        new
                        {
                            Id = 39,
                            Address = "0529 Ben Viaduct, North Fiona, Republic of Korea",
                            City = "East Zetta",
                            DateOfBirth = new DateTime(2023, 3, 7, 13, 2, 39, 963, DateTimeKind.Local).AddTicks(6017),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Sylvester",
                            FullName = "Sylvester Marks",
                            Gender = true,
                            LastName = "Marks",
                            Phone = "(956) 567-9901",
                            Student_code = "StudentB2WaEyBB"
                        },
                        new
                        {
                            Id = 41,
                            Address = "923 Nannie Hills, Schillerside, Macedonia",
                            City = "East Timothybury",
                            DateOfBirth = new DateTime(2023, 1, 24, 13, 54, 57, 957, DateTimeKind.Local).AddTicks(5382),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Darryl",
                            FullName = "Darryl Nicolas",
                            Gender = false,
                            LastName = "Nicolas",
                            Phone = "693.220.7521",
                            Student_code = "StudentDkB0Y5Hu"
                        },
                        new
                        {
                            Id = 43,
                            Address = "01926 King Tunnel, Vandervortland, Latvia",
                            City = "Lake Mariah",
                            DateOfBirth = new DateTime(2023, 5, 25, 0, 50, 25, 351, DateTimeKind.Local).AddTicks(7433),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Eli",
                            FullName = "Eli Robel",
                            Gender = false,
                            LastName = "Robel",
                            Phone = "(321) 741-0000",
                            Student_code = "Student3Aalh5nF"
                        },
                        new
                        {
                            Id = 45,
                            Address = "8959 McCullough Lock, Jadonville, Albania",
                            City = "Darleneshire",
                            DateOfBirth = new DateTime(2023, 2, 19, 16, 10, 23, 409, DateTimeKind.Local).AddTicks(9315),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Benjamin",
                            FullName = "Benjamin Smith",
                            Gender = true,
                            LastName = "Smith",
                            Phone = "(445) 585-3983",
                            Student_code = "Studentch7xEUcm"
                        },
                        new
                        {
                            Id = 47,
                            Address = "3494 Faustino Manors, Beahanside, Haiti",
                            City = "O'Connerchester",
                            DateOfBirth = new DateTime(2023, 6, 25, 7, 27, 59, 719, DateTimeKind.Local).AddTicks(9075),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Audrey",
                            FullName = "Audrey Dare",
                            Gender = false,
                            LastName = "Dare",
                            Phone = "(917) 600-9797 x451",
                            Student_code = "Studentwf0I6IN1"
                        },
                        new
                        {
                            Id = 49,
                            Address = "189 Diana Turnpike, Wymanburgh, Macedonia",
                            City = "Ednafort",
                            DateOfBirth = new DateTime(2023, 1, 9, 2, 33, 30, 964, DateTimeKind.Local).AddTicks(4073),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Edna",
                            FullName = "Edna Heaney",
                            Gender = false,
                            LastName = "Heaney",
                            Phone = "328.653.0748",
                            Student_code = "Student8yCa6fit"
                        },
                        new
                        {
                            Id = 51,
                            Address = "4192 Dickens Villages, Purdychester, Cote d'Ivoire",
                            City = "Port Brooklyn",
                            DateOfBirth = new DateTime(2022, 11, 4, 21, 35, 12, 118, DateTimeKind.Local).AddTicks(6926),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Paula",
                            FullName = "Paula Carroll",
                            Gender = false,
                            LastName = "Carroll",
                            Phone = "1-864-276-8714",
                            Student_code = "Student80umIKhU"
                        },
                        new
                        {
                            Id = 53,
                            Address = "44309 Pamela Port, Katlynland, Svalbard & Jan Mayen Islands",
                            City = "West Ebony",
                            DateOfBirth = new DateTime(2023, 4, 8, 21, 24, 39, 646, DateTimeKind.Local).AddTicks(9669),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Myrtle",
                            FullName = "Myrtle Wiza",
                            Gender = true,
                            LastName = "Wiza",
                            Phone = "(388) 380-7661 x38825",
                            Student_code = "StudentW9ndOFVn"
                        },
                        new
                        {
                            Id = 55,
                            Address = "777 Rempel Locks, East Tillmanside, Serbia",
                            City = "Destinville",
                            DateOfBirth = new DateTime(2023, 8, 5, 8, 57, 59, 767, DateTimeKind.Local).AddTicks(2088),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Leonor",
                            FullName = "Leonor Kshlerin",
                            Gender = true,
                            LastName = "Kshlerin",
                            Phone = "829-259-8468 x19846",
                            Student_code = "StudentSkhsWGLA"
                        },
                        new
                        {
                            Id = 57,
                            Address = "0235 Sandy Ramp, New Estel, Croatia",
                            City = "Cheyannefurt",
                            DateOfBirth = new DateTime(2023, 6, 12, 10, 50, 55, 634, DateTimeKind.Local).AddTicks(724),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Salma",
                            FullName = "Salma Heaney",
                            Gender = true,
                            LastName = "Heaney",
                            Phone = "(637) 261-9247",
                            Student_code = "Student1tbrOhbd"
                        },
                        new
                        {
                            Id = 59,
                            Address = "76084 Rose Point, North Angus, Jordan",
                            City = "West Augustus",
                            DateOfBirth = new DateTime(2023, 6, 22, 23, 46, 39, 288, DateTimeKind.Local).AddTicks(3434),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Michale",
                            FullName = "Michale Schaefer",
                            Gender = true,
                            LastName = "Schaefer",
                            Phone = "1-574-591-8462",
                            Student_code = "StudentSyWZskVg"
                        },
                        new
                        {
                            Id = 61,
                            Address = "67747 Christa Estate, North Gay, Thailand",
                            City = "Hermannbury",
                            DateOfBirth = new DateTime(2023, 7, 6, 7, 19, 3, 115, DateTimeKind.Local).AddTicks(2885),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Destinee",
                            FullName = "Destinee Buckridge",
                            Gender = false,
                            LastName = "Buckridge",
                            Phone = "1-762-656-0472",
                            Student_code = "Studentivfzs4kw"
                        },
                        new
                        {
                            Id = 63,
                            Address = "2539 Beau Plains, Shanamouth, Mauritania",
                            City = "Lake Torey",
                            DateOfBirth = new DateTime(2023, 7, 31, 17, 32, 31, 322, DateTimeKind.Local).AddTicks(1243),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Elaina",
                            FullName = "Elaina O'Conner",
                            Gender = false,
                            LastName = "O'Conner",
                            Phone = "(238) 710-2851",
                            Student_code = "StudentVJfb3Erp"
                        },
                        new
                        {
                            Id = 65,
                            Address = "66082 Sonny Forges, West Rosie, Sweden",
                            City = "Wiegandview",
                            DateOfBirth = new DateTime(2023, 1, 15, 19, 8, 57, 422, DateTimeKind.Local).AddTicks(3494),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Arlo",
                            FullName = "Arlo Zemlak",
                            Gender = true,
                            LastName = "Zemlak",
                            Phone = "243-510-9064",
                            Student_code = "StudentJDPXwWfH"
                        },
                        new
                        {
                            Id = 67,
                            Address = "23078 Morar Grove, Port Angusmouth, Brazil",
                            City = "East Everettburgh",
                            DateOfBirth = new DateTime(2023, 2, 7, 12, 35, 22, 383, DateTimeKind.Local).AddTicks(8992),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Guido",
                            FullName = "Guido Roberts",
                            Gender = false,
                            LastName = "Roberts",
                            Phone = "894.618.2135 x44845",
                            Student_code = "StudentG9EKL9zq"
                        },
                        new
                        {
                            Id = 69,
                            Address = "220 Dario View, Hesseltown, Colombia",
                            City = "Vickieton",
                            DateOfBirth = new DateTime(2023, 5, 30, 11, 39, 5, 701, DateTimeKind.Local).AddTicks(3065),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Nedra",
                            FullName = "Nedra Quitzon",
                            Gender = true,
                            LastName = "Quitzon",
                            Phone = "1-795-723-8313",
                            Student_code = "Student3CKe5aEO"
                        },
                        new
                        {
                            Id = 71,
                            Address = "54132 Vladimir Estates, Boyershire, Congo",
                            City = "West Jewelfort",
                            DateOfBirth = new DateTime(2023, 2, 27, 7, 48, 23, 583, DateTimeKind.Local).AddTicks(6560),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Macey",
                            FullName = "Macey Runte",
                            Gender = true,
                            LastName = "Runte",
                            Phone = "947.535.9349",
                            Student_code = "StudentHBfRNoka"
                        },
                        new
                        {
                            Id = 73,
                            Address = "5531 Maximillia Junctions, McCulloughside, Antigua and Barbuda",
                            City = "Vivienberg",
                            DateOfBirth = new DateTime(2023, 9, 22, 20, 1, 12, 262, DateTimeKind.Local).AddTicks(1900),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Armani",
                            FullName = "Armani Schroeder",
                            Gender = false,
                            LastName = "Schroeder",
                            Phone = "419.688.8985",
                            Student_code = "StudentQPHMj8sH"
                        },
                        new
                        {
                            Id = 75,
                            Address = "171 Doris Orchard, Deckowstad, Nepal",
                            City = "South Horacio",
                            DateOfBirth = new DateTime(2023, 3, 23, 0, 36, 22, 525, DateTimeKind.Local).AddTicks(297),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Stan",
                            FullName = "Stan Dare",
                            Gender = true,
                            LastName = "Dare",
                            Phone = "782-924-4109 x39022",
                            Student_code = "StudentRmsNFShy"
                        },
                        new
                        {
                            Id = 77,
                            Address = "23427 Nader Villages, Uptonchester, Montenegro",
                            City = "Whiteville",
                            DateOfBirth = new DateTime(2023, 6, 9, 3, 31, 20, 370, DateTimeKind.Local).AddTicks(6935),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Cleve",
                            FullName = "Cleve Bergnaum",
                            Gender = true,
                            LastName = "Bergnaum",
                            Phone = "549.785.4591 x6515",
                            Student_code = "StudentWyhMxFq7"
                        },
                        new
                        {
                            Id = 79,
                            Address = "070 Zora Inlet, Keanustad, Pakistan",
                            City = "Deannachester",
                            DateOfBirth = new DateTime(2023, 4, 3, 4, 56, 29, 77, DateTimeKind.Local).AddTicks(9714),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Elenor",
                            FullName = "Elenor Brekke",
                            Gender = true,
                            LastName = "Brekke",
                            Phone = "794-837-7415",
                            Student_code = "StudentFk7FsNTJ"
                        },
                        new
                        {
                            Id = 81,
                            Address = "59492 Russel Greens, Wizachester, Belarus",
                            City = "South Angel",
                            DateOfBirth = new DateTime(2022, 11, 7, 14, 56, 44, 555, DateTimeKind.Local).AddTicks(4276),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Skyla",
                            FullName = "Skyla Ritchie",
                            Gender = false,
                            LastName = "Ritchie",
                            Phone = "(358) 971-4282",
                            Student_code = "StudentvHNxmCd1"
                        },
                        new
                        {
                            Id = 83,
                            Address = "05485 Koepp Junctions, East Maxime, Barbados",
                            City = "Kovacekland",
                            DateOfBirth = new DateTime(2023, 6, 14, 23, 31, 53, 72, DateTimeKind.Local).AddTicks(7599),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Casper",
                            FullName = "Casper Barton",
                            Gender = true,
                            LastName = "Barton",
                            Phone = "(311) 317-0691 x752",
                            Student_code = "StudentFQeSl9Jp"
                        },
                        new
                        {
                            Id = 85,
                            Address = "16076 Auer Knoll, Port Monserratville, Poland",
                            City = "Dietrichside",
                            DateOfBirth = new DateTime(2022, 10, 24, 23, 13, 52, 509, DateTimeKind.Local).AddTicks(3652),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Kay",
                            FullName = "Kay Hills",
                            Gender = true,
                            LastName = "Hills",
                            Phone = "925-998-4141",
                            Student_code = "StudentODsMVNkB"
                        },
                        new
                        {
                            Id = 87,
                            Address = "48734 Carolanne Cliffs, Madilynton, Bosnia and Herzegovina",
                            City = "Gusikowskiport",
                            DateOfBirth = new DateTime(2023, 8, 23, 14, 59, 30, 23, DateTimeKind.Local).AddTicks(8939),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Teresa",
                            FullName = "Teresa Kuphal",
                            Gender = false,
                            LastName = "Kuphal",
                            Phone = "1-896-869-3466 x544",
                            Student_code = "StudentkaxGWZ11"
                        },
                        new
                        {
                            Id = 89,
                            Address = "422 Ondricka Shoals, Rowlandburgh, Pakistan",
                            City = "Gussieton",
                            DateOfBirth = new DateTime(2023, 8, 12, 7, 2, 44, 182, DateTimeKind.Local).AddTicks(8429),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Abdul",
                            FullName = "Abdul Doyle",
                            Gender = false,
                            LastName = "Doyle",
                            Phone = "619.414.2358",
                            Student_code = "Students0q2nqoU"
                        },
                        new
                        {
                            Id = 91,
                            Address = "124 Glover Course, Port Fatima, Mauritania",
                            City = "Port Ellenhaven",
                            DateOfBirth = new DateTime(2023, 9, 27, 13, 35, 4, 786, DateTimeKind.Local).AddTicks(5103),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Kirk",
                            FullName = "Kirk Lemke",
                            Gender = false,
                            LastName = "Lemke",
                            Phone = "283-539-4828 x6012",
                            Student_code = "StudentW1XFW3pG"
                        },
                        new
                        {
                            Id = 93,
                            Address = "535 Pollich Course, Port Maximo, Martinique",
                            City = "Port Nikki",
                            DateOfBirth = new DateTime(2022, 11, 14, 22, 30, 31, 210, DateTimeKind.Local).AddTicks(6126),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "America",
                            FullName = "America Koch",
                            Gender = true,
                            LastName = "Koch",
                            Phone = "259-704-2556 x2358",
                            Student_code = "StudentJued2jEr"
                        },
                        new
                        {
                            Id = 95,
                            Address = "4213 Rodger Turnpike, Lavonport, Argentina",
                            City = "Noemieville",
                            DateOfBirth = new DateTime(2023, 6, 10, 8, 4, 27, 632, DateTimeKind.Local).AddTicks(8103),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Isabelle",
                            FullName = "Isabelle Orn",
                            Gender = false,
                            LastName = "Orn",
                            Phone = "(877) 601-1186 x3287",
                            Student_code = "StudentSH5YonAL"
                        },
                        new
                        {
                            Id = 97,
                            Address = "52267 Metz Centers, Port Edmund, Ecuador",
                            City = "West Nataliahaven",
                            DateOfBirth = new DateTime(2023, 3, 15, 16, 51, 15, 291, DateTimeKind.Local).AddTicks(258),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Nikki",
                            FullName = "Nikki Boyle",
                            Gender = false,
                            LastName = "Boyle",
                            Phone = "(865) 211-8050",
                            Student_code = "Student7JsuvJZq"
                        },
                        new
                        {
                            Id = 99,
                            Address = "388 Marks Valleys, Pearlbury, Puerto Rico",
                            City = "Merlbury",
                            DateOfBirth = new DateTime(2023, 2, 19, 14, 26, 46, 81, DateTimeKind.Local).AddTicks(2642),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Bill",
                            FullName = "Bill Buckridge",
                            Gender = true,
                            LastName = "Buckridge",
                            Phone = "368.603.1907 x0911",
                            Student_code = "StudentgXeeeg8x"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comment", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Supporter");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.HasOne("LibraryModels.Notifications", "Notifications")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "NotiId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Notifications");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Navigation("userConn");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userConn");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
