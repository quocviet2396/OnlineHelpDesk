// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsID");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupporterId");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("userConnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbNotification");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.QnA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbQnA");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Decription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSupporter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("TicketStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameSupporter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketDTO");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotiId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotiId")
                        .IsUnique()
                        .HasFilter("[NotiId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserConn");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailToConfirm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "sXNojQck",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$f4NtXkuuho3xD9IQsAWdv.vRjwWDj5yCQTr58XnFLeAv0Ui0gbryW",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "XgSDxR5C",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$5O8tiAYHEHjPTeKJKC53nucLxAZdoqZa/tBqN18xhOaSiyF4Xdr9u",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "hInhFW3p",
                            Email = "user@gmail.com",
                            Password = "$2a$11$O4MzLmd1m2uyv8edIUivfeDDZvVXyw4rviTrNLIDDyu.PJTe0gmY6",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "74558 Breanne Vista, Rohanside, Monaco",
                            City = "Wisokyland",
                            DateOfBirth = new DateTime(2023, 3, 23, 6, 5, 46, 927, DateTimeKind.Local).AddTicks(1122),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Reginald",
                            FullName = "Reginald Bogisich",
                            Gender = false,
                            LastName = "Bogisich",
                            Phone = "1-796-779-0061 x89918",
                            Student_code = "StudentzlcOJFab"
                        },
                        new
                        {
                            Id = 3,
                            Address = "84569 Taya Views, Victorside, Belarus",
                            City = "Labadieside",
                            DateOfBirth = new DateTime(2023, 4, 21, 1, 2, 15, 771, DateTimeKind.Local).AddTicks(7281),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Dean",
                            FullName = "Dean Abernathy",
                            Gender = true,
                            LastName = "Abernathy",
                            Phone = "617-868-5044 x255",
                            Student_code = "Student1evQbHGE"
                        },
                        new
                        {
                            Id = 5,
                            Address = "8954 Mosciski Mall, West Agustina, Ireland",
                            City = "Paolostad",
                            DateOfBirth = new DateTime(2023, 1, 3, 18, 7, 50, 152, DateTimeKind.Local).AddTicks(7547),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Kaycee",
                            FullName = "Kaycee Becker",
                            Gender = false,
                            LastName = "Becker",
                            Phone = "740.205.1628 x0044",
                            Student_code = "StudentIaPwzkHt"
                        },
                        new
                        {
                            Id = 7,
                            Address = "1198 Kessler Meadows, North Dejahstad, Liechtenstein",
                            City = "Port Carlee",
                            DateOfBirth = new DateTime(2023, 7, 21, 17, 41, 52, 232, DateTimeKind.Local).AddTicks(2165),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Federico",
                            FullName = "Federico Wisozk",
                            Gender = true,
                            LastName = "Wisozk",
                            Phone = "623.611.0785 x488",
                            Student_code = "StudentbfhSCkIM"
                        },
                        new
                        {
                            Id = 9,
                            Address = "5957 Reichert Circles, Harveyburgh, Bulgaria",
                            City = "Kaylihaven",
                            DateOfBirth = new DateTime(2023, 8, 5, 17, 30, 35, 13, DateTimeKind.Local).AddTicks(5744),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Mariam",
                            FullName = "Mariam Wilkinson",
                            Gender = true,
                            LastName = "Wilkinson",
                            Phone = "(815) 200-8674",
                            Student_code = "StudentUZy0UuOQ"
                        },
                        new
                        {
                            Id = 11,
                            Address = "61342 D'Amore Shores, Elmerville, Eritrea",
                            City = "North Erik",
                            DateOfBirth = new DateTime(2022, 10, 25, 20, 58, 14, 193, DateTimeKind.Local).AddTicks(4424),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Elian",
                            FullName = "Elian Casper",
                            Gender = true,
                            LastName = "Casper",
                            Phone = "511-682-6298",
                            Student_code = "StudentmNXRU12I"
                        },
                        new
                        {
                            Id = 13,
                            Address = "13983 Lacy Park, Leolaville, Japan",
                            City = "Fernfort",
                            DateOfBirth = new DateTime(2023, 7, 15, 18, 15, 33, 755, DateTimeKind.Local).AddTicks(6163),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Marc",
                            FullName = "Marc Stroman",
                            Gender = true,
                            LastName = "Stroman",
                            Phone = "1-640-661-6964 x33235",
                            Student_code = "StudentvZpLSY2t"
                        },
                        new
                        {
                            Id = 15,
                            Address = "890 Rath Plain, Powlowskiport, French Polynesia",
                            City = "Littelside",
                            DateOfBirth = new DateTime(2022, 10, 17, 1, 38, 31, 890, DateTimeKind.Local).AddTicks(3562),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Dorothy",
                            FullName = "Dorothy Kerluke",
                            Gender = true,
                            LastName = "Kerluke",
                            Phone = "(494) 337-6383",
                            Student_code = "StudentnONjaitQ"
                        },
                        new
                        {
                            Id = 17,
                            Address = "510 Ana Locks, North Tyshawnfurt, Belize",
                            City = "Lake Emelyville",
                            DateOfBirth = new DateTime(2023, 8, 11, 16, 21, 11, 36, DateTimeKind.Local).AddTicks(2817),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Maddison",
                            FullName = "Maddison Donnelly",
                            Gender = true,
                            LastName = "Donnelly",
                            Phone = "345.998.6311 x92242",
                            Student_code = "StudentpHMXOra7"
                        },
                        new
                        {
                            Id = 19,
                            Address = "410 Kulas Lodge, Orlomouth, Malaysia",
                            City = "Ramonview",
                            DateOfBirth = new DateTime(2023, 2, 25, 5, 6, 30, 644, DateTimeKind.Local).AddTicks(505),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Piper",
                            FullName = "Piper Jakubowski",
                            Gender = false,
                            LastName = "Jakubowski",
                            Phone = "1-852-469-4820 x5027",
                            Student_code = "Student4obemsEC"
                        },
                        new
                        {
                            Id = 21,
                            Address = "897 Meghan Point, Port Fayechester, United States of America",
                            City = "Port Kristinashire",
                            DateOfBirth = new DateTime(2023, 8, 18, 19, 33, 9, 631, DateTimeKind.Local).AddTicks(647),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Giovanny",
                            FullName = "Giovanny Rogahn",
                            Gender = false,
                            LastName = "Rogahn",
                            Phone = "559.270.7414",
                            Student_code = "StudentsAXwh9ke"
                        },
                        new
                        {
                            Id = 23,
                            Address = "1456 Little Fork, East Wernerfurt, Holy See (Vatican City State)",
                            City = "Hahnchester",
                            DateOfBirth = new DateTime(2023, 6, 9, 20, 50, 7, 38, DateTimeKind.Local).AddTicks(6086),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Bernhard",
                            FullName = "Bernhard Feil",
                            Gender = true,
                            LastName = "Feil",
                            Phone = "1-337-323-9286 x58516",
                            Student_code = "StudentOZZxcfj2"
                        },
                        new
                        {
                            Id = 25,
                            Address = "94428 Sadie Mount, West Cedrick, Maldives",
                            City = "West Ezequiel",
                            DateOfBirth = new DateTime(2023, 3, 3, 12, 10, 35, 468, DateTimeKind.Local).AddTicks(5277),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Melody",
                            FullName = "Melody Morar",
                            Gender = true,
                            LastName = "Morar",
                            Phone = "1-869-922-1914 x9019",
                            Student_code = "Student3exa0BYY"
                        },
                        new
                        {
                            Id = 27,
                            Address = "945 Casper Crest, Rooseveltshire, South Georgia and the South Sandwich Islands",
                            City = "East Hilarioside",
                            DateOfBirth = new DateTime(2022, 11, 16, 17, 20, 29, 212, DateTimeKind.Local).AddTicks(118),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Hellen",
                            FullName = "Hellen Spencer",
                            Gender = false,
                            LastName = "Spencer",
                            Phone = "(841) 887-3378 x318",
                            Student_code = "Student2Zh34a3G"
                        },
                        new
                        {
                            Id = 29,
                            Address = "4104 Block Falls, Iciefort, Dominican Republic",
                            City = "West Makenzie",
                            DateOfBirth = new DateTime(2023, 1, 21, 12, 56, 58, 208, DateTimeKind.Local).AddTicks(326),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "May",
                            FullName = "May Jacobs",
                            Gender = true,
                            LastName = "Jacobs",
                            Phone = "1-368-633-6783 x1286",
                            Student_code = "StudentrKT0EViy"
                        },
                        new
                        {
                            Id = 31,
                            Address = "717 Terry Hills, Port Isabelle, Trinidad and Tobago",
                            City = "Nienowfurt",
                            DateOfBirth = new DateTime(2023, 7, 23, 22, 56, 21, 398, DateTimeKind.Local).AddTicks(9536),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Syble",
                            FullName = "Syble Kuhlman",
                            Gender = true,
                            LastName = "Kuhlman",
                            Phone = "290.247.9832",
                            Student_code = "StudentDGD2U9cS"
                        },
                        new
                        {
                            Id = 33,
                            Address = "93859 Gerry Lake, South Anjaliport, Iran",
                            City = "New Alainahaven",
                            DateOfBirth = new DateTime(2023, 7, 14, 15, 58, 11, 703, DateTimeKind.Local).AddTicks(4698),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Dejah",
                            FullName = "Dejah Rohan",
                            Gender = true,
                            LastName = "Rohan",
                            Phone = "1-589-975-5329",
                            Student_code = "StudentG2XU4oh0"
                        },
                        new
                        {
                            Id = 35,
                            Address = "05341 Steuber Ridges, McGlynnmouth, Haiti",
                            City = "North Orrinshire",
                            DateOfBirth = new DateTime(2023, 2, 10, 9, 57, 20, 721, DateTimeKind.Local).AddTicks(1402),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Gabriella",
                            FullName = "Gabriella Ferry",
                            Gender = true,
                            LastName = "Ferry",
                            Phone = "489.872.3232",
                            Student_code = "StudentsVVGRjmI"
                        },
                        new
                        {
                            Id = 37,
                            Address = "9545 Cassidy Lodge, Nicolaport, Iraq",
                            City = "Kayland",
                            DateOfBirth = new DateTime(2023, 2, 15, 8, 30, 1, 464, DateTimeKind.Local).AddTicks(2851),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Jeromy",
                            FullName = "Jeromy Waters",
                            Gender = false,
                            LastName = "Waters",
                            Phone = "479.964.7614",
                            Student_code = "StudentswIvXZMy"
                        },
                        new
                        {
                            Id = 39,
                            Address = "941 Williamson Fall, Glennieburgh, Serbia",
                            City = "Lake Tessie",
                            DateOfBirth = new DateTime(2023, 1, 17, 7, 43, 12, 437, DateTimeKind.Local).AddTicks(8519),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Jett",
                            FullName = "Jett Tremblay",
                            Gender = false,
                            LastName = "Tremblay",
                            Phone = "673-377-5777 x63626",
                            Student_code = "Student5f14cGiu"
                        },
                        new
                        {
                            Id = 41,
                            Address = "928 Raphael Expressway, Port Agnesstad, El Salvador",
                            City = "West Donnachester",
                            DateOfBirth = new DateTime(2023, 1, 28, 16, 34, 17, 189, DateTimeKind.Local).AddTicks(3284),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Arvel",
                            FullName = "Arvel Terry",
                            Gender = true,
                            LastName = "Terry",
                            Phone = "1-772-257-9689 x31688",
                            Student_code = "StudentuDoQGe4O"
                        },
                        new
                        {
                            Id = 43,
                            Address = "02594 Arlene Via, Sedrickburgh, South Africa",
                            City = "North Karsonfort",
                            DateOfBirth = new DateTime(2022, 10, 11, 22, 55, 16, 141, DateTimeKind.Local).AddTicks(4650),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Celestino",
                            FullName = "Celestino Adams",
                            Gender = false,
                            LastName = "Adams",
                            Phone = "238-372-1175 x2620",
                            Student_code = "Studentmr3RQbT6"
                        },
                        new
                        {
                            Id = 45,
                            Address = "10180 Daugherty Curve, Ariellemouth, Nepal",
                            City = "South Kianastad",
                            DateOfBirth = new DateTime(2023, 9, 22, 4, 12, 47, 236, DateTimeKind.Local).AddTicks(3400),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Camilla",
                            FullName = "Camilla Schmidt",
                            Gender = false,
                            LastName = "Schmidt",
                            Phone = "663.217.9683",
                            Student_code = "Studentdkh5RA1U"
                        },
                        new
                        {
                            Id = 47,
                            Address = "7518 Lennie Wall, Cronaville, Republic of Korea",
                            City = "Lake Darrenshire",
                            DateOfBirth = new DateTime(2023, 5, 20, 21, 29, 37, 911, DateTimeKind.Local).AddTicks(6536),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Omer",
                            FullName = "Omer Kub",
                            Gender = false,
                            LastName = "Kub",
                            Phone = "536.407.6244 x5071",
                            Student_code = "Student4k0tpTsS"
                        },
                        new
                        {
                            Id = 49,
                            Address = "370 Elroy Forest, Fisherhaven, Faroe Islands",
                            City = "Narcisofurt",
                            DateOfBirth = new DateTime(2023, 6, 26, 22, 14, 38, 389, DateTimeKind.Local).AddTicks(5479),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Christy",
                            FullName = "Christy Kuvalis",
                            Gender = true,
                            LastName = "Kuvalis",
                            Phone = "596-733-7863",
                            Student_code = "StudentvgxzOobh"
                        },
                        new
                        {
                            Id = 51,
                            Address = "943 Barton Viaduct, Gerholdburgh, Niue",
                            City = "Windlerville",
                            DateOfBirth = new DateTime(2023, 2, 5, 15, 35, 55, 661, DateTimeKind.Local).AddTicks(3081),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Ezekiel",
                            FullName = "Ezekiel Murazik",
                            Gender = true,
                            LastName = "Murazik",
                            Phone = "733-590-4487",
                            Student_code = "Student1IxBkYAm"
                        },
                        new
                        {
                            Id = 53,
                            Address = "90718 Mayra Spur, North Cheyennetown, Sri Lanka",
                            City = "Nikolausfort",
                            DateOfBirth = new DateTime(2023, 6, 1, 1, 52, 10, 740, DateTimeKind.Local).AddTicks(1775),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Joshua",
                            FullName = "Joshua McCullough",
                            Gender = true,
                            LastName = "McCullough",
                            Phone = "535.316.3521 x321",
                            Student_code = "StudentTwEE9A9O"
                        },
                        new
                        {
                            Id = 55,
                            Address = "51689 Major Roads, South Easterchester, Slovakia (Slovak Republic)",
                            City = "Julesstad",
                            DateOfBirth = new DateTime(2023, 5, 11, 4, 10, 0, 599, DateTimeKind.Local).AddTicks(836),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Desiree",
                            FullName = "Desiree Bosco",
                            Gender = true,
                            LastName = "Bosco",
                            Phone = "(417) 765-5310 x94729",
                            Student_code = "StudentOblLzEW3"
                        },
                        new
                        {
                            Id = 57,
                            Address = "60853 Effertz Radial, East Eliezertown, Angola",
                            City = "West Jerrelltown",
                            DateOfBirth = new DateTime(2023, 1, 28, 11, 5, 49, 528, DateTimeKind.Local).AddTicks(9688),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Tiffany",
                            FullName = "Tiffany King",
                            Gender = true,
                            LastName = "King",
                            Phone = "1-493-683-8381 x8584",
                            Student_code = "Student7ODxEpqo"
                        },
                        new
                        {
                            Id = 59,
                            Address = "1092 Marks Haven, South Bill, Moldova",
                            City = "Lake Novafort",
                            DateOfBirth = new DateTime(2023, 5, 23, 17, 24, 5, 935, DateTimeKind.Local).AddTicks(3934),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Marta",
                            FullName = "Marta Cormier",
                            Gender = true,
                            LastName = "Cormier",
                            Phone = "396.701.7464 x4829",
                            Student_code = "StudenthStjcGp6"
                        },
                        new
                        {
                            Id = 61,
                            Address = "433 Wiegand Shores, Malachishire, Tanzania",
                            City = "Vanshire",
                            DateOfBirth = new DateTime(2023, 1, 5, 0, 38, 54, 637, DateTimeKind.Local).AddTicks(9279),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Colin",
                            FullName = "Colin Dicki",
                            Gender = true,
                            LastName = "Dicki",
                            Phone = "(706) 338-3263 x661",
                            Student_code = "Student0GFl28Rc"
                        },
                        new
                        {
                            Id = 63,
                            Address = "192 Forrest Spring, Port Wallace, Yemen",
                            City = "Cristinaborough",
                            DateOfBirth = new DateTime(2023, 8, 30, 7, 28, 44, 886, DateTimeKind.Local).AddTicks(3999),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Marilou",
                            FullName = "Marilou Rutherford",
                            Gender = true,
                            LastName = "Rutherford",
                            Phone = "1-782-962-6761",
                            Student_code = "Student8WPGsJAF"
                        },
                        new
                        {
                            Id = 65,
                            Address = "809 Vito Greens, O'Keefebury, Japan",
                            City = "East Aylintown",
                            DateOfBirth = new DateTime(2023, 7, 28, 22, 29, 20, 360, DateTimeKind.Local).AddTicks(5740),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Jena",
                            FullName = "Jena Kreiger",
                            Gender = true,
                            LastName = "Kreiger",
                            Phone = "1-612-822-6970 x15568",
                            Student_code = "Student7p2mjyrd"
                        },
                        new
                        {
                            Id = 67,
                            Address = "64659 Noemi Grove, West Murphymouth, Mongolia",
                            City = "Alisonstad",
                            DateOfBirth = new DateTime(2022, 10, 11, 10, 34, 34, 194, DateTimeKind.Local).AddTicks(2675),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Adolphus",
                            FullName = "Adolphus Lang",
                            Gender = false,
                            LastName = "Lang",
                            Phone = "1-589-294-6904",
                            Student_code = "StudentpN8FdJyl"
                        },
                        new
                        {
                            Id = 69,
                            Address = "576 Justina Extensions, Laruemouth, Turkey",
                            City = "Lake Marielle",
                            DateOfBirth = new DateTime(2023, 2, 18, 7, 49, 52, 422, DateTimeKind.Local).AddTicks(8914),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Kelsie",
                            FullName = "Kelsie Blick",
                            Gender = false,
                            LastName = "Blick",
                            Phone = "(430) 383-7004",
                            Student_code = "StudentbgbMituW"
                        },
                        new
                        {
                            Id = 71,
                            Address = "1462 Melyssa Creek, New Stanleymouth, Slovenia",
                            City = "Lake Benny",
                            DateOfBirth = new DateTime(2023, 1, 7, 8, 18, 30, 15, DateTimeKind.Local).AddTicks(9811),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Diamond",
                            FullName = "Diamond Romaguera",
                            Gender = true,
                            LastName = "Romaguera",
                            Phone = "1-852-854-9469 x1969",
                            Student_code = "StudentZlHOSatD"
                        },
                        new
                        {
                            Id = 73,
                            Address = "2425 Casimer Flat, Conradchester, Liechtenstein",
                            City = "Levibury",
                            DateOfBirth = new DateTime(2023, 7, 20, 9, 22, 7, 399, DateTimeKind.Local).AddTicks(1022),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Bailee",
                            FullName = "Bailee Kertzmann",
                            Gender = true,
                            LastName = "Kertzmann",
                            Phone = "(771) 415-0148",
                            Student_code = "Studentk5iyIZqR"
                        },
                        new
                        {
                            Id = 75,
                            Address = "549 Alberto Crossing, Fritzton, Luxembourg",
                            City = "East Valerieberg",
                            DateOfBirth = new DateTime(2023, 1, 10, 11, 10, 26, 957, DateTimeKind.Local).AddTicks(9239),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Newton",
                            FullName = "Newton Lakin",
                            Gender = true,
                            LastName = "Lakin",
                            Phone = "674.258.9245 x724",
                            Student_code = "StudentFLQXI7bG"
                        },
                        new
                        {
                            Id = 77,
                            Address = "330 D'Amore Light, Andersonburgh, Serbia",
                            City = "Raeganhaven",
                            DateOfBirth = new DateTime(2023, 4, 26, 9, 29, 48, 177, DateTimeKind.Local).AddTicks(9476),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Vicenta",
                            FullName = "Vicenta Jakubowski",
                            Gender = true,
                            LastName = "Jakubowski",
                            Phone = "(249) 507-7535 x392",
                            Student_code = "Student50sxgRem"
                        },
                        new
                        {
                            Id = 79,
                            Address = "48128 Samantha Parkway, West Ewald, Saint Martin",
                            City = "Libbiebury",
                            DateOfBirth = new DateTime(2023, 9, 14, 1, 27, 36, 856, DateTimeKind.Local).AddTicks(2448),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Laverna",
                            FullName = "Laverna Johnson",
                            Gender = true,
                            LastName = "Johnson",
                            Phone = "333.818.3812 x95303",
                            Student_code = "StudentLvWkNq7w"
                        },
                        new
                        {
                            Id = 81,
                            Address = "825 Rath Loop, West Zion, Cook Islands",
                            City = "North Ellenfort",
                            DateOfBirth = new DateTime(2022, 11, 20, 7, 28, 24, 830, DateTimeKind.Local).AddTicks(2470),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Kattie",
                            FullName = "Kattie Hickle",
                            Gender = false,
                            LastName = "Hickle",
                            Phone = "303-874-1576 x58668",
                            Student_code = "StudentCRBDcSuO"
                        },
                        new
                        {
                            Id = 83,
                            Address = "153 Tabitha Roads, East Oswald, Republic of Korea",
                            City = "Emmaleeview",
                            DateOfBirth = new DateTime(2022, 11, 8, 21, 31, 1, 883, DateTimeKind.Local).AddTicks(8763),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Kitty",
                            FullName = "Kitty Homenick",
                            Gender = true,
                            LastName = "Homenick",
                            Phone = "744-305-4628 x73296",
                            Student_code = "StudentGg5srxkf"
                        },
                        new
                        {
                            Id = 85,
                            Address = "972 Kattie Square, Ashlybury, Venezuela",
                            City = "West Bennettfort",
                            DateOfBirth = new DateTime(2023, 4, 21, 18, 7, 20, 412, DateTimeKind.Local).AddTicks(4241),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Luna",
                            FullName = "Luna Kerluke",
                            Gender = false,
                            LastName = "Kerluke",
                            Phone = "793.492.7760",
                            Student_code = "StudentbWCoUJ2z"
                        },
                        new
                        {
                            Id = 87,
                            Address = "828 Langworth Lane, West Jacinthe, Gabon",
                            City = "Port Isobel",
                            DateOfBirth = new DateTime(2023, 2, 17, 9, 35, 5, 639, DateTimeKind.Local).AddTicks(9682),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Michele",
                            FullName = "Michele Daniel",
                            Gender = true,
                            LastName = "Daniel",
                            Phone = "257.325.1895",
                            Student_code = "StudentU0Qp1bno"
                        },
                        new
                        {
                            Id = 89,
                            Address = "845 Gerhold Burg, Jeraldmouth, Heard Island and McDonald Islands",
                            City = "Port Cristal",
                            DateOfBirth = new DateTime(2023, 5, 17, 9, 14, 16, 235, DateTimeKind.Local).AddTicks(5499),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Moshe",
                            FullName = "Moshe Gerhold",
                            Gender = false,
                            LastName = "Gerhold",
                            Phone = "330-224-1489",
                            Student_code = "StudentQZGbgR5r"
                        },
                        new
                        {
                            Id = 91,
                            Address = "47673 O'Connell Points, Laurianefort, Japan",
                            City = "Lake Granville",
                            DateOfBirth = new DateTime(2023, 3, 5, 19, 33, 4, 185, DateTimeKind.Local).AddTicks(4799),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Walton",
                            FullName = "Walton McGlynn",
                            Gender = true,
                            LastName = "McGlynn",
                            Phone = "856-996-0571",
                            Student_code = "StudenthWeLoM9s"
                        },
                        new
                        {
                            Id = 93,
                            Address = "57342 Herzog Skyway, Bernadetteberg, Ukraine",
                            City = "North Mabel",
                            DateOfBirth = new DateTime(2023, 1, 28, 18, 24, 46, 873, DateTimeKind.Local).AddTicks(8343),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Letitia",
                            FullName = "Letitia Ullrich",
                            Gender = true,
                            LastName = "Ullrich",
                            Phone = "465-484-3989",
                            Student_code = "StudentzqiMk2qJ"
                        },
                        new
                        {
                            Id = 95,
                            Address = "9368 Grant Harbors, Dooleychester, American Samoa",
                            City = "South Hoytfurt",
                            DateOfBirth = new DateTime(2023, 8, 30, 22, 14, 29, 166, DateTimeKind.Local).AddTicks(2534),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Phyllis",
                            FullName = "Phyllis Streich",
                            Gender = true,
                            LastName = "Streich",
                            Phone = "1-733-350-8501 x750",
                            Student_code = "StudentfIcHzFs9"
                        },
                        new
                        {
                            Id = 97,
                            Address = "999 Collins Row, Morissetteland, Nepal",
                            City = "Hattieton",
                            DateOfBirth = new DateTime(2023, 2, 23, 13, 5, 13, 822, DateTimeKind.Local).AddTicks(4426),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Brandt",
                            FullName = "Brandt Carter",
                            Gender = false,
                            LastName = "Carter",
                            Phone = "698-551-3363 x6066",
                            Student_code = "StudentfACWu3hP"
                        },
                        new
                        {
                            Id = 99,
                            Address = "70526 Hayes Park, Danielbury, Bolivia",
                            City = "Lake Deannachester",
                            DateOfBirth = new DateTime(2023, 9, 8, 5, 51, 2, 991, DateTimeKind.Local).AddTicks(8957),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Megane",
                            FullName = "Megane Torphy",
                            Gender = true,
                            LastName = "Torphy",
                            Phone = "579-292-2057",
                            Student_code = "Studenta5NIwFZG"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Supporter");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.HasOne("LibraryModels.Notifications", "Notifications")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "NotiId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Notifications");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Navigation("userConn");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userConn");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
