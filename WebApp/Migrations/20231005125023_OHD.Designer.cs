// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231005125023_OHD")]
    partial class OHD
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("userConnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userConnId")
                        .IsUnique()
                        .HasFilter("[userConnId] IS NOT NULL");

                    b.ToTable("tbNotification");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Decription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCreator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSupporter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("TicketStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameCreator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameSupporter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tbTicketDTO");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotiId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserConn");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailToConfirm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "E6wPRoQd",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$qrG/zVunDOEZ8WRxDtP3SePxxy8jWnIOF4D6e97azF9WhZNR04r2G",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "E5sIUBbn",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$z6JErkq8hf22jQJcGs9Uyu4OaAuWMMk6NXpRY2cUQBBK0wVZ15k0W",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "mc8ObVIc",
                            Email = "user@gmail.com",
                            Password = "$2a$11$OZcCr2fTEkMXoxFEV0vQzeP/hIB2u8P/5zVyx9kVirvgZKJign74a",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "7039 Roberts Passage, Darwinside, Saint Barthelemy",
                            City = "Port Bette",
                            DateOfBirth = new DateTime(2022, 12, 13, 7, 50, 12, 193, DateTimeKind.Local).AddTicks(2574),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Ted",
                            FullName = "Ted Walter",
                            Gender = true,
                            LastName = "Walter",
                            Phone = "450.718.8166",
                            Student_code = "StudentZ1PZaN4I"
                        },
                        new
                        {
                            Id = 3,
                            Address = "54244 Casper Branch, West Sherwoodborough, Bahrain",
                            City = "Lake Taniahaven",
                            DateOfBirth = new DateTime(2023, 7, 17, 14, 59, 25, 242, DateTimeKind.Local).AddTicks(2829),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Amos",
                            FullName = "Amos McGlynn",
                            Gender = false,
                            LastName = "McGlynn",
                            Phone = "(385) 229-9142 x0741",
                            Student_code = "Student0OhLLDGd"
                        },
                        new
                        {
                            Id = 5,
                            Address = "5974 Ernser Circle, Gilbertborough, Falkland Islands (Malvinas)",
                            City = "West Kellen",
                            DateOfBirth = new DateTime(2022, 11, 9, 15, 43, 58, 98, DateTimeKind.Local).AddTicks(4165),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Myra",
                            FullName = "Myra Oberbrunner",
                            Gender = false,
                            LastName = "Oberbrunner",
                            Phone = "1-340-839-2504 x2662",
                            Student_code = "StudentGTxJ565r"
                        },
                        new
                        {
                            Id = 7,
                            Address = "36249 Kub Trafficway, Port Abbigailburgh, Holy See (Vatican City State)",
                            City = "Susannaport",
                            DateOfBirth = new DateTime(2023, 9, 7, 17, 32, 28, 377, DateTimeKind.Local).AddTicks(4183),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Aubree",
                            FullName = "Aubree Wintheiser",
                            Gender = true,
                            LastName = "Wintheiser",
                            Phone = "(871) 879-9749",
                            Student_code = "StudentmFRLj4fE"
                        },
                        new
                        {
                            Id = 9,
                            Address = "1791 Orlo Trafficway, Kutchburgh, Australia",
                            City = "South Belleville",
                            DateOfBirth = new DateTime(2023, 2, 21, 18, 22, 9, 857, DateTimeKind.Local).AddTicks(2848),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Alanna",
                            FullName = "Alanna Kozey",
                            Gender = true,
                            LastName = "Kozey",
                            Phone = "1-925-648-4740",
                            Student_code = "StudenttTGGr3Jc"
                        },
                        new
                        {
                            Id = 11,
                            Address = "6465 Helen Views, Hayliemouth, Netherlands",
                            City = "Port Gladysville",
                            DateOfBirth = new DateTime(2023, 2, 12, 3, 33, 23, 97, DateTimeKind.Local).AddTicks(2362),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Fae",
                            FullName = "Fae Schmidt",
                            Gender = false,
                            LastName = "Schmidt",
                            Phone = "1-739-969-4451",
                            Student_code = "Studenthw3uG6m3"
                        },
                        new
                        {
                            Id = 13,
                            Address = "59674 Alessandra Haven, Bradtkeburgh, Singapore",
                            City = "Rosenbaumtown",
                            DateOfBirth = new DateTime(2023, 9, 6, 19, 15, 35, 64, DateTimeKind.Local).AddTicks(2292),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Myron",
                            FullName = "Myron Anderson",
                            Gender = false,
                            LastName = "Anderson",
                            Phone = "258.709.6770 x297",
                            Student_code = "StudentC2MrJd4m"
                        },
                        new
                        {
                            Id = 15,
                            Address = "0906 Tamia Inlet, Lake Celestino, Liechtenstein",
                            City = "Bertramtown",
                            DateOfBirth = new DateTime(2023, 5, 1, 11, 34, 10, 244, DateTimeKind.Local).AddTicks(552),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Ola",
                            FullName = "Ola Rowe",
                            Gender = false,
                            LastName = "Rowe",
                            Phone = "716.426.3023 x425",
                            Student_code = "StudentlNG8zkt4"
                        },
                        new
                        {
                            Id = 17,
                            Address = "750 Bauch Square, Mosciskifurt, Bahrain",
                            City = "Breitenbergport",
                            DateOfBirth = new DateTime(2022, 10, 25, 12, 15, 52, 637, DateTimeKind.Local).AddTicks(2142),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Dale",
                            FullName = "Dale Kautzer",
                            Gender = true,
                            LastName = "Kautzer",
                            Phone = "(553) 214-7736",
                            Student_code = "Student4KSWEgOT"
                        },
                        new
                        {
                            Id = 19,
                            Address = "8341 Jayne Villages, Lake Marianburgh, Uzbekistan",
                            City = "West Murphy",
                            DateOfBirth = new DateTime(2023, 4, 5, 16, 9, 30, 716, DateTimeKind.Local).AddTicks(8501),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Deon",
                            FullName = "Deon Trantow",
                            Gender = false,
                            LastName = "Trantow",
                            Phone = "1-942-388-1707 x11618",
                            Student_code = "StudentHHjy6WI5"
                        },
                        new
                        {
                            Id = 21,
                            Address = "970 Heidenreich Field, McGlynnbury, Brunei Darussalam",
                            City = "West Helenehaven",
                            DateOfBirth = new DateTime(2022, 12, 15, 6, 47, 27, 734, DateTimeKind.Local).AddTicks(3733),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Dayton",
                            FullName = "Dayton Goodwin",
                            Gender = true,
                            LastName = "Goodwin",
                            Phone = "333.694.3778",
                            Student_code = "StudentXjWq236C"
                        },
                        new
                        {
                            Id = 23,
                            Address = "41918 Herman Courts, West Berta, Georgia",
                            City = "East Dayna",
                            DateOfBirth = new DateTime(2023, 8, 10, 8, 14, 19, 504, DateTimeKind.Local).AddTicks(8630),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Margaretta",
                            FullName = "Margaretta Daniel",
                            Gender = false,
                            LastName = "Daniel",
                            Phone = "(988) 866-0387",
                            Student_code = "StudentmHx4kF4h"
                        },
                        new
                        {
                            Id = 25,
                            Address = "5186 Buckridge Pine, Goyettechester, Jordan",
                            City = "West Barneyburgh",
                            DateOfBirth = new DateTime(2022, 11, 11, 12, 28, 0, 423, DateTimeKind.Local).AddTicks(1038),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Robert",
                            FullName = "Robert Swift",
                            Gender = true,
                            LastName = "Swift",
                            Phone = "(906) 448-5711",
                            Student_code = "StudentiOFB87md"
                        },
                        new
                        {
                            Id = 27,
                            Address = "239 Josue River, Lake Rooseveltmouth, Luxembourg",
                            City = "Lake Myrtle",
                            DateOfBirth = new DateTime(2023, 8, 3, 23, 58, 45, 940, DateTimeKind.Local).AddTicks(8523),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Alison",
                            FullName = "Alison Kuvalis",
                            Gender = true,
                            LastName = "Kuvalis",
                            Phone = "992-957-8483 x64079",
                            Student_code = "StudentAMrqTA6E"
                        },
                        new
                        {
                            Id = 29,
                            Address = "879 O'Connell Land, Franciscaland, Palau",
                            City = "North Bernard",
                            DateOfBirth = new DateTime(2022, 12, 15, 17, 28, 21, 337, DateTimeKind.Local).AddTicks(7731),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Kaia",
                            FullName = "Kaia Tremblay",
                            Gender = false,
                            LastName = "Tremblay",
                            Phone = "(862) 469-3397 x298",
                            Student_code = "Student1BJ2Pswp"
                        },
                        new
                        {
                            Id = 31,
                            Address = "018 Ryleigh Mission, East Durwardshire, Brazil",
                            City = "East Bernicestad",
                            DateOfBirth = new DateTime(2023, 8, 27, 3, 26, 45, 86, DateTimeKind.Local).AddTicks(4636),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Hyman",
                            FullName = "Hyman Daugherty",
                            Gender = false,
                            LastName = "Daugherty",
                            Phone = "(922) 812-5047 x346",
                            Student_code = "StudentVBHFDZzm"
                        },
                        new
                        {
                            Id = 33,
                            Address = "362 Dave Island, South Gerardtown, Mozambique",
                            City = "Isobelstad",
                            DateOfBirth = new DateTime(2023, 7, 23, 18, 10, 4, 337, DateTimeKind.Local).AddTicks(3682),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Abdul",
                            FullName = "Abdul Wisoky",
                            Gender = false,
                            LastName = "Wisoky",
                            Phone = "716-356-2607 x68391",
                            Student_code = "StudentIR0BMYRt"
                        },
                        new
                        {
                            Id = 35,
                            Address = "384 Kunze Alley, North Rico, Norfolk Island",
                            City = "West Mike",
                            DateOfBirth = new DateTime(2023, 8, 24, 2, 17, 34, 967, DateTimeKind.Local).AddTicks(9740),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Hardy",
                            FullName = "Hardy Huels",
                            Gender = true,
                            LastName = "Huels",
                            Phone = "946-998-2992 x843",
                            Student_code = "StudentJHNnRPXN"
                        },
                        new
                        {
                            Id = 37,
                            Address = "55411 Pagac Junctions, Murphyfurt, Niue",
                            City = "Port Jadenton",
                            DateOfBirth = new DateTime(2022, 12, 31, 10, 42, 9, 497, DateTimeKind.Local).AddTicks(3110),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Thea",
                            FullName = "Thea Marvin",
                            Gender = false,
                            LastName = "Marvin",
                            Phone = "1-826-378-2211",
                            Student_code = "StudentpMOQHTtJ"
                        },
                        new
                        {
                            Id = 39,
                            Address = "938 Simonis Skyway, New Terrellburgh, Namibia",
                            City = "North Alainaview",
                            DateOfBirth = new DateTime(2023, 6, 20, 19, 56, 18, 924, DateTimeKind.Local).AddTicks(2427),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Sanford",
                            FullName = "Sanford Collins",
                            Gender = true,
                            LastName = "Collins",
                            Phone = "(454) 806-8631 x109",
                            Student_code = "Student7yKSVBrp"
                        },
                        new
                        {
                            Id = 41,
                            Address = "9188 Alvah Union, Miracleport, Antigua and Barbuda",
                            City = "Aaliyahchester",
                            DateOfBirth = new DateTime(2023, 6, 20, 18, 30, 10, 541, DateTimeKind.Local).AddTicks(1248),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Victoria",
                            FullName = "Victoria Koepp",
                            Gender = false,
                            LastName = "Koepp",
                            Phone = "927.307.9854 x09456",
                            Student_code = "StudentDusEFLix"
                        },
                        new
                        {
                            Id = 43,
                            Address = "89980 Mallie Tunnel, South Aishafort, Gabon",
                            City = "Lemkeburgh",
                            DateOfBirth = new DateTime(2022, 10, 17, 1, 43, 27, 488, DateTimeKind.Local).AddTicks(6414),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Urban",
                            FullName = "Urban Bartell",
                            Gender = true,
                            LastName = "Bartell",
                            Phone = "288-451-6428 x534",
                            Student_code = "StudentfvdzM33Q"
                        },
                        new
                        {
                            Id = 45,
                            Address = "523 Sandra Brooks, Lake Zacheryland, Gambia",
                            City = "West Juliestad",
                            DateOfBirth = new DateTime(2023, 8, 25, 16, 8, 49, 968, DateTimeKind.Local).AddTicks(8995),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Dayne",
                            FullName = "Dayne Jast",
                            Gender = false,
                            LastName = "Jast",
                            Phone = "(739) 970-9813 x298",
                            Student_code = "StudentKP5WgHhP"
                        },
                        new
                        {
                            Id = 47,
                            Address = "741 Bosco Field, Aileenmouth, Maldives",
                            City = "Adamsbury",
                            DateOfBirth = new DateTime(2023, 6, 18, 1, 58, 16, 529, DateTimeKind.Local).AddTicks(2957),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Xavier",
                            FullName = "Xavier Wolff",
                            Gender = false,
                            LastName = "Wolff",
                            Phone = "564-218-2108",
                            Student_code = "StudentiC1xmrM9"
                        },
                        new
                        {
                            Id = 49,
                            Address = "202 Kenyon Greens, Simonisstad, Montserrat",
                            City = "Stiedemannmouth",
                            DateOfBirth = new DateTime(2023, 2, 10, 9, 10, 27, 892, DateTimeKind.Local).AddTicks(2623),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Ashtyn",
                            FullName = "Ashtyn Ernser",
                            Gender = false,
                            LastName = "Ernser",
                            Phone = "1-280-667-4404 x7249",
                            Student_code = "StudentAiATaMns"
                        },
                        new
                        {
                            Id = 51,
                            Address = "372 Hand Rest, East Tyshawnfort, Switzerland",
                            City = "East Ellsworthborough",
                            DateOfBirth = new DateTime(2023, 7, 11, 1, 48, 52, 634, DateTimeKind.Local).AddTicks(3881),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Joanie",
                            FullName = "Joanie Bradtke",
                            Gender = true,
                            LastName = "Bradtke",
                            Phone = "975.650.9558 x81148",
                            Student_code = "StudentZ2wLrpgT"
                        },
                        new
                        {
                            Id = 53,
                            Address = "2859 Judah Island, Mariloufurt, Cayman Islands",
                            City = "Jasperfort",
                            DateOfBirth = new DateTime(2023, 7, 1, 17, 26, 17, 547, DateTimeKind.Local).AddTicks(9152),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Emerson",
                            FullName = "Emerson Koch",
                            Gender = false,
                            LastName = "Koch",
                            Phone = "514-591-0143 x8879",
                            Student_code = "Studentl1KypmAv"
                        },
                        new
                        {
                            Id = 55,
                            Address = "46763 McDermott Alley, Roweton, Zambia",
                            City = "Reynoldsside",
                            DateOfBirth = new DateTime(2023, 5, 4, 5, 23, 33, 580, DateTimeKind.Local).AddTicks(1607),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Jamel",
                            FullName = "Jamel Strosin",
                            Gender = false,
                            LastName = "Strosin",
                            Phone = "1-238-353-7417 x99098",
                            Student_code = "StudentrmtLZvJc"
                        },
                        new
                        {
                            Id = 57,
                            Address = "43003 Berge Manor, South Ashleigh, Cook Islands",
                            City = "Port Conradfort",
                            DateOfBirth = new DateTime(2023, 4, 25, 12, 36, 38, 172, DateTimeKind.Local).AddTicks(49),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Russel",
                            FullName = "Russel Mayer",
                            Gender = true,
                            LastName = "Mayer",
                            Phone = "(307) 634-5826",
                            Student_code = "Studentay4MJ1BE"
                        },
                        new
                        {
                            Id = 59,
                            Address = "4360 Tito Parks, Cullenview, Morocco",
                            City = "Runtemouth",
                            DateOfBirth = new DateTime(2023, 5, 27, 3, 27, 38, 644, DateTimeKind.Local).AddTicks(9028),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Melany",
                            FullName = "Melany Berge",
                            Gender = false,
                            LastName = "Berge",
                            Phone = "887-908-4464",
                            Student_code = "StudentyoPbij1M"
                        },
                        new
                        {
                            Id = 61,
                            Address = "28927 Jan Expressway, Eliseport, Italy",
                            City = "Louveniastad",
                            DateOfBirth = new DateTime(2023, 2, 17, 16, 13, 9, 264, DateTimeKind.Local).AddTicks(8237),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Nora",
                            FullName = "Nora Reynolds",
                            Gender = false,
                            LastName = "Reynolds",
                            Phone = "1-693-291-8325",
                            Student_code = "StudentMuFyzYkc"
                        },
                        new
                        {
                            Id = 63,
                            Address = "075 Daryl Ranch, South Maryamborough, Mongolia",
                            City = "Reynoldbury",
                            DateOfBirth = new DateTime(2023, 2, 11, 16, 21, 45, 649, DateTimeKind.Local).AddTicks(5899),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Ilene",
                            FullName = "Ilene Roberts",
                            Gender = false,
                            LastName = "Roberts",
                            Phone = "341.922.4478 x717",
                            Student_code = "Student48G3PCo8"
                        },
                        new
                        {
                            Id = 65,
                            Address = "3769 Toy Wells, Gaylordville, Mozambique",
                            City = "Stokesberg",
                            DateOfBirth = new DateTime(2023, 8, 30, 10, 40, 22, 273, DateTimeKind.Local).AddTicks(139),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Edison",
                            FullName = "Edison D'Amore",
                            Gender = true,
                            LastName = "D'Amore",
                            Phone = "(736) 268-5030",
                            Student_code = "StudentxnDBEd2u"
                        },
                        new
                        {
                            Id = 67,
                            Address = "63278 Lang Harbor, South Daxville, Nauru",
                            City = "North Nya",
                            DateOfBirth = new DateTime(2023, 8, 12, 2, 11, 22, 432, DateTimeKind.Local).AddTicks(5943),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Annetta",
                            FullName = "Annetta Quitzon",
                            Gender = false,
                            LastName = "Quitzon",
                            Phone = "1-203-421-4487",
                            Student_code = "StudentF66LsXgJ"
                        },
                        new
                        {
                            Id = 69,
                            Address = "37212 Sipes Centers, Langworthland, Somalia",
                            City = "New Miastad",
                            DateOfBirth = new DateTime(2022, 12, 12, 2, 21, 32, 511, DateTimeKind.Local).AddTicks(9264),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Yessenia",
                            FullName = "Yessenia Gleichner",
                            Gender = false,
                            LastName = "Gleichner",
                            Phone = "740-712-5914 x2266",
                            Student_code = "StudentsWEMjcb0"
                        },
                        new
                        {
                            Id = 71,
                            Address = "97800 Rhett Plaza, Port Deltaland, Guyana",
                            City = "Brownborough",
                            DateOfBirth = new DateTime(2023, 5, 14, 10, 21, 25, 8, DateTimeKind.Local).AddTicks(2110),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Nathen",
                            FullName = "Nathen Mayer",
                            Gender = false,
                            LastName = "Mayer",
                            Phone = "1-779-390-8301",
                            Student_code = "Studentth5XDpVQ"
                        },
                        new
                        {
                            Id = 73,
                            Address = "02124 Kautzer Springs, Mannfort, Poland",
                            City = "Pollichchester",
                            DateOfBirth = new DateTime(2023, 1, 13, 0, 4, 46, 975, DateTimeKind.Local).AddTicks(9801),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Darren",
                            FullName = "Darren Spencer",
                            Gender = false,
                            LastName = "Spencer",
                            Phone = "(864) 646-1109 x83330",
                            Student_code = "Student7Gpl7vjA"
                        },
                        new
                        {
                            Id = 75,
                            Address = "736 Raynor Street, Gorczanyburgh, Brazil",
                            City = "Keeblerborough",
                            DateOfBirth = new DateTime(2023, 4, 15, 20, 19, 42, 108, DateTimeKind.Local).AddTicks(2650),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Emmet",
                            FullName = "Emmet Metz",
                            Gender = true,
                            LastName = "Metz",
                            Phone = "413.816.9210 x7469",
                            Student_code = "StudentITJpgh9H"
                        },
                        new
                        {
                            Id = 77,
                            Address = "83060 O'Hara Corner, Dickinsonberg, Australia",
                            City = "North Arielle",
                            DateOfBirth = new DateTime(2023, 8, 12, 8, 25, 38, 399, DateTimeKind.Local).AddTicks(2787),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Leland",
                            FullName = "Leland Bogan",
                            Gender = false,
                            LastName = "Bogan",
                            Phone = "378-332-6320 x5225",
                            Student_code = "Studentn7qQ5YKB"
                        },
                        new
                        {
                            Id = 79,
                            Address = "78068 Estell Gateway, North Kendrick, Rwanda",
                            City = "Lake Luzland",
                            DateOfBirth = new DateTime(2023, 9, 5, 23, 44, 56, 364, DateTimeKind.Local).AddTicks(9874),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Otha",
                            FullName = "Otha Flatley",
                            Gender = false,
                            LastName = "Flatley",
                            Phone = "(883) 973-6488 x46922",
                            Student_code = "StudentzGWwuQ2U"
                        },
                        new
                        {
                            Id = 81,
                            Address = "039 Allene Groves, Gutmannborough, Belgium",
                            City = "Haleymouth",
                            DateOfBirth = new DateTime(2023, 2, 3, 10, 27, 37, 593, DateTimeKind.Local).AddTicks(2290),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Flavio",
                            FullName = "Flavio Wisoky",
                            Gender = false,
                            LastName = "Wisoky",
                            Phone = "510.762.8845",
                            Student_code = "StudentHmkzcnPh"
                        },
                        new
                        {
                            Id = 83,
                            Address = "99868 Abbott Roads, Khalilmouth, Greece",
                            City = "Toychester",
                            DateOfBirth = new DateTime(2022, 10, 15, 23, 18, 47, 729, DateTimeKind.Local).AddTicks(2319),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Anais",
                            FullName = "Anais Dibbert",
                            Gender = true,
                            LastName = "Dibbert",
                            Phone = "1-705-492-4526",
                            Student_code = "StudentKaGD923z"
                        },
                        new
                        {
                            Id = 85,
                            Address = "2226 Henderson Via, Gulgowskichester, Svalbard & Jan Mayen Islands",
                            City = "Muellerfort",
                            DateOfBirth = new DateTime(2023, 1, 3, 1, 11, 47, 974, DateTimeKind.Local).AddTicks(246),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Jayden",
                            FullName = "Jayden Hane",
                            Gender = true,
                            LastName = "Hane",
                            Phone = "783-264-1641 x42932",
                            Student_code = "StudentkAj43HfT"
                        },
                        new
                        {
                            Id = 87,
                            Address = "57868 Eleanora Rue, Lake Sageborough, Micronesia",
                            City = "North Elmer",
                            DateOfBirth = new DateTime(2022, 12, 2, 17, 28, 40, 429, DateTimeKind.Local).AddTicks(4558),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Nakia",
                            FullName = "Nakia Smith",
                            Gender = true,
                            LastName = "Smith",
                            Phone = "246-522-9853",
                            Student_code = "StudenttDNbQUjp"
                        },
                        new
                        {
                            Id = 89,
                            Address = "0933 Block Radial, Kiaraport, Canada",
                            City = "New Jalynview",
                            DateOfBirth = new DateTime(2023, 4, 9, 21, 37, 57, 52, DateTimeKind.Local).AddTicks(6758),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Jacquelyn",
                            FullName = "Jacquelyn Trantow",
                            Gender = true,
                            LastName = "Trantow",
                            Phone = "574-607-2029 x9855",
                            Student_code = "StudentDCyMwJbd"
                        },
                        new
                        {
                            Id = 91,
                            Address = "659 Moore Valleys, Emilieborough, Nigeria",
                            City = "East Mossie",
                            DateOfBirth = new DateTime(2022, 11, 2, 5, 54, 58, 263, DateTimeKind.Local).AddTicks(2231),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Icie",
                            FullName = "Icie Hintz",
                            Gender = false,
                            LastName = "Hintz",
                            Phone = "259.419.9875",
                            Student_code = "StudenttURNrmoM"
                        },
                        new
                        {
                            Id = 93,
                            Address = "2571 Maximilian Squares, East Eleazarmouth, Dominican Republic",
                            City = "Jackieshire",
                            DateOfBirth = new DateTime(2023, 7, 5, 6, 9, 32, 583, DateTimeKind.Local).AddTicks(7233),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Rose",
                            FullName = "Rose Shanahan",
                            Gender = false,
                            LastName = "Shanahan",
                            Phone = "(630) 349-9482 x5251",
                            Student_code = "StudentBNt8ssM2"
                        },
                        new
                        {
                            Id = 95,
                            Address = "43211 Cronin Ports, Port Marastad, Marshall Islands",
                            City = "Ahmadchester",
                            DateOfBirth = new DateTime(2023, 5, 28, 21, 50, 14, 896, DateTimeKind.Local).AddTicks(9000),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Dina",
                            FullName = "Dina Wehner",
                            Gender = false,
                            LastName = "Wehner",
                            Phone = "640.970.1812",
                            Student_code = "StudentDHqWA8Z4"
                        },
                        new
                        {
                            Id = 97,
                            Address = "74302 Elisa Garden, Farrellton, Guinea",
                            City = "Gulgowskifurt",
                            DateOfBirth = new DateTime(2023, 1, 4, 6, 23, 29, 859, DateTimeKind.Local).AddTicks(385),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Tracey",
                            FullName = "Tracey Ward",
                            Gender = false,
                            LastName = "Ward",
                            Phone = "1-436-924-8648 x72860",
                            Student_code = "Student7P3sXX7W"
                        },
                        new
                        {
                            Id = 99,
                            Address = "809 Alan Terrace, South Jennyfer, Cameroon",
                            City = "West Zechariahfurt",
                            DateOfBirth = new DateTime(2023, 9, 28, 10, 37, 38, 606, DateTimeKind.Local).AddTicks(5265),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Webster",
                            FullName = "Webster Funk",
                            Gender = false,
                            LastName = "Funk",
                            Phone = "(401) 847-9946",
                            Student_code = "Student48CZhNRm"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.HasOne("LibraryModels.UserConn", "userConn")
                        .WithOne("Notifications")
                        .HasForeignKey("LibraryModels.Notifications", "userConnId");

                    b.Navigation("userConn");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.HasOne("LibraryModels.Users", "Users")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userConn");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
