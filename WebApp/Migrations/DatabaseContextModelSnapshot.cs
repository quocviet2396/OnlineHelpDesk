// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsID");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("userConnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbNotification");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotiId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotiId")
                        .IsUnique()
                        .HasFilter("[NotiId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserConn");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "TltlHjo9",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$HK4W3uiVhlY0NBpN.OFI2esPu0HhyNZm9Uq0tm.5JgiYiUzbX/Ze2",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "LG2wNfRq",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$JbXs7pQahF/l5Dc0n.H3NO79KgnrBhPR1ryOTJlA15TKDTiQxsEGG",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "5HtjkBPs",
                            Email = "user@gmail.com",
                            Password = "$2a$11$4hUV5qmtJfTTjJB234Tq8e87gPsk2EJ79Mr333VMHkUrNbVum7PvO",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "71853 Kilback Mill, Rasheedborough, Tuvalu",
                            City = "West Moshe",
                            DateOfBirth = new DateTime(2022, 11, 6, 22, 4, 21, 838, DateTimeKind.Local).AddTicks(949),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Brittany",
                            FullName = "Brittany Blick",
                            Gender = true,
                            LastName = "Blick",
                            Phone = "(441) 357-8217",
                            Student_code = "StudentunKMULpU"
                        },
                        new
                        {
                            Id = 3,
                            Address = "65180 Talia Fall, Lake Annechester, Andorra",
                            City = "Fayfort",
                            DateOfBirth = new DateTime(2023, 7, 8, 3, 52, 29, 928, DateTimeKind.Local).AddTicks(6811),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Kamron",
                            FullName = "Kamron Kris",
                            Gender = true,
                            LastName = "Kris",
                            Phone = "339.763.7525 x8345",
                            Student_code = "StudentHuqYW93J"
                        },
                        new
                        {
                            Id = 5,
                            Address = "884 Aryanna Falls, Reganville, Antigua and Barbuda",
                            City = "Port Yvonneville",
                            DateOfBirth = new DateTime(2023, 1, 7, 12, 51, 19, 390, DateTimeKind.Local).AddTicks(1748),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Trace",
                            FullName = "Trace Ledner",
                            Gender = true,
                            LastName = "Ledner",
                            Phone = "(268) 915-2904",
                            Student_code = "StudentCs1Lbc7C"
                        },
                        new
                        {
                            Id = 7,
                            Address = "135 Mattie Walks, West Alberthafurt, Panama",
                            City = "Port Paul",
                            DateOfBirth = new DateTime(2023, 4, 28, 8, 11, 31, 452, DateTimeKind.Local).AddTicks(3578),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Johanna",
                            FullName = "Johanna Cassin",
                            Gender = false,
                            LastName = "Cassin",
                            Phone = "1-881-597-9379",
                            Student_code = "StudentBoZvqTte"
                        },
                        new
                        {
                            Id = 9,
                            Address = "5572 Ziemann Drive, Baumbachchester, Lao People's Democratic Republic",
                            City = "Port Marcus",
                            DateOfBirth = new DateTime(2023, 7, 11, 11, 17, 54, 167, DateTimeKind.Local).AddTicks(8466),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Krystina",
                            FullName = "Krystina Buckridge",
                            Gender = true,
                            LastName = "Buckridge",
                            Phone = "460-447-5533",
                            Student_code = "StudentoYpdphKV"
                        },
                        new
                        {
                            Id = 11,
                            Address = "375 Adriel Branch, Eleazarbury, Niger",
                            City = "West Guadalupe",
                            DateOfBirth = new DateTime(2023, 3, 15, 7, 14, 19, 523, DateTimeKind.Local).AddTicks(3477),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Jennie",
                            FullName = "Jennie Schaefer",
                            Gender = true,
                            LastName = "Schaefer",
                            Phone = "1-413-998-9989 x14951",
                            Student_code = "StudentAsVyr4De"
                        },
                        new
                        {
                            Id = 13,
                            Address = "8330 Altenwerth Trail, Pedroburgh, Argentina",
                            City = "Haleyberg",
                            DateOfBirth = new DateTime(2023, 6, 17, 23, 29, 11, 133, DateTimeKind.Local).AddTicks(9222),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Cortez",
                            FullName = "Cortez Walker",
                            Gender = false,
                            LastName = "Walker",
                            Phone = "370.447.6102 x3838",
                            Student_code = "Student4EQU1diW"
                        },
                        new
                        {
                            Id = 15,
                            Address = "486 Wisozk Canyon, West Agustin, Saint Martin",
                            City = "Turcotteburgh",
                            DateOfBirth = new DateTime(2023, 3, 4, 22, 2, 18, 252, DateTimeKind.Local).AddTicks(2610),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Cade",
                            FullName = "Cade Sawayn",
                            Gender = false,
                            LastName = "Sawayn",
                            Phone = "1-516-238-9352",
                            Student_code = "Studenty3T0lOoA"
                        },
                        new
                        {
                            Id = 17,
                            Address = "40014 Wunsch Mill, Brigitteshire, Thailand",
                            City = "Kylabury",
                            DateOfBirth = new DateTime(2023, 3, 17, 12, 15, 43, 285, DateTimeKind.Local).AddTicks(6477),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Pierce",
                            FullName = "Pierce Gusikowski",
                            Gender = true,
                            LastName = "Gusikowski",
                            Phone = "879.539.4512 x20355",
                            Student_code = "StudentdRnlyHXK"
                        },
                        new
                        {
                            Id = 19,
                            Address = "707 Korey Spring, West Salvadorton, Micronesia",
                            City = "Cassinmouth",
                            DateOfBirth = new DateTime(2023, 8, 5, 22, 22, 37, 55, DateTimeKind.Local).AddTicks(9685),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Margaret",
                            FullName = "Margaret Considine",
                            Gender = true,
                            LastName = "Considine",
                            Phone = "1-684-446-4258 x283",
                            Student_code = "StudentB1Q8ibHW"
                        },
                        new
                        {
                            Id = 21,
                            Address = "0797 Tavares Spring, North Gilbertoburgh, Gibraltar",
                            City = "North Vallie",
                            DateOfBirth = new DateTime(2022, 10, 13, 4, 47, 32, 802, DateTimeKind.Local).AddTicks(659),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Camden",
                            FullName = "Camden Langosh",
                            Gender = true,
                            LastName = "Langosh",
                            Phone = "(644) 508-7720 x66592",
                            Student_code = "Studentij0CIsEK"
                        },
                        new
                        {
                            Id = 23,
                            Address = "77317 Nathaniel Union, Jarvisfort, Ecuador",
                            City = "Edisonborough",
                            DateOfBirth = new DateTime(2023, 1, 22, 23, 1, 58, 409, DateTimeKind.Local).AddTicks(9952),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Craig",
                            FullName = "Craig Wolff",
                            Gender = false,
                            LastName = "Wolff",
                            Phone = "(388) 480-4975 x6619",
                            Student_code = "StudentExVUJDil"
                        },
                        new
                        {
                            Id = 25,
                            Address = "9318 Rudolph Vista, South Abdiel, Saint Kitts and Nevis",
                            City = "New Goldaton",
                            DateOfBirth = new DateTime(2023, 2, 24, 10, 29, 38, 472, DateTimeKind.Local).AddTicks(1441),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Mathias",
                            FullName = "Mathias Howell",
                            Gender = false,
                            LastName = "Howell",
                            Phone = "362.323.6461",
                            Student_code = "StudentZx9SWMkH"
                        },
                        new
                        {
                            Id = 27,
                            Address = "48322 Rempel Haven, Klockoland, American Samoa",
                            City = "East Mekhi",
                            DateOfBirth = new DateTime(2023, 6, 8, 16, 15, 27, 223, DateTimeKind.Local).AddTicks(8863),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Jarrod",
                            FullName = "Jarrod Streich",
                            Gender = true,
                            LastName = "Streich",
                            Phone = "981-739-0764 x47920",
                            Student_code = "StudentMKUo5c0G"
                        },
                        new
                        {
                            Id = 29,
                            Address = "9161 Turner Springs, New Josephville, El Salvador",
                            City = "Haleyside",
                            DateOfBirth = new DateTime(2023, 4, 12, 19, 20, 2, 287, DateTimeKind.Local).AddTicks(2450),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Cristopher",
                            FullName = "Cristopher Batz",
                            Gender = false,
                            LastName = "Batz",
                            Phone = "(860) 954-2018",
                            Student_code = "StudentO3azwsnJ"
                        },
                        new
                        {
                            Id = 31,
                            Address = "07667 Kshlerin Villages, New Obieport, Latvia",
                            City = "South Nobleside",
                            DateOfBirth = new DateTime(2022, 12, 9, 14, 33, 52, 387, DateTimeKind.Local).AddTicks(2821),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Madge",
                            FullName = "Madge Mann",
                            Gender = true,
                            LastName = "Mann",
                            Phone = "454.808.4914 x364",
                            Student_code = "StudentwhHl7OVI"
                        },
                        new
                        {
                            Id = 33,
                            Address = "77335 Ethel Gardens, West Myaton, Western Sahara",
                            City = "Lakinshire",
                            DateOfBirth = new DateTime(2023, 5, 20, 5, 10, 27, 758, DateTimeKind.Local).AddTicks(6479),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Rory",
                            FullName = "Rory Dietrich",
                            Gender = false,
                            LastName = "Dietrich",
                            Phone = "338.260.5405 x2425",
                            Student_code = "StudentS17TxptD"
                        },
                        new
                        {
                            Id = 35,
                            Address = "6917 White Summit, Santiagostad, Iran",
                            City = "Andersonport",
                            DateOfBirth = new DateTime(2023, 8, 23, 14, 46, 19, 524, DateTimeKind.Local).AddTicks(8730),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Maia",
                            FullName = "Maia Davis",
                            Gender = false,
                            LastName = "Davis",
                            Phone = "952-371-6697",
                            Student_code = "StudentmVNxU84v"
                        },
                        new
                        {
                            Id = 37,
                            Address = "17246 Hagenes Harbor, Mariannaton, Brunei Darussalam",
                            City = "Starkfort",
                            DateOfBirth = new DateTime(2023, 1, 13, 9, 55, 15, 111, DateTimeKind.Local).AddTicks(7879),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Karlee",
                            FullName = "Karlee Beahan",
                            Gender = false,
                            LastName = "Beahan",
                            Phone = "(589) 894-7800 x16357",
                            Student_code = "StudentGQsyzafp"
                        },
                        new
                        {
                            Id = 39,
                            Address = "4867 Prosacco Junctions, Breitenbergville, French Guiana",
                            City = "Samsonburgh",
                            DateOfBirth = new DateTime(2022, 10, 25, 15, 25, 11, 432, DateTimeKind.Local).AddTicks(2748),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Agnes",
                            FullName = "Agnes Ernser",
                            Gender = false,
                            LastName = "Ernser",
                            Phone = "465.913.2592",
                            Student_code = "StudentDRCeZZqV"
                        },
                        new
                        {
                            Id = 41,
                            Address = "39494 Balistreri Key, Priceside, Sweden",
                            City = "West Larissa",
                            DateOfBirth = new DateTime(2023, 3, 5, 21, 42, 17, 653, DateTimeKind.Local).AddTicks(6066),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Erich",
                            FullName = "Erich Barton",
                            Gender = true,
                            LastName = "Barton",
                            Phone = "1-623-719-3701",
                            Student_code = "StudentkDqdN9z7"
                        },
                        new
                        {
                            Id = 43,
                            Address = "8853 Blanche Walks, West Jaysonfort, Mayotte",
                            City = "Lake Margetown",
                            DateOfBirth = new DateTime(2022, 11, 5, 13, 8, 22, 335, DateTimeKind.Local).AddTicks(9593),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Beth",
                            FullName = "Beth Wehner",
                            Gender = true,
                            LastName = "Wehner",
                            Phone = "1-830-661-1523 x2606",
                            Student_code = "StudentmtMZQ930"
                        },
                        new
                        {
                            Id = 45,
                            Address = "76639 Herzog Greens, Lubowitzside, Antigua and Barbuda",
                            City = "North Dudley",
                            DateOfBirth = new DateTime(2022, 11, 24, 2, 19, 15, 437, DateTimeKind.Local).AddTicks(427),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Edison",
                            FullName = "Edison Klein",
                            Gender = true,
                            LastName = "Klein",
                            Phone = "(951) 710-2207",
                            Student_code = "StudentQKILcBie"
                        },
                        new
                        {
                            Id = 47,
                            Address = "04860 Cole Roads, West Cletaborough, Saint Kitts and Nevis",
                            City = "Alfredabury",
                            DateOfBirth = new DateTime(2023, 9, 26, 18, 57, 32, 412, DateTimeKind.Local).AddTicks(9922),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Deangelo",
                            FullName = "Deangelo Morissette",
                            Gender = true,
                            LastName = "Morissette",
                            Phone = "(720) 524-9965 x56820",
                            Student_code = "StudentmcJvAAan"
                        },
                        new
                        {
                            Id = 49,
                            Address = "82211 Bechtelar Terrace, Gaylemouth, Qatar",
                            City = "Julioland",
                            DateOfBirth = new DateTime(2023, 3, 10, 9, 6, 16, 38, DateTimeKind.Local).AddTicks(2008),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Justice",
                            FullName = "Justice Kuvalis",
                            Gender = true,
                            LastName = "Kuvalis",
                            Phone = "742-665-2227 x894",
                            Student_code = "Studentxnh77OI1"
                        },
                        new
                        {
                            Id = 51,
                            Address = "32997 Jacobi Inlet, Kovacekfort, Guinea-Bissau",
                            City = "Kylermouth",
                            DateOfBirth = new DateTime(2023, 2, 16, 0, 52, 8, 597, DateTimeKind.Local).AddTicks(5924),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "April",
                            FullName = "April Cummerata",
                            Gender = false,
                            LastName = "Cummerata",
                            Phone = "463.738.9492",
                            Student_code = "StudentwSnC3nDs"
                        },
                        new
                        {
                            Id = 53,
                            Address = "906 Bayer Avenue, Russelhaven, Benin",
                            City = "Stiedemannville",
                            DateOfBirth = new DateTime(2022, 10, 29, 20, 11, 51, 262, DateTimeKind.Local).AddTicks(5044),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Israel",
                            FullName = "Israel Bashirian",
                            Gender = true,
                            LastName = "Bashirian",
                            Phone = "734-456-6729 x2892",
                            Student_code = "Student7unLMrBA"
                        },
                        new
                        {
                            Id = 55,
                            Address = "208 Heathcote Expressway, West Tyree, Spain",
                            City = "New Mikel",
                            DateOfBirth = new DateTime(2022, 11, 10, 17, 4, 6, 995, DateTimeKind.Local).AddTicks(7192),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Charlene",
                            FullName = "Charlene Klocko",
                            Gender = false,
                            LastName = "Klocko",
                            Phone = "(439) 409-0114",
                            Student_code = "StudentKW27xq6U"
                        },
                        new
                        {
                            Id = 57,
                            Address = "7562 Prosacco Pass, New Tiana, Kyrgyz Republic",
                            City = "Balistrerifort",
                            DateOfBirth = new DateTime(2023, 7, 26, 13, 54, 33, 403, DateTimeKind.Local).AddTicks(4451),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Leta",
                            FullName = "Leta Cruickshank",
                            Gender = false,
                            LastName = "Cruickshank",
                            Phone = "360.601.0012",
                            Student_code = "StudentsXsPcayR"
                        },
                        new
                        {
                            Id = 59,
                            Address = "685 Giovanni Wall, Edythborough, Morocco",
                            City = "New Terranceland",
                            DateOfBirth = new DateTime(2023, 6, 30, 17, 1, 45, 742, DateTimeKind.Local).AddTicks(3097),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Katharina",
                            FullName = "Katharina Bogisich",
                            Gender = true,
                            LastName = "Bogisich",
                            Phone = "(893) 757-8520 x336",
                            Student_code = "StudentPZUkaN74"
                        },
                        new
                        {
                            Id = 61,
                            Address = "239 Leffler Bypass, New Kayden, Northern Mariana Islands",
                            City = "North Marilie",
                            DateOfBirth = new DateTime(2023, 7, 16, 6, 0, 44, 693, DateTimeKind.Local).AddTicks(7123),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Cortez",
                            FullName = "Cortez Dickens",
                            Gender = true,
                            LastName = "Dickens",
                            Phone = "1-672-987-5016 x0101",
                            Student_code = "StudentP2ADve1N"
                        },
                        new
                        {
                            Id = 63,
                            Address = "4041 Boyle Walks, North Chelsieview, Mongolia",
                            City = "Hauckshire",
                            DateOfBirth = new DateTime(2022, 10, 7, 4, 8, 11, 924, DateTimeKind.Local).AddTicks(3111),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Gabe",
                            FullName = "Gabe Dooley",
                            Gender = true,
                            LastName = "Dooley",
                            Phone = "1-471-737-0650 x8450",
                            Student_code = "StudentqKX0KO6x"
                        },
                        new
                        {
                            Id = 65,
                            Address = "762 Jessie Trail, New Erwinview, Lithuania",
                            City = "Conradmouth",
                            DateOfBirth = new DateTime(2023, 5, 6, 4, 22, 57, 57, DateTimeKind.Local).AddTicks(8899),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Allan",
                            FullName = "Allan Kuhlman",
                            Gender = false,
                            LastName = "Kuhlman",
                            Phone = "1-914-466-2378",
                            Student_code = "StudentndSgakxU"
                        },
                        new
                        {
                            Id = 67,
                            Address = "7405 Pollich Turnpike, Parisianshire, Botswana",
                            City = "Auerhaven",
                            DateOfBirth = new DateTime(2023, 9, 16, 21, 11, 34, 151, DateTimeKind.Local).AddTicks(5437),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Sydnie",
                            FullName = "Sydnie Stoltenberg",
                            Gender = true,
                            LastName = "Stoltenberg",
                            Phone = "775.500.9424 x78459",
                            Student_code = "StudentF0eexv4i"
                        },
                        new
                        {
                            Id = 69,
                            Address = "89298 Haley Trafficway, New Everette, Barbados",
                            City = "Schaefermouth",
                            DateOfBirth = new DateTime(2023, 4, 6, 0, 19, 47, 361, DateTimeKind.Local).AddTicks(103),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Nicolas",
                            FullName = "Nicolas Yundt",
                            Gender = true,
                            LastName = "Yundt",
                            Phone = "705.757.7824 x46311",
                            Student_code = "StudentWuLfRj3G"
                        },
                        new
                        {
                            Id = 71,
                            Address = "855 Kelsie Groves, Port Alisonfurt, Maldives",
                            City = "Augustachester",
                            DateOfBirth = new DateTime(2023, 1, 19, 13, 9, 57, 293, DateTimeKind.Local).AddTicks(9400),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Alana",
                            FullName = "Alana Yundt",
                            Gender = false,
                            LastName = "Yundt",
                            Phone = "290.519.6851 x94915",
                            Student_code = "Student9Qpw2Eyn"
                        },
                        new
                        {
                            Id = 73,
                            Address = "690 Margie Fields, Emmerichborough, Mexico",
                            City = "West Danielle",
                            DateOfBirth = new DateTime(2023, 4, 20, 20, 3, 48, 919, DateTimeKind.Local).AddTicks(1343),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Marvin",
                            FullName = "Marvin Torp",
                            Gender = true,
                            LastName = "Torp",
                            Phone = "784-610-9979 x172",
                            Student_code = "StudenthXA8287n"
                        },
                        new
                        {
                            Id = 75,
                            Address = "9452 Mable Motorway, South Alfton, Togo",
                            City = "Lillieshire",
                            DateOfBirth = new DateTime(2022, 11, 3, 2, 45, 6, 109, DateTimeKind.Local).AddTicks(9691),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Guadalupe",
                            FullName = "Guadalupe Cruickshank",
                            Gender = false,
                            LastName = "Cruickshank",
                            Phone = "555-476-0371 x4997",
                            Student_code = "StudentlUXfLRjl"
                        },
                        new
                        {
                            Id = 77,
                            Address = "93419 Felipa Haven, Adrianborough, Benin",
                            City = "South Sidney",
                            DateOfBirth = new DateTime(2023, 4, 7, 18, 32, 4, 82, DateTimeKind.Local).AddTicks(8550),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Noah",
                            FullName = "Noah Bosco",
                            Gender = true,
                            LastName = "Bosco",
                            Phone = "(563) 590-1880 x742",
                            Student_code = "StudentXm1QlJVe"
                        },
                        new
                        {
                            Id = 79,
                            Address = "849 Kay Parks, Dorcasside, Netherlands",
                            City = "Hettingerfort",
                            DateOfBirth = new DateTime(2022, 11, 6, 22, 47, 42, 60, DateTimeKind.Local).AddTicks(2030),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Nikolas",
                            FullName = "Nikolas Morar",
                            Gender = false,
                            LastName = "Morar",
                            Phone = "1-305-433-7954 x5046",
                            Student_code = "StudentbIeO6rrE"
                        },
                        new
                        {
                            Id = 81,
                            Address = "599 Tressie Crescent, Lake Rahul, Guinea",
                            City = "Bernardshire",
                            DateOfBirth = new DateTime(2023, 3, 24, 21, 10, 57, 380, DateTimeKind.Local).AddTicks(7520),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Zelma",
                            FullName = "Zelma Skiles",
                            Gender = true,
                            LastName = "Skiles",
                            Phone = "(668) 659-5163",
                            Student_code = "StudentVVoZ6u0Q"
                        },
                        new
                        {
                            Id = 83,
                            Address = "38516 Vivianne Landing, West Breanneton, Burundi",
                            City = "South Florence",
                            DateOfBirth = new DateTime(2023, 9, 22, 9, 0, 45, 989, DateTimeKind.Local).AddTicks(4406),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Dion",
                            FullName = "Dion Rolfson",
                            Gender = false,
                            LastName = "Rolfson",
                            Phone = "(734) 420-1648",
                            Student_code = "Studentf3kLJztb"
                        },
                        new
                        {
                            Id = 85,
                            Address = "6758 Kreiger Valley, Wintheiserberg, Bolivia",
                            City = "Schimmeltown",
                            DateOfBirth = new DateTime(2023, 5, 3, 2, 47, 41, 346, DateTimeKind.Local).AddTicks(9556),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Dax",
                            FullName = "Dax Hermiston",
                            Gender = true,
                            LastName = "Hermiston",
                            Phone = "280.946.0547 x10336",
                            Student_code = "Studenta2C2K2H7"
                        },
                        new
                        {
                            Id = 87,
                            Address = "9120 Courtney Road, Rogahnfurt, Costa Rica",
                            City = "Stromanshire",
                            DateOfBirth = new DateTime(2023, 8, 17, 15, 11, 36, 47, DateTimeKind.Local).AddTicks(2729),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Derick",
                            FullName = "Derick Gerhold",
                            Gender = true,
                            LastName = "Gerhold",
                            Phone = "(534) 864-3166 x64006",
                            Student_code = "StudentidYyYA66"
                        },
                        new
                        {
                            Id = 89,
                            Address = "91776 Aisha Stravenue, Port Kamille, Cocos (Keeling) Islands",
                            City = "New Clemensmouth",
                            DateOfBirth = new DateTime(2023, 8, 25, 22, 13, 43, 391, DateTimeKind.Local).AddTicks(1839),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Dane",
                            FullName = "Dane Blanda",
                            Gender = true,
                            LastName = "Blanda",
                            Phone = "905-938-2409 x787",
                            Student_code = "StudentzZOPgft7"
                        },
                        new
                        {
                            Id = 91,
                            Address = "64884 Oberbrunner Station, New Katharinachester, Cayman Islands",
                            City = "Starkview",
                            DateOfBirth = new DateTime(2022, 10, 21, 7, 44, 11, 92, DateTimeKind.Local).AddTicks(7837),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Gonzalo",
                            FullName = "Gonzalo Prohaska",
                            Gender = true,
                            LastName = "Prohaska",
                            Phone = "787-219-6552",
                            Student_code = "StudentfwItCaHT"
                        },
                        new
                        {
                            Id = 93,
                            Address = "970 Nitzsche Valley, Torpstad, Costa Rica",
                            City = "Port Marcelinobury",
                            DateOfBirth = new DateTime(2023, 3, 19, 15, 37, 0, 230, DateTimeKind.Local).AddTicks(4538),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Leland",
                            FullName = "Leland Romaguera",
                            Gender = false,
                            LastName = "Romaguera",
                            Phone = "336.203.8817 x2056",
                            Student_code = "Studentsb6C3X7x"
                        },
                        new
                        {
                            Id = 95,
                            Address = "209 Barrows Junction, Lake Leonor, Denmark",
                            City = "East Buddyton",
                            DateOfBirth = new DateTime(2023, 3, 19, 13, 38, 40, 341, DateTimeKind.Local).AddTicks(740),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Lyric",
                            FullName = "Lyric Gleason",
                            Gender = false,
                            LastName = "Gleason",
                            Phone = "544.643.7914 x34349",
                            Student_code = "StudentXBfV8ueB"
                        },
                        new
                        {
                            Id = 97,
                            Address = "4648 Jon Course, New Efrain, Guinea-Bissau",
                            City = "Kihnside",
                            DateOfBirth = new DateTime(2022, 11, 4, 17, 8, 36, 163, DateTimeKind.Local).AddTicks(6952),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Lucile",
                            FullName = "Lucile Schuppe",
                            Gender = true,
                            LastName = "Schuppe",
                            Phone = "351-503-7855 x566",
                            Student_code = "StudentZveLo4X1"
                        },
                        new
                        {
                            Id = 99,
                            Address = "594 Armstrong Road, Dickinsonport, Taiwan",
                            City = "Garnetbury",
                            DateOfBirth = new DateTime(2023, 9, 7, 14, 28, 18, 718, DateTimeKind.Local).AddTicks(4315),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Willard",
                            FullName = "Willard Wiegand",
                            Gender = true,
                            LastName = "Wiegand",
                            Phone = "497-961-8797 x1917",
                            Student_code = "StudentE6KNMeQJ"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.HasOne("LibraryModels.Notifications", "Notifications")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "NotiId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Notifications");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Navigation("userConn");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userConn");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
