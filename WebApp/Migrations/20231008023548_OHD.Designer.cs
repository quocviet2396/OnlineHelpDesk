// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231008023548_OHD")]
    partial class OHD
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsID");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupporterId");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Areaded")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Decription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCreator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSupporter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Sreaded")
                        .HasColumnType("bit");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("TicketStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Ureaded")
                        .HasColumnType("bit");

                    b.Property<string>("UserNameCreator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameSupporter")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketDTO");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserConn");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailToConfirm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "3rVcn6bc",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$iRQgzVKbjGgKOPhMNAwipONho3l8sWFQqwDnUici99rLs0wUjZdKa",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "YdVR8mSU",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$Svt5s3hKjzhAITPv2z613elEKMO/Qk0ckvouUxkyDIijW7rAO0BJO",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "T4abMLDm",
                            Email = "user@gmail.com",
                            Password = "$2a$11$bidgmKV7S9adtUUdwzTxce5OArR1mURaGqomiNf7gaq9Scx224NnS",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "115 Durgan Rue, Stiedemannshire, Burundi",
                            City = "South Mia",
                            DateOfBirth = new DateTime(2023, 6, 16, 19, 28, 20, 815, DateTimeKind.Local).AddTicks(4436),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Demond",
                            FullName = "Demond Hessel",
                            Gender = true,
                            LastName = "Hessel",
                            Phone = "741-995-2036 x669",
                            Student_code = "Student8yHpLPZj"
                        },
                        new
                        {
                            Id = 3,
                            Address = "988 Nolan Passage, Bodetown, Israel",
                            City = "Brendonland",
                            DateOfBirth = new DateTime(2023, 6, 4, 6, 22, 2, 545, DateTimeKind.Local).AddTicks(217),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Reagan",
                            FullName = "Reagan Schamberger",
                            Gender = true,
                            LastName = "Schamberger",
                            Phone = "923.976.8790 x44498",
                            Student_code = "Student6dLMXycu"
                        },
                        new
                        {
                            Id = 5,
                            Address = "647 Deon Extension, South Abelardo, Venezuela",
                            City = "West Elmiratown",
                            DateOfBirth = new DateTime(2023, 9, 19, 15, 32, 35, 883, DateTimeKind.Local).AddTicks(4884),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Brenda",
                            FullName = "Brenda Torphy",
                            Gender = false,
                            LastName = "Torphy",
                            Phone = "1-384-755-1913",
                            Student_code = "StudentjpGaAt7z"
                        },
                        new
                        {
                            Id = 7,
                            Address = "479 Vivian Dale, West Darwin, Slovakia (Slovak Republic)",
                            City = "East Cordelia",
                            DateOfBirth = new DateTime(2023, 1, 7, 13, 52, 21, 974, DateTimeKind.Local).AddTicks(2040),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Gerardo",
                            FullName = "Gerardo Weimann",
                            Gender = true,
                            LastName = "Weimann",
                            Phone = "272-453-8057 x31469",
                            Student_code = "StudentylikfVz6"
                        },
                        new
                        {
                            Id = 9,
                            Address = "379 Walker Mission, South Sarai, Angola",
                            City = "Ursulastad",
                            DateOfBirth = new DateTime(2023, 4, 23, 5, 42, 39, 594, DateTimeKind.Local).AddTicks(2444),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Reinhold",
                            FullName = "Reinhold Tremblay",
                            Gender = true,
                            LastName = "Tremblay",
                            Phone = "593-380-7919 x5180",
                            Student_code = "StudentSNoW7d1m"
                        },
                        new
                        {
                            Id = 11,
                            Address = "34710 Stamm Loaf, Port Antoniettaberg, Micronesia",
                            City = "East Hallie",
                            DateOfBirth = new DateTime(2022, 11, 25, 7, 55, 52, 55, DateTimeKind.Local).AddTicks(6847),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Dale",
                            FullName = "Dale Von",
                            Gender = true,
                            LastName = "Von",
                            Phone = "754-201-4476",
                            Student_code = "StudenttNf6U7e7"
                        },
                        new
                        {
                            Id = 13,
                            Address = "397 Borer Extensions, Port Loraineview, Aruba",
                            City = "West Sabina",
                            DateOfBirth = new DateTime(2022, 10, 28, 8, 0, 45, 340, DateTimeKind.Local).AddTicks(3293),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Amie",
                            FullName = "Amie Franecki",
                            Gender = false,
                            LastName = "Franecki",
                            Phone = "685.481.0931 x162",
                            Student_code = "StudentQaCoBfg9"
                        },
                        new
                        {
                            Id = 15,
                            Address = "372 Ismael Forges, Davionborough, Bolivia",
                            City = "Mckenzieborough",
                            DateOfBirth = new DateTime(2023, 6, 15, 21, 12, 53, 38, DateTimeKind.Local).AddTicks(5296),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Julio",
                            FullName = "Julio Champlin",
                            Gender = true,
                            LastName = "Champlin",
                            Phone = "774-503-0850 x06019",
                            Student_code = "Student32mAfI9z"
                        },
                        new
                        {
                            Id = 17,
                            Address = "148 Bailey Lodge, Devantehaven, San Marino",
                            City = "Darrenhaven",
                            DateOfBirth = new DateTime(2023, 5, 11, 17, 39, 43, 877, DateTimeKind.Local).AddTicks(2931),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Evie",
                            FullName = "Evie Bartell",
                            Gender = false,
                            LastName = "Bartell",
                            Phone = "515.523.5913 x861",
                            Student_code = "StudentxqyfHgrb"
                        },
                        new
                        {
                            Id = 19,
                            Address = "7177 Metz Meadow, New Lexifort, Saint Kitts and Nevis",
                            City = "North Friedrichfort",
                            DateOfBirth = new DateTime(2022, 12, 11, 15, 10, 33, 505, DateTimeKind.Local).AddTicks(7502),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Beth",
                            FullName = "Beth Goodwin",
                            Gender = true,
                            LastName = "Goodwin",
                            Phone = "717.949.8482 x1923",
                            Student_code = "StudentvJpmylVx"
                        },
                        new
                        {
                            Id = 21,
                            Address = "7345 Rowan Island, New Derrick, Brazil",
                            City = "East Porterfort",
                            DateOfBirth = new DateTime(2023, 5, 17, 9, 8, 25, 79, DateTimeKind.Local).AddTicks(563),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Salma",
                            FullName = "Salma Langosh",
                            Gender = true,
                            LastName = "Langosh",
                            Phone = "628.926.8490",
                            Student_code = "StudentRmAgtnPr"
                        },
                        new
                        {
                            Id = 23,
                            Address = "822 Kilback Pines, East Halliemouth, Kenya",
                            City = "Feeneyton",
                            DateOfBirth = new DateTime(2023, 1, 26, 13, 16, 57, 870, DateTimeKind.Local).AddTicks(3637),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Nelle",
                            FullName = "Nelle Luettgen",
                            Gender = false,
                            LastName = "Luettgen",
                            Phone = "821-744-7222 x8971",
                            Student_code = "StudentUDcRl60P"
                        },
                        new
                        {
                            Id = 25,
                            Address = "0626 Blair Harbor, West Amelieborough, Antarctica (the territory South of 60 deg S)",
                            City = "North Garlandburgh",
                            DateOfBirth = new DateTime(2022, 10, 25, 23, 38, 43, 768, DateTimeKind.Local).AddTicks(4575),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Kaitlin",
                            FullName = "Kaitlin Greenholt",
                            Gender = false,
                            LastName = "Greenholt",
                            Phone = "1-791-990-1736",
                            Student_code = "Student0QdCudW1"
                        },
                        new
                        {
                            Id = 27,
                            Address = "0256 Will Vista, North Patsy, Lebanon",
                            City = "Lake Ashley",
                            DateOfBirth = new DateTime(2023, 7, 10, 13, 18, 58, 21, DateTimeKind.Local).AddTicks(9210),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Harmon",
                            FullName = "Harmon Cole",
                            Gender = false,
                            LastName = "Cole",
                            Phone = "1-478-506-8607 x337",
                            Student_code = "Student6BjXfnYO"
                        },
                        new
                        {
                            Id = 29,
                            Address = "63110 Nicolas Street, Strackemouth, Togo",
                            City = "Langchester",
                            DateOfBirth = new DateTime(2022, 12, 16, 16, 47, 2, 37, DateTimeKind.Local).AddTicks(9302),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Marjory",
                            FullName = "Marjory Collins",
                            Gender = false,
                            LastName = "Collins",
                            Phone = "440-231-9415 x88118",
                            Student_code = "StudentNvawYaXc"
                        },
                        new
                        {
                            Id = 31,
                            Address = "374 Jaskolski Key, East Celine, Netherlands",
                            City = "Kemmerfurt",
                            DateOfBirth = new DateTime(2022, 10, 13, 22, 26, 11, 377, DateTimeKind.Local).AddTicks(3789),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Rosalee",
                            FullName = "Rosalee Murray",
                            Gender = false,
                            LastName = "Murray",
                            Phone = "(479) 932-6734",
                            Student_code = "Studentd7RzoJOS"
                        },
                        new
                        {
                            Id = 33,
                            Address = "618 Hintz Isle, Pollichside, Jersey",
                            City = "Bartonhaven",
                            DateOfBirth = new DateTime(2023, 5, 1, 11, 16, 57, 913, DateTimeKind.Local).AddTicks(5728),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Ernestina",
                            FullName = "Ernestina Larson",
                            Gender = false,
                            LastName = "Larson",
                            Phone = "298-331-0119 x6691",
                            Student_code = "StudentvClZ1UH7"
                        },
                        new
                        {
                            Id = 35,
                            Address = "7386 Watsica Lights, Merlinview, Thailand",
                            City = "Koelpinchester",
                            DateOfBirth = new DateTime(2022, 10, 9, 20, 25, 48, 689, DateTimeKind.Local).AddTicks(5946),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Alejandra",
                            FullName = "Alejandra Haag",
                            Gender = false,
                            LastName = "Haag",
                            Phone = "(969) 921-0544 x82800",
                            Student_code = "StudentQGNBUrji"
                        },
                        new
                        {
                            Id = 37,
                            Address = "58385 Terrell Lodge, North Gilda, Albania",
                            City = "Caesarbury",
                            DateOfBirth = new DateTime(2022, 12, 9, 15, 26, 52, 419, DateTimeKind.Local).AddTicks(1698),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Curt",
                            FullName = "Curt Koepp",
                            Gender = false,
                            LastName = "Koepp",
                            Phone = "475.285.4521",
                            Student_code = "StudentovCZYoYH"
                        },
                        new
                        {
                            Id = 39,
                            Address = "663 Era Overpass, Lake Wallaceview, Austria",
                            City = "East Camylle",
                            DateOfBirth = new DateTime(2023, 7, 16, 3, 40, 41, 300, DateTimeKind.Local).AddTicks(3829),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Kirsten",
                            FullName = "Kirsten Corkery",
                            Gender = false,
                            LastName = "Corkery",
                            Phone = "(672) 233-8939 x56160",
                            Student_code = "StudentGGUbWdV8"
                        },
                        new
                        {
                            Id = 41,
                            Address = "108 Christopher Cliff, North Generalshire, United States Minor Outlying Islands",
                            City = "East Faeshire",
                            DateOfBirth = new DateTime(2022, 11, 20, 5, 48, 45, 821, DateTimeKind.Local).AddTicks(7271),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Sierra",
                            FullName = "Sierra Cummings",
                            Gender = true,
                            LastName = "Cummings",
                            Phone = "778-389-9108",
                            Student_code = "StudentwJ4LqJwj"
                        },
                        new
                        {
                            Id = 43,
                            Address = "5444 Ephraim Ridge, North Angelitachester, Germany",
                            City = "Hermistonfurt",
                            DateOfBirth = new DateTime(2022, 12, 25, 9, 59, 11, 348, DateTimeKind.Local).AddTicks(1269),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Elwyn",
                            FullName = "Elwyn Douglas",
                            Gender = true,
                            LastName = "Douglas",
                            Phone = "(315) 410-0273",
                            Student_code = "StudentL39lPze0"
                        },
                        new
                        {
                            Id = 45,
                            Address = "141 Littel Row, Vonburgh, Fiji",
                            City = "West Esther",
                            DateOfBirth = new DateTime(2023, 6, 22, 13, 10, 44, 945, DateTimeKind.Local).AddTicks(9941),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Shaina",
                            FullName = "Shaina Bailey",
                            Gender = false,
                            LastName = "Bailey",
                            Phone = "(489) 640-4989 x861",
                            Student_code = "Studentbz65TrZj"
                        },
                        new
                        {
                            Id = 47,
                            Address = "159 Kohler Center, Bogisichmouth, Syrian Arab Republic",
                            City = "Hilpertton",
                            DateOfBirth = new DateTime(2023, 6, 29, 17, 53, 2, 257, DateTimeKind.Local).AddTicks(309),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Claire",
                            FullName = "Claire Haag",
                            Gender = true,
                            LastName = "Haag",
                            Phone = "(403) 438-8944 x712",
                            Student_code = "StudentgbaaMOdx"
                        },
                        new
                        {
                            Id = 49,
                            Address = "954 Rossie Prairie, Lake Oranstad, Cote d'Ivoire",
                            City = "Port Generalhaven",
                            DateOfBirth = new DateTime(2023, 3, 30, 22, 36, 12, 79, DateTimeKind.Local).AddTicks(6988),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Caesar",
                            FullName = "Caesar Schmitt",
                            Gender = true,
                            LastName = "Schmitt",
                            Phone = "810-620-1093 x407",
                            Student_code = "StudentRL0lPiz7"
                        },
                        new
                        {
                            Id = 51,
                            Address = "04324 Medhurst Run, West Jacyntheville, Reunion",
                            City = "Margarettehaven",
                            DateOfBirth = new DateTime(2023, 7, 20, 4, 40, 45, 451, DateTimeKind.Local).AddTicks(3342),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Cory",
                            FullName = "Cory O'Kon",
                            Gender = false,
                            LastName = "O'Kon",
                            Phone = "1-958-530-7466 x90273",
                            Student_code = "Student0ApjRdMZ"
                        },
                        new
                        {
                            Id = 53,
                            Address = "097 Kautzer Shores, North Ressie, South Georgia and the South Sandwich Islands",
                            City = "South Cullenberg",
                            DateOfBirth = new DateTime(2023, 4, 4, 17, 47, 10, 432, DateTimeKind.Local).AddTicks(1401),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Victor",
                            FullName = "Victor Wolff",
                            Gender = true,
                            LastName = "Wolff",
                            Phone = "404-962-9972",
                            Student_code = "StudentYTlC3Acb"
                        },
                        new
                        {
                            Id = 55,
                            Address = "514 Hahn Grove, Raheemville, Kiribati",
                            City = "Port Kiraville",
                            DateOfBirth = new DateTime(2023, 4, 11, 1, 37, 8, 251, DateTimeKind.Local).AddTicks(7034),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Jamel",
                            FullName = "Jamel Effertz",
                            Gender = false,
                            LastName = "Effertz",
                            Phone = "880.646.5309 x06785",
                            Student_code = "StudentRM4gFe1R"
                        },
                        new
                        {
                            Id = 57,
                            Address = "3278 Fletcher Route, Cruickshankville, Finland",
                            City = "Port Camren",
                            DateOfBirth = new DateTime(2023, 5, 12, 19, 50, 25, 161, DateTimeKind.Local).AddTicks(8321),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Guy",
                            FullName = "Guy Rempel",
                            Gender = true,
                            LastName = "Rempel",
                            Phone = "858-453-1838",
                            Student_code = "Studentamh5dosd"
                        },
                        new
                        {
                            Id = 59,
                            Address = "711 Reilly River, Sauermouth, Togo",
                            City = "South Hilda",
                            DateOfBirth = new DateTime(2022, 12, 4, 10, 35, 48, 760, DateTimeKind.Local).AddTicks(2770),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Gerard",
                            FullName = "Gerard Jacobson",
                            Gender = true,
                            LastName = "Jacobson",
                            Phone = "(903) 938-7069 x222",
                            Student_code = "StudenttQ0BwTZ1"
                        },
                        new
                        {
                            Id = 61,
                            Address = "74148 Christelle Pine, Starkfurt, Yemen",
                            City = "West Herbert",
                            DateOfBirth = new DateTime(2022, 12, 14, 23, 31, 49, 121, DateTimeKind.Local).AddTicks(405),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Dion",
                            FullName = "Dion Walker",
                            Gender = false,
                            LastName = "Walker",
                            Phone = "(623) 575-4569",
                            Student_code = "StudentMAJrDZUa"
                        },
                        new
                        {
                            Id = 63,
                            Address = "464 Wiza Run, West Llewellynshire, Guinea",
                            City = "Friesenfort",
                            DateOfBirth = new DateTime(2023, 7, 9, 17, 15, 27, 846, DateTimeKind.Local).AddTicks(8118),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Rico",
                            FullName = "Rico Pouros",
                            Gender = false,
                            LastName = "Pouros",
                            Phone = "(258) 514-5837 x19376",
                            Student_code = "StudentRdvSnCHO"
                        },
                        new
                        {
                            Id = 65,
                            Address = "262 Grimes Hills, Gracielaport, Macedonia",
                            City = "West Hayleeburgh",
                            DateOfBirth = new DateTime(2023, 1, 7, 15, 35, 59, 594, DateTimeKind.Local).AddTicks(5504),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Iliana",
                            FullName = "Iliana Reynolds",
                            Gender = false,
                            LastName = "Reynolds",
                            Phone = "1-461-356-9232",
                            Student_code = "StudentyftsnAXG"
                        },
                        new
                        {
                            Id = 67,
                            Address = "676 Emmett Greens, New Rashad, Finland",
                            City = "Lehnerland",
                            DateOfBirth = new DateTime(2023, 4, 7, 1, 40, 15, 354, DateTimeKind.Local).AddTicks(6125),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Isidro",
                            FullName = "Isidro Zemlak",
                            Gender = false,
                            LastName = "Zemlak",
                            Phone = "(728) 993-7101 x08421",
                            Student_code = "StudentNfecnvHI"
                        },
                        new
                        {
                            Id = 69,
                            Address = "18168 Dustin Cliff, Charleston, Mauritius",
                            City = "New Cristalmouth",
                            DateOfBirth = new DateTime(2023, 1, 30, 20, 54, 1, 756, DateTimeKind.Local).AddTicks(8623),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Issac",
                            FullName = "Issac Bruen",
                            Gender = false,
                            LastName = "Bruen",
                            Phone = "676.993.1594 x65092",
                            Student_code = "Student98pfjpMY"
                        },
                        new
                        {
                            Id = 71,
                            Address = "5934 Jannie Spur, North Anjali, Cocos (Keeling) Islands",
                            City = "Rogahnview",
                            DateOfBirth = new DateTime(2023, 9, 25, 17, 28, 5, 159, DateTimeKind.Local).AddTicks(8623),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Maureen",
                            FullName = "Maureen Murphy",
                            Gender = true,
                            LastName = "Murphy",
                            Phone = "817.296.8482",
                            Student_code = "StudentfLcqqCH9"
                        },
                        new
                        {
                            Id = 73,
                            Address = "230 Runolfsdottir River, Runolfssonside, Sri Lanka",
                            City = "West Amelia",
                            DateOfBirth = new DateTime(2023, 8, 22, 16, 37, 57, 832, DateTimeKind.Local).AddTicks(6923),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Chris",
                            FullName = "Chris Shields",
                            Gender = false,
                            LastName = "Shields",
                            Phone = "686.809.2939 x3078",
                            Student_code = "Student9pJA7t7d"
                        },
                        new
                        {
                            Id = 75,
                            Address = "07672 Orlo Cliff, South Lina, New Zealand",
                            City = "Rowemouth",
                            DateOfBirth = new DateTime(2022, 10, 22, 20, 55, 2, 769, DateTimeKind.Local).AddTicks(1280),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Rodrick",
                            FullName = "Rodrick Rutherford",
                            Gender = false,
                            LastName = "Rutherford",
                            Phone = "(296) 479-0315",
                            Student_code = "StudentMxR1mDHn"
                        },
                        new
                        {
                            Id = 77,
                            Address = "071 Marjory Roads, Clementton, Malawi",
                            City = "Lake Sydneyside",
                            DateOfBirth = new DateTime(2022, 10, 11, 1, 30, 26, 742, DateTimeKind.Local).AddTicks(9106),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Judy",
                            FullName = "Judy Donnelly",
                            Gender = false,
                            LastName = "Donnelly",
                            Phone = "308.608.4613",
                            Student_code = "Student4CPz1Ktf"
                        },
                        new
                        {
                            Id = 79,
                            Address = "030 Kenny Mills, Lake Karleyfurt, Yemen",
                            City = "Port Garettmouth",
                            DateOfBirth = new DateTime(2023, 4, 27, 3, 8, 3, 448, DateTimeKind.Local).AddTicks(3374),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Lukas",
                            FullName = "Lukas Daugherty",
                            Gender = true,
                            LastName = "Daugherty",
                            Phone = "1-426-247-5353",
                            Student_code = "StudentF04Q6y7U"
                        },
                        new
                        {
                            Id = 81,
                            Address = "29906 Bailey Crescent, Thielville, Armenia",
                            City = "Prestonfort",
                            DateOfBirth = new DateTime(2023, 2, 28, 19, 30, 15, 70, DateTimeKind.Local).AddTicks(6721),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Milford",
                            FullName = "Milford Goyette",
                            Gender = true,
                            LastName = "Goyette",
                            Phone = "(277) 591-7120 x9303",
                            Student_code = "Studented0XPQUv"
                        },
                        new
                        {
                            Id = 83,
                            Address = "57177 Kris Skyway, Jarenfurt, Tanzania",
                            City = "Crooksville",
                            DateOfBirth = new DateTime(2023, 5, 27, 20, 53, 0, 269, DateTimeKind.Local).AddTicks(8072),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Duane",
                            FullName = "Duane Rowe",
                            Gender = true,
                            LastName = "Rowe",
                            Phone = "610.944.7925 x146",
                            Student_code = "StudentCafdZaHj"
                        },
                        new
                        {
                            Id = 85,
                            Address = "765 Carley Throughway, Baileyville, Kazakhstan",
                            City = "Ulisesport",
                            DateOfBirth = new DateTime(2023, 9, 9, 5, 36, 46, 264, DateTimeKind.Local).AddTicks(9794),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Kim",
                            FullName = "Kim MacGyver",
                            Gender = true,
                            LastName = "MacGyver",
                            Phone = "871-916-5373",
                            Student_code = "Studentu7a7gCWd"
                        },
                        new
                        {
                            Id = 87,
                            Address = "03495 Irwin Radial, Tillmanshire, Turks and Caicos Islands",
                            City = "South Aletha",
                            DateOfBirth = new DateTime(2023, 7, 1, 21, 22, 4, 922, DateTimeKind.Local).AddTicks(9585),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Isabella",
                            FullName = "Isabella Lebsack",
                            Gender = false,
                            LastName = "Lebsack",
                            Phone = "333.855.5101 x4164",
                            Student_code = "StudentHhCwA63p"
                        },
                        new
                        {
                            Id = 89,
                            Address = "1489 Howe Rest, Harleyberg, Uganda",
                            City = "West Sethtown",
                            DateOfBirth = new DateTime(2023, 3, 21, 5, 11, 52, 431, DateTimeKind.Local).AddTicks(6710),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Vada",
                            FullName = "Vada Quitzon",
                            Gender = true,
                            LastName = "Quitzon",
                            Phone = "293.390.4885 x789",
                            Student_code = "Student87ja5rYN"
                        },
                        new
                        {
                            Id = 91,
                            Address = "918 Fay Radial, North Reggieborough, Thailand",
                            City = "West Leoraberg",
                            DateOfBirth = new DateTime(2022, 11, 18, 23, 6, 28, 129, DateTimeKind.Local).AddTicks(1469),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Zachariah",
                            FullName = "Zachariah Nader",
                            Gender = true,
                            LastName = "Nader",
                            Phone = "1-602-695-7478",
                            Student_code = "Studentw4KwMlaF"
                        },
                        new
                        {
                            Id = 93,
                            Address = "15818 Lempi Coves, Elissaburgh, Kuwait",
                            City = "Waylonmouth",
                            DateOfBirth = new DateTime(2023, 7, 5, 3, 7, 13, 410, DateTimeKind.Local).AddTicks(7207),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Breana",
                            FullName = "Breana Hauck",
                            Gender = true,
                            LastName = "Hauck",
                            Phone = "(885) 721-1587 x054",
                            Student_code = "StudentXdw48sBd"
                        },
                        new
                        {
                            Id = 95,
                            Address = "096 Madaline Park, Port Murphyport, Tokelau",
                            City = "Funkburgh",
                            DateOfBirth = new DateTime(2023, 4, 14, 5, 14, 4, 26, DateTimeKind.Local).AddTicks(8571),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Cleve",
                            FullName = "Cleve Goodwin",
                            Gender = true,
                            LastName = "Goodwin",
                            Phone = "735.271.6309 x95143",
                            Student_code = "Studentrcty7syp"
                        },
                        new
                        {
                            Id = 97,
                            Address = "61917 Dahlia Bypass, Xavierside, Saint Pierre and Miquelon",
                            City = "West Pietro",
                            DateOfBirth = new DateTime(2023, 5, 4, 18, 10, 44, 427, DateTimeKind.Local).AddTicks(4839),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Helen",
                            FullName = "Helen Hoeger",
                            Gender = false,
                            LastName = "Hoeger",
                            Phone = "385-260-0180 x5266",
                            Student_code = "StudentoG8NxKOR"
                        },
                        new
                        {
                            Id = 99,
                            Address = "96914 Kessler Key, Arneport, Saint Lucia",
                            City = "Hellenview",
                            DateOfBirth = new DateTime(2023, 8, 18, 17, 22, 16, 886, DateTimeKind.Local).AddTicks(784),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Imani",
                            FullName = "Imani Wilkinson",
                            Gender = false,
                            LastName = "Wilkinson",
                            Phone = "816.778.9375 x539",
                            Student_code = "Student8VMATlqv"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Supporter");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.HasOne("LibraryModels.Users", "Users")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userConn");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
