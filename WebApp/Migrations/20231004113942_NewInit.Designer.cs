// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231004113942_NewInit")]
    partial class NewInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsID");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupporterId");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("userConnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbNotification");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Decription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSupporter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("TicketStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameSupporter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketDTO");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotiId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotiId")
                        .IsUnique()
                        .HasFilter("[NotiId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserConn");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailToConfirm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "erwWnHCe",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$GplMA8ihdJPV9KdyoQN9GeA.iRYWSCuct8ebGvGJsMfmCtOWqun.O",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "QAZO2Mhn",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$YzEwnSmYZmpXepwSAglXhOoj8E8Tn058jVhYE03pLqfw71QWkTuFu",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "DgzcA1x8",
                            Email = "user@gmail.com",
                            Password = "$2a$11$MjBvuXErzMLoiHPtbVm/D.bgZtIevg6xfYVoSqJCSoeNwwsYo.YfW",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "3889 Gabriel Fork, Lake Martinaport, Macedonia",
                            City = "West Albin",
                            DateOfBirth = new DateTime(2023, 2, 21, 16, 6, 18, 157, DateTimeKind.Local).AddTicks(3814),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Melany",
                            FullName = "Melany Gislason",
                            Gender = true,
                            LastName = "Gislason",
                            Phone = "244.569.3925 x95106",
                            Student_code = "StudentGAbWR8Uz"
                        },
                        new
                        {
                            Id = 3,
                            Address = "93611 Von Rue, Feliciafort, French Guiana",
                            City = "Strosinshire",
                            DateOfBirth = new DateTime(2023, 8, 18, 21, 24, 0, 59, DateTimeKind.Local).AddTicks(6067),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Demarco",
                            FullName = "Demarco Heller",
                            Gender = false,
                            LastName = "Heller",
                            Phone = "(505) 396-2868 x606",
                            Student_code = "StudentDIqjmNBx"
                        },
                        new
                        {
                            Id = 5,
                            Address = "3784 Wintheiser Place, Quentinchester, Syrian Arab Republic",
                            City = "New Madilyn",
                            DateOfBirth = new DateTime(2023, 10, 3, 9, 22, 14, 34, DateTimeKind.Local).AddTicks(7495),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Alaina",
                            FullName = "Alaina Klocko",
                            Gender = true,
                            LastName = "Klocko",
                            Phone = "833.690.5958 x76935",
                            Student_code = "StudentYQzTVd72"
                        },
                        new
                        {
                            Id = 7,
                            Address = "9732 Norbert Run, East Javonmouth, Bolivia",
                            City = "Danielville",
                            DateOfBirth = new DateTime(2022, 12, 29, 15, 34, 35, 830, DateTimeKind.Local).AddTicks(6286),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Rocky",
                            FullName = "Rocky King",
                            Gender = true,
                            LastName = "King",
                            Phone = "779.303.9828 x3801",
                            Student_code = "StudentNqqwS4pk"
                        },
                        new
                        {
                            Id = 9,
                            Address = "55982 Ullrich Shores, Rippinland, Iraq",
                            City = "East Rey",
                            DateOfBirth = new DateTime(2023, 2, 9, 17, 49, 36, 823, DateTimeKind.Local).AddTicks(3356),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Candice",
                            FullName = "Candice Torp",
                            Gender = false,
                            LastName = "Torp",
                            Phone = "736-669-5721",
                            Student_code = "StudenthdGQo0Vt"
                        },
                        new
                        {
                            Id = 11,
                            Address = "38915 Marty Plains, Schuppefort, Monaco",
                            City = "Carterberg",
                            DateOfBirth = new DateTime(2022, 11, 18, 22, 57, 44, 634, DateTimeKind.Local).AddTicks(1948),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Robert",
                            FullName = "Robert King",
                            Gender = false,
                            LastName = "King",
                            Phone = "946-376-6721",
                            Student_code = "Student2nrSC1Kd"
                        },
                        new
                        {
                            Id = 13,
                            Address = "0003 Reynolds Plains, Valentinetown, Rwanda",
                            City = "Lake Candacetown",
                            DateOfBirth = new DateTime(2022, 10, 11, 11, 5, 49, 933, DateTimeKind.Local).AddTicks(7217),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Eliza",
                            FullName = "Eliza Frami",
                            Gender = false,
                            LastName = "Frami",
                            Phone = "(796) 458-4439 x5492",
                            Student_code = "Student6MKlsd2g"
                        },
                        new
                        {
                            Id = 15,
                            Address = "35926 Gutmann Hollow, West Deonte, Maldives",
                            City = "West Nadia",
                            DateOfBirth = new DateTime(2023, 5, 26, 20, 27, 2, 765, DateTimeKind.Local).AddTicks(1249),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Leanna",
                            FullName = "Leanna Quitzon",
                            Gender = false,
                            LastName = "Quitzon",
                            Phone = "1-449-309-3662 x1998",
                            Student_code = "Student6dCown88"
                        },
                        new
                        {
                            Id = 17,
                            Address = "8325 Mia Summit, Paulton, Tajikistan",
                            City = "East Diegoton",
                            DateOfBirth = new DateTime(2023, 4, 26, 13, 58, 11, 974, DateTimeKind.Local).AddTicks(3950),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Gaston",
                            FullName = "Gaston Kling",
                            Gender = false,
                            LastName = "Kling",
                            Phone = "427.464.3036 x4695",
                            Student_code = "Student3RnnrwMc"
                        },
                        new
                        {
                            Id = 19,
                            Address = "405 Tillman Garden, East Rachelburgh, Trinidad and Tobago",
                            City = "New Arvidchester",
                            DateOfBirth = new DateTime(2023, 9, 22, 21, 36, 29, 504, DateTimeKind.Local).AddTicks(2808),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Marcelle",
                            FullName = "Marcelle Lebsack",
                            Gender = true,
                            LastName = "Lebsack",
                            Phone = "731.331.8682 x036",
                            Student_code = "StudentErW8vZL6"
                        },
                        new
                        {
                            Id = 21,
                            Address = "63151 Cole Rapid, Port Jasmin, Sudan",
                            City = "Fredericmouth",
                            DateOfBirth = new DateTime(2023, 5, 26, 9, 16, 38, 468, DateTimeKind.Local).AddTicks(1760),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Dillan",
                            FullName = "Dillan Herzog",
                            Gender = true,
                            LastName = "Herzog",
                            Phone = "278-500-5506",
                            Student_code = "StudentJsaPp0b2"
                        },
                        new
                        {
                            Id = 23,
                            Address = "4570 Rowe Creek, Gloverton, Botswana",
                            City = "New Xavier",
                            DateOfBirth = new DateTime(2022, 11, 7, 19, 56, 5, 429, DateTimeKind.Local).AddTicks(7198),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Winnifred",
                            FullName = "Winnifred Conroy",
                            Gender = true,
                            LastName = "Conroy",
                            Phone = "1-628-504-4681",
                            Student_code = "Student2JHAIqyh"
                        },
                        new
                        {
                            Id = 25,
                            Address = "97685 Jessica Plain, Kulaschester, Cote d'Ivoire",
                            City = "Jenaborough",
                            DateOfBirth = new DateTime(2022, 10, 22, 3, 31, 48, 585, DateTimeKind.Local).AddTicks(4888),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Melvina",
                            FullName = "Melvina O'Conner",
                            Gender = false,
                            LastName = "O'Conner",
                            Phone = "1-455-665-0239",
                            Student_code = "Student2ZsJQMuh"
                        },
                        new
                        {
                            Id = 27,
                            Address = "756 Wyman Plains, Marvinberg, Rwanda",
                            City = "Katlynnborough",
                            DateOfBirth = new DateTime(2022, 12, 28, 16, 59, 51, 116, DateTimeKind.Local).AddTicks(1974),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Jaqueline",
                            FullName = "Jaqueline Jast",
                            Gender = true,
                            LastName = "Jast",
                            Phone = "1-897-235-9433 x860",
                            Student_code = "StudentNLsGR2qF"
                        },
                        new
                        {
                            Id = 29,
                            Address = "83631 Stamm Lane, Leilaland, Bahrain",
                            City = "Runteport",
                            DateOfBirth = new DateTime(2023, 7, 1, 17, 6, 35, 485, DateTimeKind.Local).AddTicks(823),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Rosina",
                            FullName = "Rosina D'Amore",
                            Gender = true,
                            LastName = "D'Amore",
                            Phone = "1-805-344-2635 x415",
                            Student_code = "Studentbylsdr5D"
                        },
                        new
                        {
                            Id = 31,
                            Address = "04575 Daugherty Plain, Bentonmouth, Spain",
                            City = "West Addie",
                            DateOfBirth = new DateTime(2022, 10, 25, 22, 49, 6, 35, DateTimeKind.Local).AddTicks(2832),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Myrtice",
                            FullName = "Myrtice Zulauf",
                            Gender = false,
                            LastName = "Zulauf",
                            Phone = "513.257.2522",
                            Student_code = "StudentevOHzDgE"
                        },
                        new
                        {
                            Id = 33,
                            Address = "33490 Runte Isle, Amaraside, Svalbard & Jan Mayen Islands",
                            City = "West Maribel",
                            DateOfBirth = new DateTime(2023, 1, 25, 23, 51, 21, 227, DateTimeKind.Local).AddTicks(4422),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Ronny",
                            FullName = "Ronny Bradtke",
                            Gender = true,
                            LastName = "Bradtke",
                            Phone = "(925) 911-7087",
                            Student_code = "Studentp5rHvV2p"
                        },
                        new
                        {
                            Id = 35,
                            Address = "9342 Cordell Crossing, East Mattshire, Japan",
                            City = "Abelardomouth",
                            DateOfBirth = new DateTime(2023, 7, 5, 10, 31, 12, 542, DateTimeKind.Local).AddTicks(926),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Mavis",
                            FullName = "Mavis Harvey",
                            Gender = true,
                            LastName = "Harvey",
                            Phone = "943.794.7592 x893",
                            Student_code = "StudentKyliH2Kl"
                        },
                        new
                        {
                            Id = 37,
                            Address = "86641 Andres Rapids, Sawaynton, Austria",
                            City = "East Mireya",
                            DateOfBirth = new DateTime(2023, 7, 28, 17, 36, 32, 215, DateTimeKind.Local).AddTicks(8748),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Lon",
                            FullName = "Lon Wisozk",
                            Gender = true,
                            LastName = "Wisozk",
                            Phone = "786.835.8403",
                            Student_code = "Student8uT57EaD"
                        },
                        new
                        {
                            Id = 39,
                            Address = "38099 Carmen Loaf, Gracielashire, Georgia",
                            City = "East Christianaton",
                            DateOfBirth = new DateTime(2023, 3, 18, 4, 6, 7, 463, DateTimeKind.Local).AddTicks(5382),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Bryon",
                            FullName = "Bryon Boyle",
                            Gender = false,
                            LastName = "Boyle",
                            Phone = "(668) 962-4340 x718",
                            Student_code = "Student1beR2bw2"
                        },
                        new
                        {
                            Id = 41,
                            Address = "47611 Schroeder Creek, Oberbrunnerbury, El Salvador",
                            City = "East Una",
                            DateOfBirth = new DateTime(2023, 10, 2, 4, 5, 50, 515, DateTimeKind.Local).AddTicks(4585),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Ludie",
                            FullName = "Ludie Gleichner",
                            Gender = false,
                            LastName = "Gleichner",
                            Phone = "908-217-9776",
                            Student_code = "StudentDve9ZIrb"
                        },
                        new
                        {
                            Id = 43,
                            Address = "685 Alysson Crescent, East Melanyhaven, Malawi",
                            City = "New Eusebiofurt",
                            DateOfBirth = new DateTime(2022, 12, 18, 7, 58, 32, 400, DateTimeKind.Local).AddTicks(49),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Landen",
                            FullName = "Landen Ullrich",
                            Gender = false,
                            LastName = "Ullrich",
                            Phone = "647.911.4799 x2268",
                            Student_code = "StudentidYZeDZf"
                        },
                        new
                        {
                            Id = 45,
                            Address = "1263 Pink Radial, South Zola, Cocos (Keeling) Islands",
                            City = "Walkerland",
                            DateOfBirth = new DateTime(2023, 1, 20, 4, 41, 0, 688, DateTimeKind.Local).AddTicks(1209),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Autumn",
                            FullName = "Autumn Crona",
                            Gender = true,
                            LastName = "Crona",
                            Phone = "953.254.6791",
                            Student_code = "Student6QBDbOmZ"
                        },
                        new
                        {
                            Id = 47,
                            Address = "2921 Blanca Point, Halvorsonchester, Maldives",
                            City = "Isaiahville",
                            DateOfBirth = new DateTime(2022, 11, 2, 22, 47, 36, 455, DateTimeKind.Local).AddTicks(6878),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Rogelio",
                            FullName = "Rogelio Sporer",
                            Gender = true,
                            LastName = "Sporer",
                            Phone = "243.536.1457",
                            Student_code = "StudentumnTLTIY"
                        },
                        new
                        {
                            Id = 49,
                            Address = "0684 Tamara Mission, West Catherine, Turkmenistan",
                            City = "Feestport",
                            DateOfBirth = new DateTime(2022, 10, 25, 16, 2, 46, 997, DateTimeKind.Local).AddTicks(4547),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Favian",
                            FullName = "Favian Bernhard",
                            Gender = true,
                            LastName = "Bernhard",
                            Phone = "1-572-963-2478 x905",
                            Student_code = "StudentlJ9IXlfQ"
                        },
                        new
                        {
                            Id = 51,
                            Address = "680 Ankunding Greens, Peytonton, Turks and Caicos Islands",
                            City = "Jeromeburgh",
                            DateOfBirth = new DateTime(2023, 6, 20, 5, 52, 19, 248, DateTimeKind.Local).AddTicks(1923),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Shyann",
                            FullName = "Shyann Predovic",
                            Gender = false,
                            LastName = "Predovic",
                            Phone = "413.851.2481 x3114",
                            Student_code = "Student6cDMLnzl"
                        },
                        new
                        {
                            Id = 53,
                            Address = "80891 Lockman Track, Lake Alanis, Guernsey",
                            City = "West Jamal",
                            DateOfBirth = new DateTime(2023, 3, 3, 15, 12, 29, 842, DateTimeKind.Local).AddTicks(8813),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Nyah",
                            FullName = "Nyah Schoen",
                            Gender = false,
                            LastName = "Schoen",
                            Phone = "503-964-1594 x89607",
                            Student_code = "StudentSA02t9az"
                        },
                        new
                        {
                            Id = 55,
                            Address = "94010 Mabelle River, Robertsfort, Gambia",
                            City = "South Vanessa",
                            DateOfBirth = new DateTime(2023, 8, 10, 7, 4, 39, 163, DateTimeKind.Local).AddTicks(5410),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Consuelo",
                            FullName = "Consuelo Fritsch",
                            Gender = true,
                            LastName = "Fritsch",
                            Phone = "(500) 254-5144",
                            Student_code = "StudentwiVDJwuq"
                        },
                        new
                        {
                            Id = 57,
                            Address = "55487 Martina Parks, Titoland, Singapore",
                            City = "Groverchester",
                            DateOfBirth = new DateTime(2023, 6, 28, 16, 52, 59, 642, DateTimeKind.Local).AddTicks(5669),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Geraldine",
                            FullName = "Geraldine Schmidt",
                            Gender = false,
                            LastName = "Schmidt",
                            Phone = "915.898.0448",
                            Student_code = "StudentuTaTpdKA"
                        },
                        new
                        {
                            Id = 59,
                            Address = "806 Schaefer Rue, Mosciskiburgh, Comoros",
                            City = "Marlenfort",
                            DateOfBirth = new DateTime(2023, 7, 20, 18, 25, 44, 286, DateTimeKind.Local).AddTicks(525),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Brady",
                            FullName = "Brady Runte",
                            Gender = true,
                            LastName = "Runte",
                            Phone = "571-992-3430 x594",
                            Student_code = "StudenttjUvcD4r"
                        },
                        new
                        {
                            Id = 61,
                            Address = "14365 Larson Cape, Brionnaside, Dominica",
                            City = "New Jovanymouth",
                            DateOfBirth = new DateTime(2023, 1, 29, 13, 40, 43, 624, DateTimeKind.Local).AddTicks(5574),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Stan",
                            FullName = "Stan Maggio",
                            Gender = true,
                            LastName = "Maggio",
                            Phone = "(417) 547-9422",
                            Student_code = "Studentiq13Y2GU"
                        },
                        new
                        {
                            Id = 63,
                            Address = "5192 Renner Throughway, Lutherburgh, Hungary",
                            City = "Heathcotechester",
                            DateOfBirth = new DateTime(2023, 9, 17, 21, 29, 51, 410, DateTimeKind.Local).AddTicks(6026),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Emmy",
                            FullName = "Emmy Kub",
                            Gender = false,
                            LastName = "Kub",
                            Phone = "(556) 366-7881 x674",
                            Student_code = "StudentXn7mOgCn"
                        },
                        new
                        {
                            Id = 65,
                            Address = "2850 Satterfield Mill, East Marjolaine, Guyana",
                            City = "Schummton",
                            DateOfBirth = new DateTime(2023, 9, 5, 4, 38, 25, 289, DateTimeKind.Local).AddTicks(9953),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Ryann",
                            FullName = "Ryann Luettgen",
                            Gender = true,
                            LastName = "Luettgen",
                            Phone = "(538) 781-6710 x63732",
                            Student_code = "StudentWHftCZse"
                        },
                        new
                        {
                            Id = 67,
                            Address = "23243 Isobel Streets, Billyside, Cayman Islands",
                            City = "Derekmouth",
                            DateOfBirth = new DateTime(2023, 8, 29, 6, 5, 23, 699, DateTimeKind.Local).AddTicks(1570),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Agustin",
                            FullName = "Agustin Schumm",
                            Gender = false,
                            LastName = "Schumm",
                            Phone = "958-945-8849 x24045",
                            Student_code = "StudenthBHWPstS"
                        },
                        new
                        {
                            Id = 69,
                            Address = "63138 Larson Plaza, South Sallie, Syrian Arab Republic",
                            City = "Lake Coby",
                            DateOfBirth = new DateTime(2023, 8, 21, 18, 45, 27, 217, DateTimeKind.Local).AddTicks(895),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Johanna",
                            FullName = "Johanna Ondricka",
                            Gender = false,
                            LastName = "Ondricka",
                            Phone = "1-764-957-8106 x710",
                            Student_code = "StudentbCRODBmJ"
                        },
                        new
                        {
                            Id = 71,
                            Address = "103 Seth Groves, Franeckiville, Bahrain",
                            City = "Lake Kitty",
                            DateOfBirth = new DateTime(2023, 3, 17, 5, 28, 21, 646, DateTimeKind.Local).AddTicks(3751),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Lupe",
                            FullName = "Lupe Jenkins",
                            Gender = false,
                            LastName = "Jenkins",
                            Phone = "706-681-1229 x417",
                            Student_code = "StudentgPby1GoG"
                        },
                        new
                        {
                            Id = 73,
                            Address = "8074 Hipolito Meadow, New Genesisfurt, Guadeloupe",
                            City = "West Arthur",
                            DateOfBirth = new DateTime(2023, 7, 3, 23, 38, 48, 4, DateTimeKind.Local).AddTicks(724),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Reta",
                            FullName = "Reta Waters",
                            Gender = false,
                            LastName = "Waters",
                            Phone = "375-585-5203 x1674",
                            Student_code = "StudentIR8Y3u0z"
                        },
                        new
                        {
                            Id = 75,
                            Address = "330 Kaylee Run, East Godfreymouth, Namibia",
                            City = "Littelborough",
                            DateOfBirth = new DateTime(2023, 6, 5, 19, 13, 27, 717, DateTimeKind.Local).AddTicks(3864),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Daija",
                            FullName = "Daija Klocko",
                            Gender = false,
                            LastName = "Klocko",
                            Phone = "991.532.7137 x972",
                            Student_code = "StudentkbSMkG4O"
                        },
                        new
                        {
                            Id = 77,
                            Address = "93776 Considine Junction, West Yeseniastad, Japan",
                            City = "East Zander",
                            DateOfBirth = new DateTime(2022, 11, 7, 13, 26, 28, 283, DateTimeKind.Local).AddTicks(1955),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Ruby",
                            FullName = "Ruby Labadie",
                            Gender = true,
                            LastName = "Labadie",
                            Phone = "(972) 705-5553 x4953",
                            Student_code = "StudentV5L4mOmw"
                        },
                        new
                        {
                            Id = 79,
                            Address = "9287 Madyson Centers, West Deronhaven, Ecuador",
                            City = "Runolfsdottirburgh",
                            DateOfBirth = new DateTime(2022, 10, 23, 22, 36, 29, 275, DateTimeKind.Local).AddTicks(9915),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Joe",
                            FullName = "Joe Rolfson",
                            Gender = false,
                            LastName = "Rolfson",
                            Phone = "275.555.6718 x76364",
                            Student_code = "Student8pOeeUJB"
                        },
                        new
                        {
                            Id = 81,
                            Address = "4204 Werner Light, Ocietown, Hungary",
                            City = "West Montyhaven",
                            DateOfBirth = new DateTime(2023, 5, 8, 5, 16, 3, 796, DateTimeKind.Local).AddTicks(8321),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Edmund",
                            FullName = "Edmund Aufderhar",
                            Gender = false,
                            LastName = "Aufderhar",
                            Phone = "500-563-6290",
                            Student_code = "StudentKcxDKcZu"
                        },
                        new
                        {
                            Id = 83,
                            Address = "38479 Johnny Springs, Gustton, Bulgaria",
                            City = "Walterville",
                            DateOfBirth = new DateTime(2023, 6, 6, 13, 29, 3, 684, DateTimeKind.Local).AddTicks(1277),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Belle",
                            FullName = "Belle Collins",
                            Gender = true,
                            LastName = "Collins",
                            Phone = "891.585.7775 x14248",
                            Student_code = "StudentEYB2fTMi"
                        },
                        new
                        {
                            Id = 85,
                            Address = "47127 Marjolaine Station, Lake Jessychester, Christmas Island",
                            City = "Wisokyburgh",
                            DateOfBirth = new DateTime(2023, 8, 11, 17, 31, 5, 412, DateTimeKind.Local).AddTicks(4955),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Ruth",
                            FullName = "Ruth Kuhlman",
                            Gender = true,
                            LastName = "Kuhlman",
                            Phone = "746.785.5862 x814",
                            Student_code = "StudentJB6AJfSE"
                        },
                        new
                        {
                            Id = 87,
                            Address = "45666 Maya Meadows, East Brentchester, Slovenia",
                            City = "East Jackson",
                            DateOfBirth = new DateTime(2023, 6, 1, 11, 47, 3, 729, DateTimeKind.Local).AddTicks(2950),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Madilyn",
                            FullName = "Madilyn Lowe",
                            Gender = true,
                            LastName = "Lowe",
                            Phone = "356.292.6263",
                            Student_code = "StudentNRYQl7wg"
                        },
                        new
                        {
                            Id = 89,
                            Address = "420 Jones View, Benedictbury, Ecuador",
                            City = "Port Ransomburgh",
                            DateOfBirth = new DateTime(2023, 3, 5, 19, 50, 12, 558, DateTimeKind.Local).AddTicks(9190),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Reba",
                            FullName = "Reba Von",
                            Gender = true,
                            LastName = "Von",
                            Phone = "440-893-9959 x919",
                            Student_code = "StudentovFCv3NH"
                        },
                        new
                        {
                            Id = 91,
                            Address = "7722 Rutherford Highway, Reinholdville, Costa Rica",
                            City = "Ferryview",
                            DateOfBirth = new DateTime(2023, 3, 2, 15, 33, 21, 652, DateTimeKind.Local).AddTicks(690),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Lizeth",
                            FullName = "Lizeth Bergnaum",
                            Gender = true,
                            LastName = "Bergnaum",
                            Phone = "597.814.5975 x1071",
                            Student_code = "StudentmXto2WL7"
                        },
                        new
                        {
                            Id = 93,
                            Address = "3127 Sauer Ports, West Sasha, Brunei Darussalam",
                            City = "Douglasberg",
                            DateOfBirth = new DateTime(2023, 2, 11, 0, 26, 34, 469, DateTimeKind.Local).AddTicks(3377),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Miles",
                            FullName = "Miles Emard",
                            Gender = false,
                            LastName = "Emard",
                            Phone = "985.432.5527 x03367",
                            Student_code = "StudentWvDWxBj0"
                        },
                        new
                        {
                            Id = 95,
                            Address = "295 Alverta Passage, New Wilfordmouth, Zimbabwe",
                            City = "Kuphalside",
                            DateOfBirth = new DateTime(2023, 3, 29, 0, 6, 23, 263, DateTimeKind.Local).AddTicks(8146),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Donald",
                            FullName = "Donald Botsford",
                            Gender = true,
                            LastName = "Botsford",
                            Phone = "787-427-8551",
                            Student_code = "StudentvbrkSv8B"
                        },
                        new
                        {
                            Id = 97,
                            Address = "3944 Velva Manors, Marcelleborough, Pakistan",
                            City = "South Terence",
                            DateOfBirth = new DateTime(2023, 4, 30, 20, 16, 57, 989, DateTimeKind.Local).AddTicks(889),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Olen",
                            FullName = "Olen Kessler",
                            Gender = true,
                            LastName = "Kessler",
                            Phone = "310-209-8987 x92956",
                            Student_code = "Student1sNB4s4T"
                        },
                        new
                        {
                            Id = 99,
                            Address = "145 Jacobs Wall, Hobartton, Heard Island and McDonald Islands",
                            City = "Mozelleshire",
                            DateOfBirth = new DateTime(2023, 8, 26, 10, 22, 41, 920, DateTimeKind.Local).AddTicks(6774),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Ahmed",
                            FullName = "Ahmed Wolf",
                            Gender = true,
                            LastName = "Wolf",
                            Phone = "1-513-397-4285 x1905",
                            Student_code = "StudentkxK9AFdS"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Supporter");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.HasOne("LibraryModels.Notifications", "Notifications")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "NotiId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Notifications");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Navigation("userConn");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userConn");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
