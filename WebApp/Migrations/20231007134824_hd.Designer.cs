// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231007134824_hd")]
    partial class hd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("userConnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userConnId")
                        .IsUnique()
                        .HasFilter("[userConnId] IS NOT NULL");

                    b.ToTable("tbNotification");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Decription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCreator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSupporter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("TicketStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameCreator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameSupporter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tbTicketDTO");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotiId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserConn");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailToConfirm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "d5ia4aqP",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$SRDOfviKH4JxBVUD3I8xKO0VV8QLffun/txk2bC381UOiQ0FU928u",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "7OsQSEec",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$KUrz0KsYyft0yZJ99ukSq.tHYDkZQEqyJe3PHx1GhxFYBtH3JVA0a",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "HntL7Rcy",
                            Email = "user@gmail.com",
                            Password = "$2a$11$Ydgwcuwil.MEnnXKfCh40.FhgL5Fe54jlnd6p2qFiDpk/ej7nqSs.",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "9316 Christa Rue, Jaydonland, Cape Verde",
                            City = "North Brycenton",
                            DateOfBirth = new DateTime(2023, 7, 2, 16, 47, 30, 462, DateTimeKind.Local).AddTicks(2890),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Sidney",
                            FullName = "Sidney Terry",
                            Gender = true,
                            LastName = "Terry",
                            Phone = "317-621-0063 x5938",
                            Student_code = "StudentBeOFkvb5"
                        },
                        new
                        {
                            Id = 3,
                            Address = "013 Luisa Highway, Ratkeville, Croatia",
                            City = "South Soledadberg",
                            DateOfBirth = new DateTime(2023, 8, 18, 14, 2, 31, 182, DateTimeKind.Local).AddTicks(7282),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Eloise",
                            FullName = "Eloise Funk",
                            Gender = true,
                            LastName = "Funk",
                            Phone = "387-944-0606 x694",
                            Student_code = "StudentQ1f0vO1h"
                        },
                        new
                        {
                            Id = 5,
                            Address = "5274 Stark Wells, West Unaport, Philippines",
                            City = "North Marlen",
                            DateOfBirth = new DateTime(2023, 2, 3, 22, 40, 16, 489, DateTimeKind.Local).AddTicks(4798),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Joana",
                            FullName = "Joana Kihn",
                            Gender = true,
                            LastName = "Kihn",
                            Phone = "(873) 919-2757 x8552",
                            Student_code = "StudentREenIPGK"
                        },
                        new
                        {
                            Id = 7,
                            Address = "436 Deckow Light, New Alliehaven, Albania",
                            City = "Colleenside",
                            DateOfBirth = new DateTime(2023, 2, 22, 2, 39, 40, 888, DateTimeKind.Local).AddTicks(5597),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Jaren",
                            FullName = "Jaren Schumm",
                            Gender = false,
                            LastName = "Schumm",
                            Phone = "803.560.8112",
                            Student_code = "Student7amqoIu3"
                        },
                        new
                        {
                            Id = 9,
                            Address = "593 Khalil Locks, East Carterchester, Puerto Rico",
                            City = "Claudinestad",
                            DateOfBirth = new DateTime(2023, 4, 12, 8, 3, 15, 861, DateTimeKind.Local).AddTicks(6532),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Tierra",
                            FullName = "Tierra Jacobi",
                            Gender = true,
                            LastName = "Jacobi",
                            Phone = "736.694.7172",
                            Student_code = "StudentM1eIsbcL"
                        },
                        new
                        {
                            Id = 11,
                            Address = "00466 Rosie Branch, Deeberg, Iraq",
                            City = "North Barryfort",
                            DateOfBirth = new DateTime(2022, 10, 28, 14, 22, 37, 25, DateTimeKind.Local).AddTicks(8312),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Lulu",
                            FullName = "Lulu McCullough",
                            Gender = false,
                            LastName = "McCullough",
                            Phone = "646.950.4378 x595",
                            Student_code = "StudenteDeRDchL"
                        },
                        new
                        {
                            Id = 13,
                            Address = "346 Jessika Manor, Amandaton, Switzerland",
                            City = "Marjoriefurt",
                            DateOfBirth = new DateTime(2023, 2, 3, 17, 21, 1, 85, DateTimeKind.Local).AddTicks(3621),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Herminia",
                            FullName = "Herminia Spinka",
                            Gender = false,
                            LastName = "Spinka",
                            Phone = "894.391.9355",
                            Student_code = "Student1jTl3Zlw"
                        },
                        new
                        {
                            Id = 15,
                            Address = "6959 Turner Flats, Wildermanburgh, Afghanistan",
                            City = "New Astrid",
                            DateOfBirth = new DateTime(2023, 8, 26, 13, 1, 19, 351, DateTimeKind.Local).AddTicks(2948),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Fermin",
                            FullName = "Fermin Emmerich",
                            Gender = false,
                            LastName = "Emmerich",
                            Phone = "(327) 627-7266 x179",
                            Student_code = "StudentXPTb1ebo"
                        },
                        new
                        {
                            Id = 17,
                            Address = "12815 Zemlak Drive, Port Jarvis, Greece",
                            City = "Fernton",
                            DateOfBirth = new DateTime(2023, 3, 18, 5, 44, 33, 543, DateTimeKind.Local).AddTicks(7925),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Zetta",
                            FullName = "Zetta Rempel",
                            Gender = false,
                            LastName = "Rempel",
                            Phone = "(358) 528-8289",
                            Student_code = "Student8ZtdY6IL"
                        },
                        new
                        {
                            Id = 19,
                            Address = "7421 Stokes Shore, West Daxbury, Mauritius",
                            City = "Marquardtfurt",
                            DateOfBirth = new DateTime(2022, 11, 25, 20, 41, 55, 821, DateTimeKind.Local).AddTicks(6155),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Josephine",
                            FullName = "Josephine Smith",
                            Gender = true,
                            LastName = "Smith",
                            Phone = "1-520-250-5156",
                            Student_code = "StudentQ6D5ddIa"
                        },
                        new
                        {
                            Id = 21,
                            Address = "10559 Curt Hill, Rennermouth, Antarctica (the territory South of 60 deg S)",
                            City = "New Rosiehaven",
                            DateOfBirth = new DateTime(2023, 7, 17, 2, 17, 15, 97, DateTimeKind.Local).AddTicks(4732),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Kory",
                            FullName = "Kory Pacocha",
                            Gender = false,
                            LastName = "Pacocha",
                            Phone = "(280) 745-5403",
                            Student_code = "StudentiOwuNqGj"
                        },
                        new
                        {
                            Id = 23,
                            Address = "24030 Denesik Expressway, South Elsa, Myanmar",
                            City = "East Donnell",
                            DateOfBirth = new DateTime(2023, 1, 6, 17, 52, 3, 617, DateTimeKind.Local).AddTicks(3599),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Asa",
                            FullName = "Asa Swift",
                            Gender = true,
                            LastName = "Swift",
                            Phone = "793-487-3333 x458",
                            Student_code = "Studentslc84u0A"
                        },
                        new
                        {
                            Id = 25,
                            Address = "744 Beaulah Wall, Robertoshire, Pakistan",
                            City = "New Greggfort",
                            DateOfBirth = new DateTime(2023, 7, 19, 16, 48, 59, 278, DateTimeKind.Local).AddTicks(3259),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Jaren",
                            FullName = "Jaren Conn",
                            Gender = true,
                            LastName = "Conn",
                            Phone = "847-714-1769",
                            Student_code = "StudentS4UiS6GG"
                        },
                        new
                        {
                            Id = 27,
                            Address = "046 Schumm Tunnel, South Tessie, Gibraltar",
                            City = "East Rutheside",
                            DateOfBirth = new DateTime(2023, 5, 25, 10, 7, 10, 259, DateTimeKind.Local).AddTicks(5774),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Xavier",
                            FullName = "Xavier Fay",
                            Gender = true,
                            LastName = "Fay",
                            Phone = "(919) 413-9082 x108",
                            Student_code = "StudentLwq1VuGM"
                        },
                        new
                        {
                            Id = 29,
                            Address = "0668 Hyatt Light, East Garnet, Cook Islands",
                            City = "Cristmouth",
                            DateOfBirth = new DateTime(2023, 9, 6, 10, 14, 53, 185, DateTimeKind.Local).AddTicks(6340),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Hermann",
                            FullName = "Hermann Adams",
                            Gender = true,
                            LastName = "Adams",
                            Phone = "677.752.5106 x205",
                            Student_code = "StudentTV98TnuM"
                        },
                        new
                        {
                            Id = 31,
                            Address = "550 Ophelia Cove, Elsemouth, Turkey",
                            City = "Caspershire",
                            DateOfBirth = new DateTime(2022, 12, 12, 3, 35, 4, 290, DateTimeKind.Local).AddTicks(5287),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Dawn",
                            FullName = "Dawn Bayer",
                            Gender = true,
                            LastName = "Bayer",
                            Phone = "815.895.2056 x5835",
                            Student_code = "Student1AH2NnON"
                        },
                        new
                        {
                            Id = 33,
                            Address = "843 Gladyce Mountain, Francescoport, Comoros",
                            City = "East Caitlyn",
                            DateOfBirth = new DateTime(2023, 9, 26, 16, 37, 31, 296, DateTimeKind.Local).AddTicks(7914),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Johanna",
                            FullName = "Johanna Sawayn",
                            Gender = true,
                            LastName = "Sawayn",
                            Phone = "1-901-672-7733 x6703",
                            Student_code = "StudentHIoa85c5"
                        },
                        new
                        {
                            Id = 35,
                            Address = "97486 Kuphal Roads, Vonmouth, Zimbabwe",
                            City = "Trantowchester",
                            DateOfBirth = new DateTime(2023, 8, 21, 8, 12, 29, 807, DateTimeKind.Local).AddTicks(5758),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Faustino",
                            FullName = "Faustino Mayert",
                            Gender = false,
                            LastName = "Mayert",
                            Phone = "219.438.2246",
                            Student_code = "StudentPrnWbzBm"
                        },
                        new
                        {
                            Id = 37,
                            Address = "4252 Eugenia Trafficway, Pollichmouth, Malaysia",
                            City = "Rickport",
                            DateOfBirth = new DateTime(2022, 11, 11, 9, 33, 19, 297, DateTimeKind.Local).AddTicks(6657),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Bert",
                            FullName = "Bert Johnson",
                            Gender = true,
                            LastName = "Johnson",
                            Phone = "944.237.1343 x856",
                            Student_code = "Studente23zQmYA"
                        },
                        new
                        {
                            Id = 39,
                            Address = "5778 Kacie Parkways, East Marleemouth, Qatar",
                            City = "Gerholdbury",
                            DateOfBirth = new DateTime(2023, 4, 26, 4, 2, 20, 366, DateTimeKind.Local).AddTicks(6115),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Rowland",
                            FullName = "Rowland Turner",
                            Gender = true,
                            LastName = "Turner",
                            Phone = "200-959-8683",
                            Student_code = "StudentYFby9wLs"
                        },
                        new
                        {
                            Id = 41,
                            Address = "424 Reginald Circles, New Laney, Palestinian Territory",
                            City = "North Fatima",
                            DateOfBirth = new DateTime(2023, 7, 17, 10, 24, 16, 525, DateTimeKind.Local).AddTicks(4648),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Greyson",
                            FullName = "Greyson Osinski",
                            Gender = true,
                            LastName = "Osinski",
                            Phone = "1-554-350-5790 x004",
                            Student_code = "StudentTrI8x3I3"
                        },
                        new
                        {
                            Id = 43,
                            Address = "8132 Merlin Pass, Gerhardtown, China",
                            City = "Cordiechester",
                            DateOfBirth = new DateTime(2022, 11, 25, 22, 5, 38, 133, DateTimeKind.Local).AddTicks(5510),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Alvena",
                            FullName = "Alvena Boyer",
                            Gender = false,
                            LastName = "Boyer",
                            Phone = "1-800-697-1951 x85406",
                            Student_code = "StudentmCr5GlP1"
                        },
                        new
                        {
                            Id = 45,
                            Address = "68135 Lebsack Center, Hilllburgh, Malaysia",
                            City = "Port Lyda",
                            DateOfBirth = new DateTime(2023, 5, 13, 4, 40, 9, 148, DateTimeKind.Local).AddTicks(6453),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Melyna",
                            FullName = "Melyna Hahn",
                            Gender = false,
                            LastName = "Hahn",
                            Phone = "560-738-7849",
                            Student_code = "Studentrddmux5e"
                        },
                        new
                        {
                            Id = 47,
                            Address = "61939 Meda Canyon, D'Amoreshire, Sierra Leone",
                            City = "North Abdullahhaven",
                            DateOfBirth = new DateTime(2023, 1, 4, 12, 48, 22, 611, DateTimeKind.Local).AddTicks(9450),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Flavie",
                            FullName = "Flavie Goldner",
                            Gender = false,
                            LastName = "Goldner",
                            Phone = "(505) 571-0276",
                            Student_code = "StudentpQnENKBD"
                        },
                        new
                        {
                            Id = 49,
                            Address = "46820 Franz Drive, New Mikeside, Monaco",
                            City = "South Marcosborough",
                            DateOfBirth = new DateTime(2023, 7, 13, 4, 34, 14, 195, DateTimeKind.Local).AddTicks(6850),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Magnolia",
                            FullName = "Magnolia Kuhic",
                            Gender = false,
                            LastName = "Kuhic",
                            Phone = "694.274.6331 x58147",
                            Student_code = "Students6iz5Y74"
                        },
                        new
                        {
                            Id = 51,
                            Address = "5060 Jordane Unions, Arnaldostad, Lebanon",
                            City = "East Graceburgh",
                            DateOfBirth = new DateTime(2022, 12, 30, 5, 43, 35, 389, DateTimeKind.Local).AddTicks(9175),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Gracie",
                            FullName = "Gracie Brakus",
                            Gender = false,
                            LastName = "Brakus",
                            Phone = "(980) 314-9674 x12368",
                            Student_code = "StudentcYTqr410"
                        },
                        new
                        {
                            Id = 53,
                            Address = "57006 Loma Fort, Jennyferbury, Ireland",
                            City = "West Esmeraldaborough",
                            DateOfBirth = new DateTime(2022, 10, 24, 22, 42, 41, 839, DateTimeKind.Local).AddTicks(1299),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "German",
                            FullName = "German Labadie",
                            Gender = true,
                            LastName = "Labadie",
                            Phone = "589-818-9022",
                            Student_code = "StudentHCOyTGsg"
                        },
                        new
                        {
                            Id = 55,
                            Address = "1238 Schultz Ford, Okunevachester, Greece",
                            City = "New Lomaborough",
                            DateOfBirth = new DateTime(2023, 7, 6, 18, 20, 21, 489, DateTimeKind.Local).AddTicks(5437),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Josiane",
                            FullName = "Josiane Wilderman",
                            Gender = true,
                            LastName = "Wilderman",
                            Phone = "(284) 271-5274",
                            Student_code = "StudenttkppByNT"
                        },
                        new
                        {
                            Id = 57,
                            Address = "397 Liliane Bridge, East Crawford, Saint Martin",
                            City = "Yostmouth",
                            DateOfBirth = new DateTime(2023, 1, 9, 2, 15, 8, 74, DateTimeKind.Local).AddTicks(6496),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Theresia",
                            FullName = "Theresia Jacobi",
                            Gender = false,
                            LastName = "Jacobi",
                            Phone = "1-660-526-6517 x979",
                            Student_code = "StudentbYgxl54O"
                        },
                        new
                        {
                            Id = 59,
                            Address = "6875 Borer Canyon, Pagacborough, Isle of Man",
                            City = "Port Tessie",
                            DateOfBirth = new DateTime(2023, 2, 5, 9, 32, 17, 861, DateTimeKind.Local).AddTicks(7500),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Vesta",
                            FullName = "Vesta Mayer",
                            Gender = false,
                            LastName = "Mayer",
                            Phone = "1-460-863-6063 x01454",
                            Student_code = "StudentCTTdl2sB"
                        },
                        new
                        {
                            Id = 61,
                            Address = "916 Jonathan Forge, Lake Koreybury, Rwanda",
                            City = "O'Keefeside",
                            DateOfBirth = new DateTime(2023, 7, 2, 12, 24, 45, 923, DateTimeKind.Local).AddTicks(8527),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Shakira",
                            FullName = "Shakira Kihn",
                            Gender = true,
                            LastName = "Kihn",
                            Phone = "419.663.7997",
                            Student_code = "StudentxDFiVQSq"
                        },
                        new
                        {
                            Id = 63,
                            Address = "857 Judd Square, New Vergiemouth, El Salvador",
                            City = "Pansybury",
                            DateOfBirth = new DateTime(2022, 10, 24, 13, 7, 14, 882, DateTimeKind.Local).AddTicks(6340),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Cleveland",
                            FullName = "Cleveland Hirthe",
                            Gender = true,
                            LastName = "Hirthe",
                            Phone = "1-417-524-5854",
                            Student_code = "StudentieyNyvMp"
                        },
                        new
                        {
                            Id = 65,
                            Address = "7415 Theodora Unions, Gislasonbury, New Caledonia",
                            City = "Jovaniborough",
                            DateOfBirth = new DateTime(2023, 3, 26, 1, 3, 43, 986, DateTimeKind.Local).AddTicks(8311),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Leopoldo",
                            FullName = "Leopoldo Lakin",
                            Gender = false,
                            LastName = "Lakin",
                            Phone = "1-253-962-8927 x805",
                            Student_code = "StudentPvrfv5Al"
                        },
                        new
                        {
                            Id = 67,
                            Address = "557 Sawayn Forge, East Davontemouth, Lao People's Democratic Republic",
                            City = "Lake Patriciaton",
                            DateOfBirth = new DateTime(2023, 2, 21, 12, 50, 49, 870, DateTimeKind.Local).AddTicks(1115),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Sanford",
                            FullName = "Sanford Aufderhar",
                            Gender = false,
                            LastName = "Aufderhar",
                            Phone = "325-300-8910",
                            Student_code = "StudentFGXFO6mS"
                        },
                        new
                        {
                            Id = 69,
                            Address = "449 Luettgen Burg, Sonyaborough, Barbados",
                            City = "Katrinaside",
                            DateOfBirth = new DateTime(2023, 6, 25, 4, 29, 46, 91, DateTimeKind.Local).AddTicks(9073),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Neil",
                            FullName = "Neil Schaefer",
                            Gender = false,
                            LastName = "Schaefer",
                            Phone = "1-357-255-9374 x53583",
                            Student_code = "StudentLmCOXSCJ"
                        },
                        new
                        {
                            Id = 71,
                            Address = "5700 Beatty Junctions, Robertsshire, Virgin Islands, U.S.",
                            City = "New Jaden",
                            DateOfBirth = new DateTime(2023, 2, 10, 0, 27, 5, 606, DateTimeKind.Local).AddTicks(9043),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Asha",
                            FullName = "Asha Schumm",
                            Gender = false,
                            LastName = "Schumm",
                            Phone = "(406) 319-8315 x11202",
                            Student_code = "StudentYsaOVnvY"
                        },
                        new
                        {
                            Id = 73,
                            Address = "50624 Raegan Plaza, New Sheridan, Antarctica (the territory South of 60 deg S)",
                            City = "South Erin",
                            DateOfBirth = new DateTime(2022, 10, 14, 13, 1, 1, 615, DateTimeKind.Local).AddTicks(8232),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Henri",
                            FullName = "Henri Hansen",
                            Gender = false,
                            LastName = "Hansen",
                            Phone = "478-280-8502",
                            Student_code = "StudentAbAPdY0M"
                        },
                        new
                        {
                            Id = 75,
                            Address = "3480 Connelly Light, Chelsieland, Peru",
                            City = "Port Alexaneberg",
                            DateOfBirth = new DateTime(2023, 9, 27, 23, 37, 13, 528, DateTimeKind.Local).AddTicks(6053),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Jana",
                            FullName = "Jana Kuvalis",
                            Gender = true,
                            LastName = "Kuvalis",
                            Phone = "391-890-3129",
                            Student_code = "StudentffyfISKl"
                        },
                        new
                        {
                            Id = 77,
                            Address = "62728 Shane Junction, New Margarettaburgh, Colombia",
                            City = "Greenberg",
                            DateOfBirth = new DateTime(2022, 10, 21, 17, 57, 27, 719, DateTimeKind.Local).AddTicks(5619),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Liza",
                            FullName = "Liza Lynch",
                            Gender = false,
                            LastName = "Lynch",
                            Phone = "1-910-447-6029",
                            Student_code = "StudentNIuPULYR"
                        },
                        new
                        {
                            Id = 79,
                            Address = "880 Shakira Tunnel, Lake Paulside, Indonesia",
                            City = "Mohamedland",
                            DateOfBirth = new DateTime(2023, 4, 30, 2, 40, 22, 521, DateTimeKind.Local).AddTicks(2982),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Burnice",
                            FullName = "Burnice Schultz",
                            Gender = true,
                            LastName = "Schultz",
                            Phone = "(450) 786-8348",
                            Student_code = "StudentLSEAFWhV"
                        },
                        new
                        {
                            Id = 81,
                            Address = "62974 Sim Wall, East Otha, Lebanon",
                            City = "South Eliasport",
                            DateOfBirth = new DateTime(2023, 6, 21, 4, 26, 2, 994, DateTimeKind.Local).AddTicks(644),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Rylan",
                            FullName = "Rylan Orn",
                            Gender = false,
                            LastName = "Orn",
                            Phone = "353.520.2360 x1727",
                            Student_code = "StudentGv3l3gqm"
                        },
                        new
                        {
                            Id = 83,
                            Address = "91984 Kuphal Alley, Odessahaven, Iceland",
                            City = "East Violettechester",
                            DateOfBirth = new DateTime(2022, 11, 23, 11, 33, 11, 833, DateTimeKind.Local).AddTicks(7762),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Aubrey",
                            FullName = "Aubrey Considine",
                            Gender = true,
                            LastName = "Considine",
                            Phone = "970-625-1564",
                            Student_code = "Studentbn39CNaG"
                        },
                        new
                        {
                            Id = 85,
                            Address = "14200 Goldner Island, West Johannfort, Saint Martin",
                            City = "South Preston",
                            DateOfBirth = new DateTime(2023, 9, 15, 18, 59, 29, 279, DateTimeKind.Local).AddTicks(4065),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Justine",
                            FullName = "Justine Okuneva",
                            Gender = false,
                            LastName = "Okuneva",
                            Phone = "1-466-732-1705 x1920",
                            Student_code = "StudentfkiuJYov"
                        },
                        new
                        {
                            Id = 87,
                            Address = "56550 Lucie Ridges, Olinborough, Austria",
                            City = "Mayeton",
                            DateOfBirth = new DateTime(2023, 6, 8, 8, 46, 44, 82, DateTimeKind.Local).AddTicks(5475),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Drew",
                            FullName = "Drew Frami",
                            Gender = false,
                            LastName = "Frami",
                            Phone = "479.903.8363",
                            Student_code = "StudentPIhMaGfE"
                        },
                        new
                        {
                            Id = 89,
                            Address = "0130 Michaela Mountain, Kihnside, Kazakhstan",
                            City = "Nyaton",
                            DateOfBirth = new DateTime(2022, 11, 20, 8, 52, 36, 503, DateTimeKind.Local).AddTicks(4),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Amanda",
                            FullName = "Amanda Rice",
                            Gender = false,
                            LastName = "Rice",
                            Phone = "348.724.4753 x90975",
                            Student_code = "StudentjyBD6RSZ"
                        },
                        new
                        {
                            Id = 91,
                            Address = "47643 Alexander Estates, Yazminborough, Bulgaria",
                            City = "West Vitaport",
                            DateOfBirth = new DateTime(2023, 3, 9, 4, 39, 52, 857, DateTimeKind.Local).AddTicks(6071),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Jaylin",
                            FullName = "Jaylin Cremin",
                            Gender = false,
                            LastName = "Cremin",
                            Phone = "(236) 218-7653",
                            Student_code = "StudentdYm94Zbs"
                        },
                        new
                        {
                            Id = 93,
                            Address = "35020 Caesar Way, New Hazelbury, Nepal",
                            City = "North Kaylin",
                            DateOfBirth = new DateTime(2022, 10, 24, 22, 21, 43, 200, DateTimeKind.Local).AddTicks(7630),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Makenna",
                            FullName = "Makenna Mayer",
                            Gender = true,
                            LastName = "Mayer",
                            Phone = "953-730-9616 x345",
                            Student_code = "Studentx2YxdI4x"
                        },
                        new
                        {
                            Id = 95,
                            Address = "2488 Caitlyn Divide, West Brooks, Maldives",
                            City = "West Darren",
                            DateOfBirth = new DateTime(2023, 6, 28, 11, 45, 4, 452, DateTimeKind.Local).AddTicks(2883),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Maiya",
                            FullName = "Maiya Metz",
                            Gender = false,
                            LastName = "Metz",
                            Phone = "1-253-709-5423 x99332",
                            Student_code = "StudentkwJAHVvV"
                        },
                        new
                        {
                            Id = 97,
                            Address = "552 Shanahan Island, West Tatyanaville, Bouvet Island (Bouvetoya)",
                            City = "Padbergland",
                            DateOfBirth = new DateTime(2023, 1, 29, 16, 43, 31, 351, DateTimeKind.Local).AddTicks(402),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Domenick",
                            FullName = "Domenick Runte",
                            Gender = false,
                            LastName = "Runte",
                            Phone = "1-700-664-3255",
                            Student_code = "Studentc6151fLc"
                        },
                        new
                        {
                            Id = 99,
                            Address = "521 Eden Ridge, North Leone, Sweden",
                            City = "Lake Adriel",
                            DateOfBirth = new DateTime(2023, 7, 27, 14, 37, 13, 459, DateTimeKind.Local).AddTicks(2147),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Dandre",
                            FullName = "Dandre Walsh",
                            Gender = true,
                            LastName = "Walsh",
                            Phone = "542.778.8975 x3999",
                            Student_code = "Student0tHuIvou"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.HasOne("LibraryModels.UserConn", "userConn")
                        .WithOne("Notifications")
                        .HasForeignKey("LibraryModels.Notifications", "userConnId");

                    b.Navigation("userConn");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.HasOne("LibraryModels.Users", "Users")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userConn");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
