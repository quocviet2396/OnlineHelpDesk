// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231001164752_OHD")]
    partial class OHD
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("userConnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbNotification");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotiId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotiId")
                        .IsUnique()
                        .HasFilter("[NotiId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserConn");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "itj2DlfG",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$nNkQJmN.K4JKxYZC/qY0xOMMUEH.TyZbaHLMiObtDZWvYzoPronTG",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "RS4ofJIq",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$CUvx.JWNfz8UAOzyFQRH8eJLGXvOF39StEvSpxmM/e.FlRudzgDfq",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "nsQTZCG7",
                            Email = "user@gmail.com",
                            Password = "$2a$11$3X9SIL1cP/pFvde6WRKRROPFKF9.97hVtmzOBc4tag6grM7SqOa2y",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "93210 Herman Park, North Dawsonborough, Democratic People's Republic of Korea",
                            City = "Hollismouth",
                            DateOfBirth = new DateTime(2023, 4, 13, 15, 10, 37, 997, DateTimeKind.Local).AddTicks(5441),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Allen",
                            FullName = "Allen Bernier",
                            Gender = false,
                            LastName = "Bernier",
                            Phone = "561.551.4426",
                            Student_code = "Student1Xu4S3zt"
                        },
                        new
                        {
                            Id = 3,
                            Address = "10279 Cody Keys, South Emelieside, Svalbard & Jan Mayen Islands",
                            City = "Port Ebonyshire",
                            DateOfBirth = new DateTime(2022, 10, 27, 19, 36, 32, 365, DateTimeKind.Local).AddTicks(9672),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Angeline",
                            FullName = "Angeline Wiza",
                            Gender = true,
                            LastName = "Wiza",
                            Phone = "1-641-436-4586",
                            Student_code = "StudentsXYWPVqG"
                        },
                        new
                        {
                            Id = 5,
                            Address = "473 Emmy Ways, Deronport, Macedonia",
                            City = "West Gilesberg",
                            DateOfBirth = new DateTime(2023, 4, 19, 13, 46, 51, 475, DateTimeKind.Local).AddTicks(6536),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Katelynn",
                            FullName = "Katelynn Conroy",
                            Gender = false,
                            LastName = "Conroy",
                            Phone = "943.322.1951 x4767",
                            Student_code = "Student9DyE3se5"
                        },
                        new
                        {
                            Id = 7,
                            Address = "617 Macejkovic Ramp, Port Fionaberg, Luxembourg",
                            City = "North Wallace",
                            DateOfBirth = new DateTime(2023, 3, 12, 8, 5, 43, 154, DateTimeKind.Local).AddTicks(7946),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Judy",
                            FullName = "Judy Kunde",
                            Gender = true,
                            LastName = "Kunde",
                            Phone = "(973) 598-0191",
                            Student_code = "StudentwyHX6kTW"
                        },
                        new
                        {
                            Id = 9,
                            Address = "670 Shyann Wells, Lake Delfina, Burkina Faso",
                            City = "Lake Henrifurt",
                            DateOfBirth = new DateTime(2022, 10, 4, 0, 11, 7, 77, DateTimeKind.Local).AddTicks(8137),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Vivianne",
                            FullName = "Vivianne Marquardt",
                            Gender = false,
                            LastName = "Marquardt",
                            Phone = "1-909-506-9100 x29339",
                            Student_code = "StudenttcI2B8lv"
                        },
                        new
                        {
                            Id = 11,
                            Address = "80572 Fay Mews, East Willis, Bahamas",
                            City = "North Leonora",
                            DateOfBirth = new DateTime(2023, 7, 9, 11, 50, 24, 236, DateTimeKind.Local).AddTicks(8509),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Aaliyah",
                            FullName = "Aaliyah Heller",
                            Gender = true,
                            LastName = "Heller",
                            Phone = "328.576.7853",
                            Student_code = "StudentszgEjeCH"
                        },
                        new
                        {
                            Id = 13,
                            Address = "383 Barbara Island, Charlenehaven, Canada",
                            City = "North Trystan",
                            DateOfBirth = new DateTime(2023, 1, 24, 1, 44, 34, 181, DateTimeKind.Local).AddTicks(787),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Louisa",
                            FullName = "Louisa Larkin",
                            Gender = false,
                            LastName = "Larkin",
                            Phone = "(551) 998-2745",
                            Student_code = "StudenteIxe37UN"
                        },
                        new
                        {
                            Id = 15,
                            Address = "9795 Marks Station, Lake Reid, Suriname",
                            City = "Randalmouth",
                            DateOfBirth = new DateTime(2023, 3, 22, 4, 25, 8, 961, DateTimeKind.Local).AddTicks(7859),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Kenton",
                            FullName = "Kenton Paucek",
                            Gender = true,
                            LastName = "Paucek",
                            Phone = "520.335.6458 x55192",
                            Student_code = "Studentxnm2Pwue"
                        },
                        new
                        {
                            Id = 17,
                            Address = "605 Lily Courts, Kennedymouth, Guinea",
                            City = "Lake Ilianaport",
                            DateOfBirth = new DateTime(2023, 6, 17, 1, 56, 42, 497, DateTimeKind.Local).AddTicks(7258),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Deborah",
                            FullName = "Deborah Beatty",
                            Gender = false,
                            LastName = "Beatty",
                            Phone = "226-523-6826 x25228",
                            Student_code = "StudentBsOammz8"
                        },
                        new
                        {
                            Id = 19,
                            Address = "0317 Ernest Points, Mariabury, Burkina Faso",
                            City = "South Holliechester",
                            DateOfBirth = new DateTime(2023, 2, 13, 20, 40, 13, 92, DateTimeKind.Local).AddTicks(1040),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Damien",
                            FullName = "Damien Luettgen",
                            Gender = true,
                            LastName = "Luettgen",
                            Phone = "1-612-657-6087",
                            Student_code = "Studento6lmwB9t"
                        },
                        new
                        {
                            Id = 21,
                            Address = "9535 Nader Wall, West Alfreda, Aruba",
                            City = "South Amaya",
                            DateOfBirth = new DateTime(2023, 8, 10, 22, 49, 49, 507, DateTimeKind.Local).AddTicks(3074),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Colin",
                            FullName = "Colin Bartoletti",
                            Gender = true,
                            LastName = "Bartoletti",
                            Phone = "1-915-479-1266 x2224",
                            Student_code = "StudentojbvCceO"
                        },
                        new
                        {
                            Id = 23,
                            Address = "7939 Juliana Flat, Yostshire, Lesotho",
                            City = "Lake Fredrick",
                            DateOfBirth = new DateTime(2023, 9, 25, 13, 40, 27, 77, DateTimeKind.Local).AddTicks(3961),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Laurence",
                            FullName = "Laurence Nitzsche",
                            Gender = false,
                            LastName = "Nitzsche",
                            Phone = "646-961-6072 x0050",
                            Student_code = "Studentg5PfmSvZ"
                        },
                        new
                        {
                            Id = 25,
                            Address = "2186 Crystel Loaf, Ellismouth, British Indian Ocean Territory (Chagos Archipelago)",
                            City = "North Kiarrashire",
                            DateOfBirth = new DateTime(2022, 12, 7, 17, 45, 4, 705, DateTimeKind.Local).AddTicks(7707),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Estrella",
                            FullName = "Estrella Lehner",
                            Gender = false,
                            LastName = "Lehner",
                            Phone = "(843) 936-0000 x9000",
                            Student_code = "Student8GzhXvXz"
                        },
                        new
                        {
                            Id = 27,
                            Address = "1421 Patrick Motorway, Shieldsmouth, Cape Verde",
                            City = "West Keenanville",
                            DateOfBirth = new DateTime(2023, 9, 23, 1, 59, 16, 130, DateTimeKind.Local).AddTicks(3218),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Guy",
                            FullName = "Guy Beatty",
                            Gender = true,
                            LastName = "Beatty",
                            Phone = "1-237-669-0456 x06262",
                            Student_code = "StudentzhsxqWqO"
                        },
                        new
                        {
                            Id = 29,
                            Address = "39483 Hermiston Stream, Lake Karen, Gibraltar",
                            City = "Batztown",
                            DateOfBirth = new DateTime(2023, 9, 28, 11, 10, 33, 306, DateTimeKind.Local).AddTicks(450),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Stacey",
                            FullName = "Stacey Block",
                            Gender = false,
                            LastName = "Block",
                            Phone = "495.270.0835",
                            Student_code = "StudentwXEAbFJg"
                        },
                        new
                        {
                            Id = 31,
                            Address = "9232 Block Lodge, Mooreville, Guatemala",
                            City = "Rolfsonton",
                            DateOfBirth = new DateTime(2023, 1, 14, 23, 25, 53, 152, DateTimeKind.Local).AddTicks(428),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "Lane",
                            FullName = "Lane Gleason",
                            Gender = true,
                            LastName = "Gleason",
                            Phone = "(728) 873-1296 x9480",
                            Student_code = "StudentXTjwdqal"
                        },
                        new
                        {
                            Id = 33,
                            Address = "372 Marlen Villages, South Caleb, Ethiopia",
                            City = "Hackettland",
                            DateOfBirth = new DateTime(2023, 7, 31, 21, 13, 3, 329, DateTimeKind.Local).AddTicks(1382),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Retha",
                            FullName = "Retha Considine",
                            Gender = false,
                            LastName = "Considine",
                            Phone = "677.504.6643 x61060",
                            Student_code = "StudentN0vxEcCM"
                        },
                        new
                        {
                            Id = 35,
                            Address = "2553 Ova Pines, West Cayla, Portugal",
                            City = "Hickleside",
                            DateOfBirth = new DateTime(2023, 8, 29, 13, 36, 17, 634, DateTimeKind.Local).AddTicks(5088),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Coty",
                            FullName = "Coty King",
                            Gender = false,
                            LastName = "King",
                            Phone = "(882) 583-5573 x374",
                            Student_code = "StudentBrT8qu5c"
                        },
                        new
                        {
                            Id = 37,
                            Address = "260 Kenneth Mills, Kossborough, Germany",
                            City = "Millerport",
                            DateOfBirth = new DateTime(2023, 3, 31, 8, 48, 52, 160, DateTimeKind.Local).AddTicks(9513),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Kylie",
                            FullName = "Kylie Dibbert",
                            Gender = false,
                            LastName = "Dibbert",
                            Phone = "681.395.3199",
                            Student_code = "Student4RE1g0VY"
                        },
                        new
                        {
                            Id = 39,
                            Address = "119 Marks Overpass, Ortizborough, Gambia",
                            City = "Port Kobe",
                            DateOfBirth = new DateTime(2023, 4, 19, 8, 54, 40, 38, DateTimeKind.Local).AddTicks(7816),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Darby",
                            FullName = "Darby Luettgen",
                            Gender = true,
                            LastName = "Luettgen",
                            Phone = "(679) 679-3805 x980",
                            Student_code = "Student9UJsJhBC"
                        },
                        new
                        {
                            Id = 41,
                            Address = "94296 Lang Trail, South Jamey, Oman",
                            City = "Gleasonmouth",
                            DateOfBirth = new DateTime(2023, 2, 12, 15, 38, 5, 974, DateTimeKind.Local).AddTicks(9154),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Charlotte",
                            FullName = "Charlotte Dooley",
                            Gender = true,
                            LastName = "Dooley",
                            Phone = "(659) 423-4458 x16733",
                            Student_code = "StudentAMI73lZe"
                        },
                        new
                        {
                            Id = 43,
                            Address = "559 Blanca Cliff, Colebury, Hungary",
                            City = "Bednarbury",
                            DateOfBirth = new DateTime(2023, 1, 23, 0, 37, 29, 514, DateTimeKind.Local).AddTicks(8430),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Jarrett",
                            FullName = "Jarrett Goodwin",
                            Gender = false,
                            LastName = "Goodwin",
                            Phone = "451.341.9606",
                            Student_code = "StudentisJV03to"
                        },
                        new
                        {
                            Id = 45,
                            Address = "2675 Fahey Land, East Michealbury, Kuwait",
                            City = "Lake Vena",
                            DateOfBirth = new DateTime(2023, 3, 2, 21, 30, 29, 307, DateTimeKind.Local).AddTicks(5704),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Gillian",
                            FullName = "Gillian Gutkowski",
                            Gender = false,
                            LastName = "Gutkowski",
                            Phone = "474.538.1040 x9611",
                            Student_code = "StudentsqKDNNtL"
                        },
                        new
                        {
                            Id = 47,
                            Address = "832 Gusikowski Stravenue, East Sarina, Syrian Arab Republic",
                            City = "Lake Kaci",
                            DateOfBirth = new DateTime(2023, 1, 29, 9, 17, 12, 34, DateTimeKind.Local).AddTicks(8584),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Clarabelle",
                            FullName = "Clarabelle Hoeger",
                            Gender = false,
                            LastName = "Hoeger",
                            Phone = "(535) 231-0572 x1808",
                            Student_code = "Studentif5xeF3p"
                        },
                        new
                        {
                            Id = 49,
                            Address = "275 Torphy Lodge, Fayside, French Guiana",
                            City = "Labadiehaven",
                            DateOfBirth = new DateTime(2023, 5, 15, 4, 54, 5, 900, DateTimeKind.Local).AddTicks(180),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Waino",
                            FullName = "Waino Corwin",
                            Gender = true,
                            LastName = "Corwin",
                            Phone = "811-752-5964",
                            Student_code = "Student4ywbRaXC"
                        },
                        new
                        {
                            Id = 51,
                            Address = "44060 Strosin Glens, Reymundohaven, Indonesia",
                            City = "North Davon",
                            DateOfBirth = new DateTime(2023, 4, 10, 16, 22, 19, 596, DateTimeKind.Local).AddTicks(4076),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Samanta",
                            FullName = "Samanta Rohan",
                            Gender = false,
                            LastName = "Rohan",
                            Phone = "(274) 416-7869 x4933",
                            Student_code = "StudentXKP7V6Zh"
                        },
                        new
                        {
                            Id = 53,
                            Address = "23878 Barrows Pines, Denesikbury, Palestinian Territory",
                            City = "Champlinland",
                            DateOfBirth = new DateTime(2023, 5, 6, 3, 38, 3, 684, DateTimeKind.Local).AddTicks(6224),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Shanelle",
                            FullName = "Shanelle Mueller",
                            Gender = true,
                            LastName = "Mueller",
                            Phone = "1-660-825-6087 x578",
                            Student_code = "StudentiNcDdDG3"
                        },
                        new
                        {
                            Id = 55,
                            Address = "334 Cyril Freeway, New Birdieport, Palau",
                            City = "Kerlukeview",
                            DateOfBirth = new DateTime(2023, 5, 2, 14, 37, 25, 714, DateTimeKind.Local).AddTicks(6909),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Terence",
                            FullName = "Terence Adams",
                            Gender = true,
                            LastName = "Adams",
                            Phone = "1-442-210-0873 x957",
                            Student_code = "StudentEGqtGkN4"
                        },
                        new
                        {
                            Id = 57,
                            Address = "9134 Clotilde Way, Jazmintown, Latvia",
                            City = "Nienowfurt",
                            DateOfBirth = new DateTime(2023, 7, 20, 0, 37, 15, 825, DateTimeKind.Local).AddTicks(2956),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Lowell",
                            FullName = "Lowell Marquardt",
                            Gender = false,
                            LastName = "Marquardt",
                            Phone = "567.579.6159 x953",
                            Student_code = "StudentMtFmlZeZ"
                        },
                        new
                        {
                            Id = 59,
                            Address = "24262 Ledner Route, Franciscomouth, Peru",
                            City = "West Jeromyside",
                            DateOfBirth = new DateTime(2023, 3, 6, 0, 8, 12, 795, DateTimeKind.Local).AddTicks(6640),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Diego",
                            FullName = "Diego Greenholt",
                            Gender = false,
                            LastName = "Greenholt",
                            Phone = "(929) 943-4361",
                            Student_code = "StudentirhoeArq"
                        },
                        new
                        {
                            Id = 61,
                            Address = "755 Kiana Garden, South Haydenberg, Mali",
                            City = "New Nadia",
                            DateOfBirth = new DateTime(2023, 4, 21, 0, 41, 7, 984, DateTimeKind.Local).AddTicks(3594),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Chanel",
                            FullName = "Chanel Abshire",
                            Gender = true,
                            LastName = "Abshire",
                            Phone = "(370) 357-7926 x8311",
                            Student_code = "StudentPzgn2vpL"
                        },
                        new
                        {
                            Id = 63,
                            Address = "70059 Bauch Plain, Monserratside, Ukraine",
                            City = "Ludiehaven",
                            DateOfBirth = new DateTime(2023, 7, 23, 23, 36, 38, 918, DateTimeKind.Local).AddTicks(2492),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Pierce",
                            FullName = "Pierce Stracke",
                            Gender = false,
                            LastName = "Stracke",
                            Phone = "466-316-7600 x3320",
                            Student_code = "StudentoPvFIV8y"
                        },
                        new
                        {
                            Id = 65,
                            Address = "47981 Marks Plaza, Naderchester, Jordan",
                            City = "East Waltonchester",
                            DateOfBirth = new DateTime(2022, 11, 29, 3, 30, 26, 141, DateTimeKind.Local).AddTicks(3711),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Leila",
                            FullName = "Leila Feeney",
                            Gender = false,
                            LastName = "Feeney",
                            Phone = "1-731-409-5314 x82700",
                            Student_code = "Student9Q47k3a0"
                        },
                        new
                        {
                            Id = 67,
                            Address = "1304 Gislason Union, West Roelfurt, Republic of Korea",
                            City = "Torpview",
                            DateOfBirth = new DateTime(2023, 1, 29, 12, 50, 44, 714, DateTimeKind.Local).AddTicks(5448),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Tiana",
                            FullName = "Tiana Thompson",
                            Gender = false,
                            LastName = "Thompson",
                            Phone = "1-552-537-8190 x087",
                            Student_code = "Studentzt8tKaWI"
                        },
                        new
                        {
                            Id = 69,
                            Address = "3380 Jayme Falls, Chaunceystad, Moldova",
                            City = "East Alaina",
                            DateOfBirth = new DateTime(2023, 9, 24, 9, 38, 23, 682, DateTimeKind.Local).AddTicks(9610),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Libbie",
                            FullName = "Libbie Schuppe",
                            Gender = true,
                            LastName = "Schuppe",
                            Phone = "662-872-6543 x943",
                            Student_code = "Student1TQtXMEr"
                        },
                        new
                        {
                            Id = 71,
                            Address = "18595 Keyon Center, Watsicaburgh, Netherlands",
                            City = "East Twila",
                            DateOfBirth = new DateTime(2023, 5, 13, 6, 26, 17, 884, DateTimeKind.Local).AddTicks(6184),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Robyn",
                            FullName = "Robyn Goldner",
                            Gender = false,
                            LastName = "Goldner",
                            Phone = "(403) 664-8254 x2131",
                            Student_code = "StudentZTJavVyS"
                        },
                        new
                        {
                            Id = 73,
                            Address = "281 Izaiah Lodge, South Josephine, Sierra Leone",
                            City = "Carterfort",
                            DateOfBirth = new DateTime(2023, 1, 3, 0, 37, 2, 681, DateTimeKind.Local).AddTicks(5936),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Desiree",
                            FullName = "Desiree Stokes",
                            Gender = false,
                            LastName = "Stokes",
                            Phone = "586-315-7426 x6550",
                            Student_code = "StudentMdxxY4Ll"
                        },
                        new
                        {
                            Id = 75,
                            Address = "09420 Eliza Forks, Georgianaport, Namibia",
                            City = "Johathanstad",
                            DateOfBirth = new DateTime(2023, 7, 28, 21, 54, 38, 100, DateTimeKind.Local).AddTicks(1380),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Melyssa",
                            FullName = "Melyssa Kreiger",
                            Gender = false,
                            LastName = "Kreiger",
                            Phone = "756.653.2242",
                            Student_code = "Studentu0nl1WNd"
                        },
                        new
                        {
                            Id = 77,
                            Address = "7164 McLaughlin Row, Port Cleve, Jamaica",
                            City = "Sengershire",
                            DateOfBirth = new DateTime(2022, 10, 15, 17, 21, 52, 992, DateTimeKind.Local).AddTicks(8347),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Gracie",
                            FullName = "Gracie Collier",
                            Gender = false,
                            LastName = "Collier",
                            Phone = "(573) 273-7956 x54085",
                            Student_code = "Student2KkRaaHD"
                        },
                        new
                        {
                            Id = 79,
                            Address = "7928 Deron Isle, Port Kayley, Gibraltar",
                            City = "Reesetown",
                            DateOfBirth = new DateTime(2023, 6, 30, 11, 49, 19, 460, DateTimeKind.Local).AddTicks(9468),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Nicholas",
                            FullName = "Nicholas Mraz",
                            Gender = true,
                            LastName = "Mraz",
                            Phone = "1-691-406-2383 x353",
                            Student_code = "Studentist0vAB5"
                        },
                        new
                        {
                            Id = 81,
                            Address = "8217 Colleen Greens, Port Angela, Belarus",
                            City = "East Jeanne",
                            DateOfBirth = new DateTime(2023, 3, 13, 19, 39, 37, 303, DateTimeKind.Local).AddTicks(805),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Rashawn",
                            FullName = "Rashawn Swift",
                            Gender = true,
                            LastName = "Swift",
                            Phone = "(418) 538-3927",
                            Student_code = "StudentqeOK5tOa"
                        },
                        new
                        {
                            Id = 83,
                            Address = "78556 Ivah Drives, East Eldred, Gibraltar",
                            City = "Desireeville",
                            DateOfBirth = new DateTime(2023, 2, 18, 6, 54, 9, 103, DateTimeKind.Local).AddTicks(68),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Madalyn",
                            FullName = "Madalyn Koch",
                            Gender = true,
                            LastName = "Koch",
                            Phone = "430-378-8216 x1647",
                            Student_code = "StudentBTN2ZjuH"
                        },
                        new
                        {
                            Id = 85,
                            Address = "7183 Hertha Plaza, Florianside, Guadeloupe",
                            City = "South Emmitt",
                            DateOfBirth = new DateTime(2022, 11, 22, 6, 23, 7, 909, DateTimeKind.Local).AddTicks(5026),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Brennon",
                            FullName = "Brennon Blick",
                            Gender = false,
                            LastName = "Blick",
                            Phone = "766.487.5384 x936",
                            Student_code = "StudentY38yugcC"
                        },
                        new
                        {
                            Id = 87,
                            Address = "29432 Littel Canyon, Giachester, Sierra Leone",
                            City = "Nealside",
                            DateOfBirth = new DateTime(2023, 2, 25, 19, 49, 32, 949, DateTimeKind.Local).AddTicks(4860),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Bulah",
                            FullName = "Bulah Ondricka",
                            Gender = true,
                            LastName = "Ondricka",
                            Phone = "(600) 412-0725 x7389",
                            Student_code = "StudentqBNAZdVt"
                        },
                        new
                        {
                            Id = 89,
                            Address = "670 Lynch Village, Elysehaven, Mauritius",
                            City = "Lake Claudiaberg",
                            DateOfBirth = new DateTime(2023, 3, 7, 4, 30, 35, 340, DateTimeKind.Local).AddTicks(6165),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Arjun",
                            FullName = "Arjun Goldner",
                            Gender = false,
                            LastName = "Goldner",
                            Phone = "723.588.4340 x3151",
                            Student_code = "StudentNGb1k9lo"
                        },
                        new
                        {
                            Id = 91,
                            Address = "3613 Abagail Underpass, South Lydiaview, Lithuania",
                            City = "West Eusebiomouth",
                            DateOfBirth = new DateTime(2023, 9, 13, 18, 8, 49, 670, DateTimeKind.Local).AddTicks(1787),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Elise",
                            FullName = "Elise Lemke",
                            Gender = true,
                            LastName = "Lemke",
                            Phone = "1-948-948-9400 x362",
                            Student_code = "StudentFBW98yXn"
                        },
                        new
                        {
                            Id = 93,
                            Address = "392 Loraine Falls, Runtestad, Trinidad and Tobago",
                            City = "Darehaven",
                            DateOfBirth = new DateTime(2023, 9, 21, 20, 22, 17, 712, DateTimeKind.Local).AddTicks(5669),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Marisa",
                            FullName = "Marisa Huel",
                            Gender = false,
                            LastName = "Huel",
                            Phone = "(308) 696-3074 x88839",
                            Student_code = "Studentb2nShYm7"
                        },
                        new
                        {
                            Id = 95,
                            Address = "79321 Pete Extension, South Brenda, Mauritania",
                            City = "Kelsiton",
                            DateOfBirth = new DateTime(2022, 12, 16, 18, 53, 27, 424, DateTimeKind.Local).AddTicks(9304),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Geo",
                            FullName = "Geo Considine",
                            Gender = true,
                            LastName = "Considine",
                            Phone = "806-974-1243",
                            Student_code = "StudentGAlfDodo"
                        },
                        new
                        {
                            Id = 97,
                            Address = "3957 Jarrod Causeway, South Kennyhaven, Lebanon",
                            City = "Gusikowskiland",
                            DateOfBirth = new DateTime(2022, 11, 29, 21, 39, 22, 983, DateTimeKind.Local).AddTicks(5334),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Tate",
                            FullName = "Tate Zieme",
                            Gender = true,
                            LastName = "Zieme",
                            Phone = "635.452.2481 x40666",
                            Student_code = "StudentcLfWzpZu"
                        },
                        new
                        {
                            Id = 99,
                            Address = "24325 Hartmann Locks, South Margie, Bangladesh",
                            City = "North Cristobal",
                            DateOfBirth = new DateTime(2023, 1, 30, 22, 36, 57, 309, DateTimeKind.Local).AddTicks(7955),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Dora",
                            FullName = "Dora Becker",
                            Gender = true,
                            LastName = "Becker",
                            Phone = "853.324.3521",
                            Student_code = "StudentCtEAd4qC"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comments", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.HasOne("LibraryModels.Notifications", "Notifications")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "NotiId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Notifications");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Navigation("userConn");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userConn");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
