// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Database_helper;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewId")
                        .HasColumnType("int");

                    b.Property<int>("NewsID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewsID");

                    b.ToTable("tbComments");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbDiscussion");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All problems related to class-rooms",
                            Name = "Class-rooms"
                        },
                        new
                        {
                            Id = 2,
                            Description = "All problems related to labs",
                            Name = "Labs"
                        },
                        new
                        {
                            Id = 3,
                            Description = "All problems related to hostels",
                            Name = "Hostels"
                        },
                        new
                        {
                            Id = 4,
                            Description = "All problems related to mess",
                            Name = "Mess"
                        },
                        new
                        {
                            Id = 5,
                            Description = "All problems related to canteen",
                            Name = "Canteen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "All problems related to gymnasium",
                            Name = "Gymnasium"
                        },
                        new
                        {
                            Id = 7,
                            Description = "All problems related to Computer Centre",
                            Name = "Computer Centre"
                        },
                        new
                        {
                            Id = 8,
                            Description = "All problems related to library",
                            Name = "Library"
                        },
                        new
                        {
                            Id = 9,
                            Description = "All problems related to after-school clubs",
                            Name = "After-school clubs"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Other problems",
                            Name = "Other problems"
                        });
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbNews");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("readed")
                        .HasColumnType("bit");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("userConnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbNotification");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Critical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "High"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Escalation"
                        });
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SupporterId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbTicket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbTicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotiId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotiId")
                        .IsUnique()
                        .HasFilter("[NotiId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserConn");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbUserInfo");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "qvwdN58I",
                            Email = "superadmin@gmail.com",
                            Password = "$2a$11$YwokxByOb8K6D3Zxeh3Q.uYeVI2y5NZy.isx/eQWZGn0NSw332dRG",
                            Role = "Admin",
                            Status = true,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "tR0RmLPV",
                            Email = "supporter@gmail.com",
                            Password = "$2a$11$J7ktN4YWgIFDJm6HFCxky.zSuyPf6.Qs0FcGIhnZkdcafLn5RcxBW",
                            Role = "Supporter",
                            Status = true,
                            UserName = "Supporter"
                        },
                        new
                        {
                            Id = 3,
                            Code = "91UBfWES",
                            Email = "user@gmail.com",
                            Password = "$2a$11$HQbib9hUn.QVLtmRit78MOvKI68FrHGvTXn4w5spSqQzPV6e4vdpa",
                            Role = "User",
                            Status = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("LibraryModels.UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbUsersInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "8401 Leilani Streets, South Raheemberg, Seychelles",
                            City = "North Alexamouth",
                            DateOfBirth = new DateTime(2022, 11, 9, 17, 2, 8, 490, DateTimeKind.Local).AddTicks(5449),
                            Email = "onhdexmapletest1991@gmail.com",
                            FirstName = "Myrtie",
                            FullName = "Myrtie Walker",
                            Gender = true,
                            LastName = "Walker",
                            Phone = "858-245-2440",
                            Student_code = "Student70q8dHAZ"
                        },
                        new
                        {
                            Id = 3,
                            Address = "066 Lemke Mews, East Alfordville, Heard Island and McDonald Islands",
                            City = "North Annabelle",
                            DateOfBirth = new DateTime(2023, 8, 28, 11, 10, 29, 130, DateTimeKind.Local).AddTicks(1338),
                            Email = "onhdexmapletest1993@gmail.com",
                            FirstName = "Daija",
                            FullName = "Daija Gleason",
                            Gender = true,
                            LastName = "Gleason",
                            Phone = "378-428-4464 x90629",
                            Student_code = "StudentUrasKYMK"
                        },
                        new
                        {
                            Id = 5,
                            Address = "4390 Gislason Mews, Terrillburgh, Uruguay",
                            City = "Lake Arlo",
                            DateOfBirth = new DateTime(2023, 7, 8, 13, 1, 36, 992, DateTimeKind.Local).AddTicks(8580),
                            Email = "onhdexmapletest1995@gmail.com",
                            FirstName = "Zaria",
                            FullName = "Zaria Windler",
                            Gender = true,
                            LastName = "Windler",
                            Phone = "(339) 679-8163",
                            Student_code = "StudentNFbLUbF1"
                        },
                        new
                        {
                            Id = 7,
                            Address = "2784 Ova Ports, Lake Joanie, Sri Lanka",
                            City = "Lake Jalonmouth",
                            DateOfBirth = new DateTime(2023, 7, 22, 6, 22, 56, 934, DateTimeKind.Local).AddTicks(602),
                            Email = "onhdexmapletest1997@gmail.com",
                            FirstName = "Julius",
                            FullName = "Julius Heaney",
                            Gender = true,
                            LastName = "Heaney",
                            Phone = "208.666.8067 x203",
                            Student_code = "StudentW1Ae9Viv"
                        },
                        new
                        {
                            Id = 9,
                            Address = "6433 Runte Lodge, East Cydneybury, British Indian Ocean Territory (Chagos Archipelago)",
                            City = "Port Hillarymouth",
                            DateOfBirth = new DateTime(2022, 10, 24, 5, 11, 15, 963, DateTimeKind.Local).AddTicks(1470),
                            Email = "onhdexmapletest1999@gmail.com",
                            FirstName = "Eugene",
                            FullName = "Eugene Maggio",
                            Gender = false,
                            LastName = "Maggio",
                            Phone = "1-715-941-4988 x1526",
                            Student_code = "StudentU6va2kFL"
                        },
                        new
                        {
                            Id = 11,
                            Address = "298 Llewellyn Orchard, Kurtisburgh, Palau",
                            City = "Port Naomieshire",
                            DateOfBirth = new DateTime(2023, 4, 17, 6, 1, 20, 633, DateTimeKind.Local).AddTicks(4116),
                            Email = "onhdexmapletest19911@gmail.com",
                            FirstName = "Hillary",
                            FullName = "Hillary Hessel",
                            Gender = false,
                            LastName = "Hessel",
                            Phone = "1-520-635-6693 x18226",
                            Student_code = "Studentr0J2Jn7S"
                        },
                        new
                        {
                            Id = 13,
                            Address = "71015 Dereck Junction, Port Lucinda, Georgia",
                            City = "New Maximus",
                            DateOfBirth = new DateTime(2023, 1, 27, 15, 12, 13, 993, DateTimeKind.Local).AddTicks(4272),
                            Email = "onhdexmapletest19913@gmail.com",
                            FirstName = "Eryn",
                            FullName = "Eryn Brown",
                            Gender = true,
                            LastName = "Brown",
                            Phone = "1-483-393-2080 x3862",
                            Student_code = "StudentOh4R9d7l"
                        },
                        new
                        {
                            Id = 15,
                            Address = "89643 Rafael Ville, West Tom, Hungary",
                            City = "Lake Justinestad",
                            DateOfBirth = new DateTime(2023, 7, 7, 15, 19, 29, 456, DateTimeKind.Local).AddTicks(3835),
                            Email = "onhdexmapletest19915@gmail.com",
                            FirstName = "Jensen",
                            FullName = "Jensen Little",
                            Gender = false,
                            LastName = "Little",
                            Phone = "295-792-8880 x00029",
                            Student_code = "StudentR7rC8smm"
                        },
                        new
                        {
                            Id = 17,
                            Address = "92147 Kassandra Club, Jacyntheshire, Lao People's Democratic Republic",
                            City = "Reillyberg",
                            DateOfBirth = new DateTime(2022, 11, 25, 11, 14, 21, 798, DateTimeKind.Local).AddTicks(9088),
                            Email = "onhdexmapletest19917@gmail.com",
                            FirstName = "Alba",
                            FullName = "Alba Conn",
                            Gender = true,
                            LastName = "Conn",
                            Phone = "(265) 861-1812 x66903",
                            Student_code = "StudentmVmSr8VU"
                        },
                        new
                        {
                            Id = 19,
                            Address = "8196 Filiberto Port, West Chelsea, Palau",
                            City = "Deborahborough",
                            DateOfBirth = new DateTime(2023, 1, 20, 8, 20, 55, 656, DateTimeKind.Local).AddTicks(9011),
                            Email = "onhdexmapletest19919@gmail.com",
                            FirstName = "Krystina",
                            FullName = "Krystina Cummerata",
                            Gender = false,
                            LastName = "Cummerata",
                            Phone = "271-270-0355",
                            Student_code = "StudentCbdMVSz0"
                        },
                        new
                        {
                            Id = 21,
                            Address = "690 Anjali Lights, East Turner, Paraguay",
                            City = "East Malika",
                            DateOfBirth = new DateTime(2023, 7, 30, 9, 38, 2, 513, DateTimeKind.Local).AddTicks(5517),
                            Email = "onhdexmapletest19921@gmail.com",
                            FirstName = "Verla",
                            FullName = "Verla Kris",
                            Gender = false,
                            LastName = "Kris",
                            Phone = "324.790.1105",
                            Student_code = "StudentblQc1Keq"
                        },
                        new
                        {
                            Id = 23,
                            Address = "1766 Dach Club, Leonieberg, Macao",
                            City = "Ritchieton",
                            DateOfBirth = new DateTime(2023, 3, 22, 2, 21, 31, 61, DateTimeKind.Local).AddTicks(7959),
                            Email = "onhdexmapletest19923@gmail.com",
                            FirstName = "Theresa",
                            FullName = "Theresa Tremblay",
                            Gender = false,
                            LastName = "Tremblay",
                            Phone = "1-441-239-8950 x201",
                            Student_code = "StudentqXp11Ule"
                        },
                        new
                        {
                            Id = 25,
                            Address = "5665 Milton Turnpike, Hickletown, Vanuatu",
                            City = "Port Hillarymouth",
                            DateOfBirth = new DateTime(2022, 10, 15, 18, 45, 22, 65, DateTimeKind.Local).AddTicks(5532),
                            Email = "onhdexmapletest19925@gmail.com",
                            FirstName = "Thora",
                            FullName = "Thora Littel",
                            Gender = true,
                            LastName = "Littel",
                            Phone = "587-945-8974 x81373",
                            Student_code = "Studentxa9ZaGrz"
                        },
                        new
                        {
                            Id = 27,
                            Address = "35255 Meagan Squares, North Shanel, Bahrain",
                            City = "South Jon",
                            DateOfBirth = new DateTime(2022, 12, 19, 0, 33, 50, 360, DateTimeKind.Local).AddTicks(2477),
                            Email = "onhdexmapletest19927@gmail.com",
                            FirstName = "Kacey",
                            FullName = "Kacey Crooks",
                            Gender = true,
                            LastName = "Crooks",
                            Phone = "272.541.0897 x61129",
                            Student_code = "Studenta4Uxj9rK"
                        },
                        new
                        {
                            Id = 29,
                            Address = "43403 Kreiger Fork, Niaport, Tokelau",
                            City = "Anastacioton",
                            DateOfBirth = new DateTime(2023, 8, 30, 1, 22, 26, 420, DateTimeKind.Local).AddTicks(3269),
                            Email = "onhdexmapletest19929@gmail.com",
                            FirstName = "Shaniya",
                            FullName = "Shaniya Okuneva",
                            Gender = true,
                            LastName = "Okuneva",
                            Phone = "536.594.3495 x858",
                            Student_code = "StudentFjdUFu1f"
                        },
                        new
                        {
                            Id = 31,
                            Address = "952 Flatley Ridges, New Daltonland, Cayman Islands",
                            City = "Port Mohammedstad",
                            DateOfBirth = new DateTime(2023, 8, 18, 20, 15, 31, 634, DateTimeKind.Local).AddTicks(9405),
                            Email = "onhdexmapletest19931@gmail.com",
                            FirstName = "August",
                            FullName = "August Turner",
                            Gender = false,
                            LastName = "Turner",
                            Phone = "1-438-849-9264 x1025",
                            Student_code = "Student1hwBldAi"
                        },
                        new
                        {
                            Id = 33,
                            Address = "42591 West Keys, Lake Cortneyton, Gabon",
                            City = "Meghanshire",
                            DateOfBirth = new DateTime(2023, 5, 5, 12, 44, 20, 983, DateTimeKind.Local).AddTicks(5999),
                            Email = "onhdexmapletest19933@gmail.com",
                            FirstName = "Zakary",
                            FullName = "Zakary Littel",
                            Gender = false,
                            LastName = "Littel",
                            Phone = "1-482-589-1628",
                            Student_code = "StudentI8pLzCwa"
                        },
                        new
                        {
                            Id = 35,
                            Address = "48711 Lakin Junction, Lake Lenorastad, Trinidad and Tobago",
                            City = "New Clarabelle",
                            DateOfBirth = new DateTime(2022, 10, 15, 3, 6, 1, 654, DateTimeKind.Local).AddTicks(7059),
                            Email = "onhdexmapletest19935@gmail.com",
                            FirstName = "Lafayette",
                            FullName = "Lafayette Hahn",
                            Gender = true,
                            LastName = "Hahn",
                            Phone = "1-406-328-6960",
                            Student_code = "StudentiJ6jJvzj"
                        },
                        new
                        {
                            Id = 37,
                            Address = "41522 Marcella Plaza, West Rhoda, Moldova",
                            City = "Bellaville",
                            DateOfBirth = new DateTime(2023, 8, 16, 10, 47, 55, 859, DateTimeKind.Local).AddTicks(9009),
                            Email = "onhdexmapletest19937@gmail.com",
                            FirstName = "Ally",
                            FullName = "Ally Kerluke",
                            Gender = true,
                            LastName = "Kerluke",
                            Phone = "1-958-681-3685 x1050",
                            Student_code = "StudentgnQPZxZj"
                        },
                        new
                        {
                            Id = 39,
                            Address = "9736 Jacobson Mall, Ashlynnburgh, Croatia",
                            City = "Lake Stellachester",
                            DateOfBirth = new DateTime(2023, 7, 5, 19, 23, 15, 72, DateTimeKind.Local).AddTicks(5591),
                            Email = "onhdexmapletest19939@gmail.com",
                            FirstName = "Dwight",
                            FullName = "Dwight Ziemann",
                            Gender = false,
                            LastName = "Ziemann",
                            Phone = "648-652-9782 x70941",
                            Student_code = "StudentistSe0Yd"
                        },
                        new
                        {
                            Id = 41,
                            Address = "111 Gibson Track, Ovafort, American Samoa",
                            City = "Lake Emmalee",
                            DateOfBirth = new DateTime(2022, 11, 7, 10, 0, 58, 861, DateTimeKind.Local).AddTicks(9543),
                            Email = "onhdexmapletest19941@gmail.com",
                            FirstName = "Rahul",
                            FullName = "Rahul Medhurst",
                            Gender = false,
                            LastName = "Medhurst",
                            Phone = "823.316.7080",
                            Student_code = "StudentHThIRvRA"
                        },
                        new
                        {
                            Id = 43,
                            Address = "64460 Zulauf Courts, Robertsbury, Turkey",
                            City = "Port Beauland",
                            DateOfBirth = new DateTime(2022, 11, 4, 19, 47, 54, 904, DateTimeKind.Local).AddTicks(5360),
                            Email = "onhdexmapletest19943@gmail.com",
                            FirstName = "Andre",
                            FullName = "Andre Heller",
                            Gender = false,
                            LastName = "Heller",
                            Phone = "1-727-732-9047 x4920",
                            Student_code = "StudentGvphuIYK"
                        },
                        new
                        {
                            Id = 45,
                            Address = "481 Abshire Inlet, Hermannburgh, Turks and Caicos Islands",
                            City = "Lake Courtney",
                            DateOfBirth = new DateTime(2023, 8, 26, 12, 49, 23, 403, DateTimeKind.Local).AddTicks(7478),
                            Email = "onhdexmapletest19945@gmail.com",
                            FirstName = "Ariane",
                            FullName = "Ariane Lockman",
                            Gender = true,
                            LastName = "Lockman",
                            Phone = "1-778-333-4931",
                            Student_code = "StudentpYNbhAG2"
                        },
                        new
                        {
                            Id = 47,
                            Address = "872 Bertrand Fork, Paulborough, Christmas Island",
                            City = "West Pascaleborough",
                            DateOfBirth = new DateTime(2023, 5, 4, 22, 51, 6, 277, DateTimeKind.Local).AddTicks(3375),
                            Email = "onhdexmapletest19947@gmail.com",
                            FirstName = "Julianne",
                            FullName = "Julianne Gorczany",
                            Gender = true,
                            LastName = "Gorczany",
                            Phone = "1-342-554-8331",
                            Student_code = "Studentwd0ha4A2"
                        },
                        new
                        {
                            Id = 49,
                            Address = "0488 Bartholome Extension, Cyrilfurt, Ghana",
                            City = "East Theron",
                            DateOfBirth = new DateTime(2023, 1, 29, 13, 2, 14, 764, DateTimeKind.Local).AddTicks(1507),
                            Email = "onhdexmapletest19949@gmail.com",
                            FirstName = "Rosario",
                            FullName = "Rosario Beer",
                            Gender = true,
                            LastName = "Beer",
                            Phone = "(533) 545-3670 x6930",
                            Student_code = "StudentDPqAe0et"
                        },
                        new
                        {
                            Id = 51,
                            Address = "960 Daugherty Passage, Port Yessenia, Christmas Island",
                            City = "Phyllisborough",
                            DateOfBirth = new DateTime(2023, 9, 14, 14, 32, 53, 459, DateTimeKind.Local).AddTicks(3699),
                            Email = "onhdexmapletest19951@gmail.com",
                            FirstName = "Joshuah",
                            FullName = "Joshuah Sauer",
                            Gender = true,
                            LastName = "Sauer",
                            Phone = "(784) 399-3170 x605",
                            Student_code = "StudentQIXqndnH"
                        },
                        new
                        {
                            Id = 53,
                            Address = "4106 Medhurst Canyon, Davinside, Djibouti",
                            City = "North Lemuelview",
                            DateOfBirth = new DateTime(2022, 12, 2, 10, 19, 32, 290, DateTimeKind.Local).AddTicks(2074),
                            Email = "onhdexmapletest19953@gmail.com",
                            FirstName = "Tyrell",
                            FullName = "Tyrell Pfannerstill",
                            Gender = false,
                            LastName = "Pfannerstill",
                            Phone = "(496) 742-6426",
                            Student_code = "StudentOr15LLQY"
                        },
                        new
                        {
                            Id = 55,
                            Address = "05280 Rogahn Drive, New Marisol, Cayman Islands",
                            City = "Larkinshire",
                            DateOfBirth = new DateTime(2023, 8, 15, 21, 31, 34, 229, DateTimeKind.Local).AddTicks(9817),
                            Email = "onhdexmapletest19955@gmail.com",
                            FirstName = "Jasen",
                            FullName = "Jasen Kiehn",
                            Gender = false,
                            LastName = "Kiehn",
                            Phone = "1-427-922-0827",
                            Student_code = "StudentcWItK6t2"
                        },
                        new
                        {
                            Id = 57,
                            Address = "9055 Margot Bypass, O'Konport, Ecuador",
                            City = "Lake Serenity",
                            DateOfBirth = new DateTime(2023, 6, 30, 20, 43, 39, 850, DateTimeKind.Local).AddTicks(6999),
                            Email = "onhdexmapletest19957@gmail.com",
                            FirstName = "Toney",
                            FullName = "Toney Grimes",
                            Gender = false,
                            LastName = "Grimes",
                            Phone = "432.245.7466",
                            Student_code = "StudentOVPxtu71"
                        },
                        new
                        {
                            Id = 59,
                            Address = "891 Avery Land, Port Maria, Northern Mariana Islands",
                            City = "East Consueloborough",
                            DateOfBirth = new DateTime(2023, 1, 13, 3, 17, 32, 749, DateTimeKind.Local).AddTicks(8632),
                            Email = "onhdexmapletest19959@gmail.com",
                            FirstName = "Ezequiel",
                            FullName = "Ezequiel Hauck",
                            Gender = true,
                            LastName = "Hauck",
                            Phone = "803-962-2771 x51591",
                            Student_code = "StudentpWOkprUz"
                        },
                        new
                        {
                            Id = 61,
                            Address = "486 Koelpin Avenue, Schmidthaven, Romania",
                            City = "Wymanchester",
                            DateOfBirth = new DateTime(2023, 6, 16, 16, 13, 4, 62, DateTimeKind.Local).AddTicks(7565),
                            Email = "onhdexmapletest19961@gmail.com",
                            FirstName = "Vernice",
                            FullName = "Vernice McClure",
                            Gender = false,
                            LastName = "McClure",
                            Phone = "1-331-868-0908 x18204",
                            Student_code = "StudentMgw2bTxv"
                        },
                        new
                        {
                            Id = 63,
                            Address = "2659 Cierra Via, North Anastad, Guatemala",
                            City = "Emieberg",
                            DateOfBirth = new DateTime(2023, 2, 19, 11, 27, 43, 92, DateTimeKind.Local).AddTicks(7413),
                            Email = "onhdexmapletest19963@gmail.com",
                            FirstName = "Sam",
                            FullName = "Sam Ferry",
                            Gender = true,
                            LastName = "Ferry",
                            Phone = "835-844-5813",
                            Student_code = "StudentnqIIRGSo"
                        },
                        new
                        {
                            Id = 65,
                            Address = "038 Daniel Branch, Hansenchester, Philippines",
                            City = "New Hans",
                            DateOfBirth = new DateTime(2023, 8, 3, 3, 39, 41, 778, DateTimeKind.Local).AddTicks(6902),
                            Email = "onhdexmapletest19965@gmail.com",
                            FirstName = "Darren",
                            FullName = "Darren MacGyver",
                            Gender = false,
                            LastName = "MacGyver",
                            Phone = "1-992-752-8135",
                            Student_code = "StudentbjNP02Bb"
                        },
                        new
                        {
                            Id = 67,
                            Address = "7302 Carter Parkways, Pfannerstillton, Gambia",
                            City = "Gulgowskiport",
                            DateOfBirth = new DateTime(2023, 3, 19, 21, 28, 54, 263, DateTimeKind.Local).AddTicks(5283),
                            Email = "onhdexmapletest19967@gmail.com",
                            FirstName = "Jewel",
                            FullName = "Jewel Hessel",
                            Gender = false,
                            LastName = "Hessel",
                            Phone = "(650) 454-4370 x08694",
                            Student_code = "StudentlIeyv2H5"
                        },
                        new
                        {
                            Id = 69,
                            Address = "716 Taya Oval, Port Kennith, Zimbabwe",
                            City = "Grantmouth",
                            DateOfBirth = new DateTime(2023, 5, 22, 22, 6, 7, 411, DateTimeKind.Local).AddTicks(277),
                            Email = "onhdexmapletest19969@gmail.com",
                            FirstName = "Marisa",
                            FullName = "Marisa Oberbrunner",
                            Gender = true,
                            LastName = "Oberbrunner",
                            Phone = "(620) 795-3776",
                            Student_code = "Student2uBSxZWh"
                        },
                        new
                        {
                            Id = 71,
                            Address = "2702 Consuelo Pines, West Seth, Mali",
                            City = "Lake Jackyfurt",
                            DateOfBirth = new DateTime(2023, 4, 15, 19, 2, 37, 572, DateTimeKind.Local).AddTicks(3828),
                            Email = "onhdexmapletest19971@gmail.com",
                            FirstName = "Chyna",
                            FullName = "Chyna Brown",
                            Gender = false,
                            LastName = "Brown",
                            Phone = "293-906-9458",
                            Student_code = "StudenteOBnrd1U"
                        },
                        new
                        {
                            Id = 73,
                            Address = "7638 Jo Station, North Cassie, Slovakia (Slovak Republic)",
                            City = "New Stefan",
                            DateOfBirth = new DateTime(2023, 9, 24, 15, 1, 0, 942, DateTimeKind.Local).AddTicks(2518),
                            Email = "onhdexmapletest19973@gmail.com",
                            FirstName = "Ila",
                            FullName = "Ila Barton",
                            Gender = true,
                            LastName = "Barton",
                            Phone = "949.838.4119 x549",
                            Student_code = "Student3dek43to"
                        },
                        new
                        {
                            Id = 75,
                            Address = "6296 Hartmann Stravenue, Schmelerport, Iran",
                            City = "Lake Bryceshire",
                            DateOfBirth = new DateTime(2023, 2, 15, 6, 37, 55, 267, DateTimeKind.Local).AddTicks(283),
                            Email = "onhdexmapletest19975@gmail.com",
                            FirstName = "Florian",
                            FullName = "Florian Collins",
                            Gender = false,
                            LastName = "Collins",
                            Phone = "891.580.6628",
                            Student_code = "StudentKLARbbCp"
                        },
                        new
                        {
                            Id = 77,
                            Address = "28796 Connelly Cliff, Pacochachester, Lao People's Democratic Republic",
                            City = "Hackettmouth",
                            DateOfBirth = new DateTime(2023, 5, 12, 11, 1, 41, 424, DateTimeKind.Local).AddTicks(4697),
                            Email = "onhdexmapletest19977@gmail.com",
                            FirstName = "Adolfo",
                            FullName = "Adolfo Leannon",
                            Gender = false,
                            LastName = "Leannon",
                            Phone = "671.937.8615 x6064",
                            Student_code = "StudentYG5N0eu8"
                        },
                        new
                        {
                            Id = 79,
                            Address = "43841 Golda Ranch, New Elfriedahaven, Lesotho",
                            City = "McKenziestad",
                            DateOfBirth = new DateTime(2023, 2, 17, 22, 16, 14, 313, DateTimeKind.Local).AddTicks(2306),
                            Email = "onhdexmapletest19979@gmail.com",
                            FirstName = "Karley",
                            FullName = "Karley Collier",
                            Gender = true,
                            LastName = "Collier",
                            Phone = "(256) 553-2181",
                            Student_code = "Student48UAqEJk"
                        },
                        new
                        {
                            Id = 81,
                            Address = "250 Kailyn Gardens, Wuckertside, Ethiopia",
                            City = "Lake Erick",
                            DateOfBirth = new DateTime(2023, 2, 21, 5, 26, 22, 722, DateTimeKind.Local).AddTicks(7142),
                            Email = "onhdexmapletest19981@gmail.com",
                            FirstName = "Dewayne",
                            FullName = "Dewayne Kuvalis",
                            Gender = false,
                            LastName = "Kuvalis",
                            Phone = "737.674.6586",
                            Student_code = "StudentzkX8SFAk"
                        },
                        new
                        {
                            Id = 83,
                            Address = "9685 Perry Spurs, Schoenburgh, Pakistan",
                            City = "Port Tessie",
                            DateOfBirth = new DateTime(2023, 7, 18, 13, 15, 17, 787, DateTimeKind.Local).AddTicks(6351),
                            Email = "onhdexmapletest19983@gmail.com",
                            FirstName = "Anika",
                            FullName = "Anika Leffler",
                            Gender = true,
                            LastName = "Leffler",
                            Phone = "261-825-9249",
                            Student_code = "StudentDJuvSKm0"
                        },
                        new
                        {
                            Id = 85,
                            Address = "0060 Devin Extension, West Aidan, New Caledonia",
                            City = "East Madelyn",
                            DateOfBirth = new DateTime(2023, 8, 14, 2, 46, 38, 132, DateTimeKind.Local).AddTicks(4888),
                            Email = "onhdexmapletest19985@gmail.com",
                            FirstName = "Karlie",
                            FullName = "Karlie Shanahan",
                            Gender = true,
                            LastName = "Shanahan",
                            Phone = "1-776-264-8894",
                            Student_code = "StudentTkcW8cQx"
                        },
                        new
                        {
                            Id = 87,
                            Address = "08573 Zemlak Stravenue, Faheybury, Slovakia (Slovak Republic)",
                            City = "Mabelland",
                            DateOfBirth = new DateTime(2022, 12, 24, 4, 25, 58, 713, DateTimeKind.Local).AddTicks(1224),
                            Email = "onhdexmapletest19987@gmail.com",
                            FirstName = "Freddie",
                            FullName = "Freddie Jacobs",
                            Gender = true,
                            LastName = "Jacobs",
                            Phone = "1-306-962-2178 x86593",
                            Student_code = "StudentOoH2su69"
                        },
                        new
                        {
                            Id = 89,
                            Address = "758 Mossie Lodge, Charityshire, Malawi",
                            City = "D'Amoreport",
                            DateOfBirth = new DateTime(2022, 10, 23, 5, 23, 16, 802, DateTimeKind.Local).AddTicks(1554),
                            Email = "onhdexmapletest19989@gmail.com",
                            FirstName = "Raymond",
                            FullName = "Raymond Luettgen",
                            Gender = true,
                            LastName = "Luettgen",
                            Phone = "315.593.9581",
                            Student_code = "Student4WlGnXrJ"
                        },
                        new
                        {
                            Id = 91,
                            Address = "1279 Ebert Ranch, Bartellville, New Zealand",
                            City = "East Leora",
                            DateOfBirth = new DateTime(2022, 12, 3, 0, 13, 52, 978, DateTimeKind.Local).AddTicks(684),
                            Email = "onhdexmapletest19991@gmail.com",
                            FirstName = "Webster",
                            FullName = "Webster Dickinson",
                            Gender = true,
                            LastName = "Dickinson",
                            Phone = "926-890-5922",
                            Student_code = "StudentzCpN5yPK"
                        },
                        new
                        {
                            Id = 93,
                            Address = "479 Verona Neck, South Owenburgh, Thailand",
                            City = "Ziemannton",
                            DateOfBirth = new DateTime(2023, 3, 27, 13, 14, 37, 723, DateTimeKind.Local).AddTicks(3208),
                            Email = "onhdexmapletest19993@gmail.com",
                            FirstName = "Christy",
                            FullName = "Christy Jenkins",
                            Gender = true,
                            LastName = "Jenkins",
                            Phone = "966.597.9039",
                            Student_code = "StudentDoqdlcOE"
                        },
                        new
                        {
                            Id = 95,
                            Address = "6032 Thad Cove, Port Erikaport, Macao",
                            City = "Lake Arnoldmouth",
                            DateOfBirth = new DateTime(2023, 6, 16, 9, 57, 25, 958, DateTimeKind.Local).AddTicks(6095),
                            Email = "onhdexmapletest19995@gmail.com",
                            FirstName = "Josiah",
                            FullName = "Josiah Hoppe",
                            Gender = false,
                            LastName = "Hoppe",
                            Phone = "711-433-8726 x9609",
                            Student_code = "Student0r32xSyI"
                        },
                        new
                        {
                            Id = 97,
                            Address = "104 Dusty Keys, Howellchester, Chad",
                            City = "Schmelerland",
                            DateOfBirth = new DateTime(2023, 4, 24, 2, 59, 6, 115, DateTimeKind.Local).AddTicks(4126),
                            Email = "onhdexmapletest19997@gmail.com",
                            FirstName = "Austyn",
                            FullName = "Austyn Ankunding",
                            Gender = false,
                            LastName = "Ankunding",
                            Phone = "(966) 229-8319",
                            Student_code = "StudentELqpsMy1"
                        },
                        new
                        {
                            Id = 99,
                            Address = "38772 Betty Meadow, Port Edwardside, Germany",
                            City = "Pagacborough",
                            DateOfBirth = new DateTime(2023, 8, 22, 14, 57, 44, 7, DateTimeKind.Local).AddTicks(5249),
                            Email = "onhdexmapletest19999@gmail.com",
                            FirstName = "Janae",
                            FullName = "Janae Paucek",
                            Gender = false,
                            LastName = "Paucek",
                            Phone = "676.883.1733 x010",
                            Student_code = "StudentGTe8A0ov"
                        });
                });

            modelBuilder.Entity("LibraryModels.Comment", b =>
                {
                    b.HasOne("LibraryModels.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("LibraryModels.Discussion", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Facilities")
                        .WithMany("Discussion")
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModels.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithMany("Discussions")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facilities");

                    b.Navigation("Ticket");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.Ticket", b =>
                {
                    b.HasOne("LibraryModels.Facilities", "Category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryId");

                    b.HasOne("LibraryModels.Users", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Priority", "Priority")
                        .WithMany("Ticket")
                        .HasForeignKey("PriorityId");

                    b.HasOne("LibraryModels.Users", "Supporter")
                        .WithMany()
                        .HasForeignKey("SupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("LibraryModels.Users", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Supporter");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("LibraryModels.UserConn", b =>
                {
                    b.HasOne("LibraryModels.Notifications", "Notifications")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "NotiId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LibraryModels.Users", "Users")
                        .WithOne("userConn")
                        .HasForeignKey("LibraryModels.UserConn", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Notifications");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModels.UserInfo", b =>
                {
                    b.HasOne("LibraryModels.Users", "users")
                        .WithOne("userInfo")
                        .HasForeignKey("LibraryModels.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("users");
                });

            modelBuilder.Entity("LibraryModels.Facilities", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryModels.Notifications", b =>
                {
                    b.Navigation("userConn");
                });

            modelBuilder.Entity("LibraryModels.Priority", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.TicketStatus", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("LibraryModels.Users", b =>
                {
                    b.Navigation("Discussions");

                    b.Navigation("Tickets");

                    b.Navigation("userConn");

                    b.Navigation("userInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
